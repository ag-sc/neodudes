id,question,sparql,prompt
99,What is the time zone of Salt Lake City?,"SELECT ?timezone
WHERE {
  dbpedia:Salt_Lake_City dbpedia-owl:timeZone ?timezone
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
98,Who killed Caesar?,"SELECT ?killer
WHERE {
  dbpedia:Julius_Caesar dbo:deathCause ?death .
  ?death dbo:perpetrator ?killer .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
86,What is the highest mountain in Germany?,"SELECT ?mountain ?height
WHERE {
    ?mountain rdf:type dbo:Mountain ;
             dbo:country dbr:Germany ;
             dbo:elevation ?height .
}
ORDER BY DESC(?height)
LIMIT 1",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
84,Which American presidents were in office during the Vietnam War?,"SELECT DISTINCT ?president
WHERE {
  ?president a dbpedia-owl:President ;
             dbpprop:termPeriod ?termPeriod .
  FILTER (?termPeriod >= ""1961-01-20""^^xsd:date && ?termPeriod <= ""1975-04-30""^^xsd:date)
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
81,Butch Otter is the governor of which U.S. state?,"SELECT ?state
WHERE {
  dbpedia:Butch_Otter dbpedia-owl:governor ?state .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
73,How many gold medals did Michael Phelps win at the 2008 Olympics?,"SELECT (COUNT(?goldMedal) as ?totalGoldMedals)
WHERE {
  ?athlete dbp:name ""Michael Phelps""@en ;
           dbp:goldMedal ?goldMedal .
  ?goldMedal dbp:games <http://dbpedia.org/resource/2008_Summer_Olympics> .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
66,Which artists were born on the same date as Rachel Stevens?,"SELECT DISTINCT ?artist
WHERE {
  ?artist dbpedia-owl:birthDate ?date .
  FILTER (?date = ""1978-04-09""^^xsd:date)
  FILTER (?artist != dbr:Rachel_Stevens)
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
64,What is the profession of Frank Herbert?,"SELECT ?profession
WHERE {
  dbpedia:Frank_Herbert dbpedia-owl:profession ?profession
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
6,Are Taiko some kind of Japanese musical instrument?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?instrument
WHERE {
    dbr:Taiko dbo:instrument ?instrument .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
56,How many seats does the home stadium of FC Porto have?,"SELECT ?seats
WHERE {
  dbpedia:FC_Porto dbpedia-owl:ground ?stadium .
  ?stadium dbpedia-owl:capacity ?seats .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
49,Which frequent flyer program has the most airlines?,"SELECT ?program (COUNT(?airline) AS ?numAirlines)
WHERE {
  ?program a <http://dbpedia.org/ontology/FrequentFlyerProgram> .
  ?program <http://dbpedia.org/property/airlines> ?airline .
}
GROUP BY ?program
ORDER BY DESC(?numAirlines)
LIMIT 1",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
44,Which European countries have a constitutional monarchy?,"SELECT DISTINCT ?country
WHERE {
  ?country rdf:type dbo:Country ;
           dbo:governmentType dbr:Constitutional_monarchy .
  ?country dct:subject dbc:Countries_in_Europe .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
42,Which countries have places with more than two caves?,"SELECT DISTINCT ?country
WHERE {
  ?place rdf:type dbo:Place .
  ?place dbo:location ?country .
  ?place dbo:numberOfCaves ?numCaves .
  FILTER (?numCaves > 2)
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
4,"Which airports are located in California, USA?","SELECT ?airport
WHERE {
  ?airport a dbo:Airport ;
           dbo:location dbr:California ;
           dbo:country dbr:United_States .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
37,What are the nicknames of San Francisco?,"SELECT ?nickname
WHERE {
  dbr:San_Francisco dbo:nickname ?nickname
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
32,What is Angela Merkelâ€™s birth name?,"SELECT ?birthName
WHERE {
  dbpedia:Angela_Merkel dbpedia-owl:birthName ?birthName
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
31,Who is the mayor of Berlin?,"SELECT ?mayor
WHERE {
  <http://dbpedia.org/resource/Berlin> <http://dbpedia.org/ontology/leaderName> ?mayor .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
29,Which countries in the European Union adopted the Euro?,"SELECT ?country
WHERE {
  ?country a dbo:Country ;
           dbo:currency dbr:Euro .
  FILTER regex(str(?country), ""European_Union"")
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
23,Which software has been published by Mean Hamster Software?,"SELECT ?software
WHERE {
  ?software dct:publisher dbc:Mean_Hamster_Software .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
68,Which country was Bill Gates born in?,"SELECT ?country
WHERE {
  dbpedia:Bill_Gates dbpedia-owl:birthPlace ?birthPlace.
  ?birthPlace dbpedia-owl:country ?country.
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
22,How many grand-children did Jacques Cousteau have?,"SELECT (COUNT(?grandchild) as ?count)
WHERE {
  dbpedia:Jacques_Cousteau dbpedia-owl:grandchild ?grandchild .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
214,Give me all professional skateboarders from Sweden.,"SELECT ?skateboarder
WHERE {
  ?skateboarder rdf:type dbo:Skateboarder .
  ?skateboarder dbo:birthPlace dbr:Sweden .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
210,Which monarchs of the United Kingdom were married to a German?,"SELECT DISTINCT ?monarch
WHERE {
  ?monarch a dbo:Monarch ;
           dbo:spouse ?spouse .
  ?spouse dbo:birthPlace ?birthPlace .
  FILTER regex(str(?birthPlace), ""Germany"", ""i"")
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
199,Give me all Argentine films.,"SELECT ?film
WHERE {
  ?film dct:subject dbc:Argentine_films .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
203,How did Michael Jackson die?,"SELECT ?cause_of_death
WHERE {
  dbpedia:Michael_Jackson dbo:causeOfDeath ?cause_of_death .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
197,Which U.S. state has been admitted latest?,"SELECT ?state ?date
WHERE {
  ?state a dbo:State ;
         dbo:isPartOf <http://dbpedia.org/resource/United_States> ;
         dbo:admissionDate ?date .
}
ORDER BY DESC(?date)
LIMIT 1",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
196,Which classes does the Millepede belong to?,"SELECT DISTINCT ?class
WHERE {
  dbpedia:Millepede dct:subject ?class .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
188,Give me the homepage of Forbes.,"SELECT ?homepage
WHERE {
  dbpedia:Forbes dbo:homepage ?homepage
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
187,Who is the husband of Amanda Palmer?,"SELECT ?husband
WHERE {
  dbpedia:Amanda_Palmer dbpedia-owl:spouse ?husband
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
176,Who painted The Storm on the Sea of Galilee?,"SELECT ?painter
WHERE {
  ?painting dbo:author dbr:The_Storm_on_the_Sea_of_Galilee.
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
62,What is the highest place of Karakoram?,"SELECT ?place 
WHERE {
  ?place dct:subject dbc:Mountains_of_the_Karakoram .
  ?place dbo:elevation ?elevation .
}
ORDER BY DESC(?elevation)
LIMIT 1",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
173,When did Finland join the EU?,"SELECT ?date
WHERE {
  dbr:Finland dbo:accessionDate ?date
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
168,Which actors play in Big Bang Theory?,"SELECT DISTINCT ?actor
WHERE {
  ?tvShow dbo:starring ?actor .
  ?tvShow foaf:name ""The Big Bang Theory""@en .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
166,Which computer scientist won an oscar?,"SELECT ?scientist
WHERE {
  ?scientist dbo:award dbr:Academy_Award_for_Technical_Achievement .
  ?scientist dbo:field dbr:Computer_science .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
160,Who wrote Harry Potter?,"SELECT ?author
WHERE {
  ?book dbo:author ?author .
  ?book foaf:name ""Harry Potter""@en
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
158,Give me all writers that won the Nobel Prize in literature.,"SELECT ?writer
WHERE {
  ?writer a dbo:Writer ;
          dbo:award dbr:Nobel_Prize_in_Literature .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
157,Give me English actors starring in Lovesick.,"SELECT DISTINCT ?actor
WHERE {
  ?film dbo:starring ?actor .
  ?film rdfs:label ""Lovesick""@en .
  ?actor dbo:nationality dbr:England .
  ?actor dbo:occupation dbr:Actor .
}
LIMIT 10",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
155,What is the nick name of Baghdad?,"SELECT ?nickname
WHERE {
  dbpedia:Baghdad dbpedia-owl:nickname ?nickname
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
150,In which city was the president of Montenegro born?,"SELECT ?cityOfBirth WHERE {
  dbpedia:President_of_Montenegro dbo:birthPlace ?city.
  ?city dbo:country dbpedia:Montenegro.
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
149,Which U.S. state has the highest population density?,"SELECT ?state ?populationDensity
WHERE {
  ?state a dbo:AdministrativeRegion ;
         dbo:country dbr:United_States ;
         dbo:populationDensity ?populationDensity .
}
ORDER BY DESC(?populationDensity)
LIMIT 1",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
25,What is the longest river in China?,"SELECT ?river ?length
WHERE {
  ?river rdf:type dbo:River ;
         dbo:country dbr:China ;
         dbo:length ?length .
}
ORDER BY DESC(?length)
LIMIT 1",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
143,What is the area code of Berlin?,"SELECT ?areaCode
WHERE {
  dbpedia:Berlin dbpedia-owl:areaCode ?areaCode
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
140,How many scientists graduated from an Ivy League university?,"SELECT (COUNT(?scientist) as ?count)
WHERE {
  ?scientist a <http://dbpedia.org/ontology/Scientist> ;
             <http://dbpedia.org/ontology/education> ?education .
  ?education <http://dbpedia.org/ontology/institution> ?institution .
  ?institution <http://dbpedia.org/ontology/type> <http://dbpedia.org/resource/Ivy_League> .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
139,Which professional surfers were born in Australia?,"SELECT ?surfer
WHERE {
  ?surfer a dbo:Surfer ;
         dbo:birthPlace dbr:Australia .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
137,Give me all Dutch parties.,"SELECT DISTINCT ?party
WHERE {
  ?party a <http://dbpedia.org/ontology/PoliticalParty> .
  ?party <http://dbpedia.org/property/country> <http://dbpedia.org/resource/Netherlands> .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
136,How many moons does Mars have?,"SELECT (COUNT(?moon) AS ?numMoons)
WHERE {
  <http://dbpedia.org/resource/Mars> dbpedia-owl:numberOfMoons ?numMoons .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
134,What is Batman's real name?,"SELECT ?realName
WHERE {
  <http://dbpedia.org/resource/Batman> <http://dbpedia.org/ontology/alias> ?realName
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
132,What is Elon Musk famous for?,"SELECT ?abstract
WHERE {
  dbr:Elon_Musk dbo:abstract ?abstract .
  FILTER (langMatches(lang(?abstract), ""en""))
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
128,Who is the author of WikiLeaks?,"SELECT ?author
WHERE {
  dbpedia:WikiLeaks dbpedia:author ?author .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
126,Sean Parnell was the governor of which U.S. state?,"SELECT ?state WHERE {
  dbpedia:Sean_Parnell dbpedia-owl:governor ?state .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
125,How many years was the Ford Model T manufactured?,"SELECT (YEAR(?end) - YEAR(?start) AS ?years)
WHERE {
  dbpedia:Ford_Model_T dbpedia-owl:assemblyStartYear ?start ;
                       dbpedia-owl:assemblyEndYear ?end .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
124,When was Carlo Giuliani shot?,"SELECT ?date
WHERE {
  <http://dbpedia.org/resource/Carlo_Giuliani> <http://dbpedia.org/property/date> ?date
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
123,Give me all animals that are extinct.,"SELECT ?animal
WHERE {
  ?animal rdf:type dbo:Animal ;
          dbo:extinct|dbo:extinctYear ?extinct .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
122,Who was the wife of President Lincoln?,"SELECT ?wife
WHERE {
  dbpedia:Abraham_Lincoln dbpedia-owl:spouse ?wife .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
111,How many awards has Bertrand Russell?,"SELECT (COUNT(?award) AS ?count)
WHERE {
  dbpedia:Bertrand_Russell dbpedia-owl:award ?award
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
117,Is Pamela Anderson a vegan?,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?person
WHERE {
  ?person dbo:wikiPageID ?id .
  FILTER (?id = 11869) .
  ?person dbo:diet ?diet .
  FILTER regex(?diet, ""vegan"", ""i"")
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
59,Which space probes were sent into orbit around the sun?,"SELECT ?probe
WHERE {
  ?probe rdf:type dbo:SpaceProbe .
  ?probe dbo:orbit <http://dbpedia.org/resource/Sun> .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
113,Which German cities have more than 250000 inhabitants?,"SELECT ?city
WHERE {
  ?city rdf:type dbo:City ;
        dbo:country dbr:Germany ;
        dbo:populationTotal ?population .
  FILTER (?population > 250000)
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
104,Who is the daughter of Robert Kennedy married to?,"SELECT ?spouse
WHERE {
  dbpedia:Kathleen_Kennedy_Townsend dbpedia:spouse ?spouse .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
10,How many students does the Free University of Amsterdam have?,"SELECT ?numberOfStudents
WHERE {
  <http://dbpedia.org/resource/Free_University_of_Amsterdam> <http://dbpedia.org/ontology/students> ?numberOfStudents
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
1,What is the revenue of IBM?,"SELECT ?revenue
WHERE {
  dbpedia:IBM dbo:revenue ?revenue
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
178,How many James Bond movies do exist?,"SELECT (COUNT(?film) as ?count)
WHERE {
  ?film a dbo:Film ;
        dbo:starring dbr:James_Bond .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
129,Who does the voice of Bart Simpson?,"SELECT ?actor
WHERE {
  ?actor dbo:voice ?character .
  FILTER (?character = dbr:Bart_Simpson)
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
183,Who was Tom Hanks married to?,"SELECT ?spouse
WHERE {
  dbpedia:Tom_Hanks dbpedia-owl:spouse ?spouse .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
181,Through which countries does the Yenisei river flow?,"SELECT ?country
WHERE {
  dbr:Yenisei dbo:through ?country .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
7,Give me all cars that are produced in Germany.,"SELECT ?car
WHERE {
  ?car dbo:manufacturer dbr:Germany .
  ?car rdf:type dbo:Automobile .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
135,When did Michael Jackson die?,"SELECT ?dateOfDeath
WHERE {
  dbpedia:Michael_Jackson dbo:dateOfDeath ?dateOfDeath
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
50,What is the highest volcano in Africa?,"SELECT ?volcano ?height
WHERE {
  ?volcano rdf:type dbo:Volcano ;
           dbo:locatedInArea dbr:Africa ;
           dbo:elevation ?height .
}
ORDER BY DESC(?height)
LIMIT 1",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
39,Which poet wrote the most books?,"SELECT ?poet (COUNT(?book) AS ?numBooks)
WHERE {
  ?poet a dbo:Person ;
        dbo:author ?book .
}
GROUP BY ?poet
ORDER BY DESC(?numBooks)
LIMIT 1",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
83,Give me all gangsters from the prohibition era.,"SELECT DISTINCT ?gangster
WHERE {
  ?gangster a dbpedia-owl:Person ;
            dbpedia-owl:occupation dbpedia:Gangster ;
            dbpedia-owl:birthDate ?birthDate .
  FILTER (?birthDate >= ""1920-01-01""^^xsd:date && ?birthDate <= ""1933-12-05""^^xsd:date)
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
71,Give me all spacecrafts that flew to Mars.,"SELECT ?spacecraft
WHERE {
  ?spacecraft dbo:destination dbr:Mars .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
213,Show me all Czech movies.,"SELECT ?movie
WHERE {
  ?movie rdf:type dbo:Film ;
         dct:subject dbc:Czech_films .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
209,Give me all taikonauts.,"```sparql
SELECT ?taikonaut ?name
WHERE {
  ?taikonaut a <http://dbpedia.org/ontology/Taikonaut> ;
              foaf:name ?name .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
105,Which countries have more than ten volcanoes?,"SELECT ?country (COUNT(?volcano) AS ?num_volcanoes)
WHERE {
  ?volcano rdf:type dbo:Volcano ;
           dbo:country ?country .
}
GROUP BY ?country
HAVING (COUNT(?volcano) > 10)
ORDER BY DESC(?num_volcanoes)",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
52,Give me all movies with Tom Cruise.,"SELECT ?movie
WHERE {
  ?movie dbo:starring dbr:Tom_Cruise
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
102,When did Dracula's creator die?,"SELECT ?deathDate
WHERE {
  <http://dbpedia.org/resource/Bram_Stoker> <http://dbpedia.org/ontology/deathDate> ?deathDate
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
21,Who created English Wikipedia?,"SELECT ?creator 
WHERE {
  dbr:English_Wikipedia dct:creator ?creator .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
34,Give me all female German chancellors.,"SELECT ?chancellor
WHERE {
  ?chancellor a dbo:Chancellor ;
             dbo:birthPlace dbr:Germany ;
             dbo:gender ""female"" .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
145,Who owns Aldi?,"SELECT ?owner
WHERE {
  dbr:Aldi dbo:owner ?owner .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
154,Which books were written by Danielle Steel?,"SELECT ?book
WHERE {
  ?author foaf:name ""Danielle Steel""@en .
  ?book dbo:author ?author .
  ?book rdf:type dbo:Book .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
198,Who was influenced by Socrates?,"SELECT DISTINCT ?influencedBy
WHERE {
  ?socrates dbo:influenced ?influencedBy .
  FILTER (?socrates = dbr:Socrates)
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
162,How deep is Lake Chiemsee?,"SELECT ?depth
WHERE {
  dbpedia:Lake_Chiemsee dbpedia-owl:maximumDepth ?depth
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
212,Which companies work in the aerospace industry as well as in medicine?,"SELECT DISTINCT ?company
WHERE {
  ?company dct:subject dbc:Aerospace_companies ;
           dct:subject dbc:Medical_technology_companies .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
96,Which professional surfers were born on the Philippines?,"SELECT ?surfer
WHERE {
  ?surfer a dbo:Surfer ;
          dbo:birthPlace dbr:Philippines .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
40,Who were the parents of Queen Victoria?,"SELECT ?parent
WHERE {
  dbr:Queen_Victoria dbo:parent ?parent
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
79,Are there any castles in the United States?,"SELECT DISTINCT ?castle
WHERE {
  ?castle rdf:type dbo:Castle .
  ?castle dbo:country dbr:United_States
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
141,Which languages are spoken in Estonia?,"SELECT DISTINCT ?language
WHERE {
  <http://dbpedia.org/resource/Estonia> <http://dbpedia.org/ontology/language> ?language .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
80,Give me a list of all critically endangered birds.,"SELECT ?bird ?label
WHERE {
  ?bird rdf:type dbo:Bird ;
        dct:subject dbc:Critically_endangered_birds ;
        rdfs:label ?label .
  FILTER (lang(?label) = 'en')
}
ORDER BY ?label",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
159,Which countries are connected by the Rhine?,"SELECT DISTINCT ?country
WHERE {
  ?river a dbo:River ;
         rdfs:label ""Rhine""@en ;
         dbo:country ?country .
  ?country a dbo:Country .
  FILTER(langMatches(lang(?country), ""en""))
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
107,Who was the father of Queen Elizabeth II?,"SELECT ?father WHERE {
  dbpedia:Elizabeth_II dbpedia-owl:parent ?father .
  ?father a dbpedia-owl:Person .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
163,Give me all chemical elements.,"```sparql
SELECT ?element ?elementLabel
WHERE {
  ?element rdf:type dbo:ChemicalElement .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
211,Give me all American presidents of the last 20 years.,"SELECT DISTINCT ?president
WHERE {
  ?president a dbo:President ;
             dbo:nationality dbr:United_States ;
             dbo:birthDate ?birthDate .
  FILTER (?birthDate >= ""2001-01-01""^^xsd:date)
}
ORDER BY ?birthDate",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
51,When is the movie Worst Case Scenario going to be in cinemas in the Netherlands?,"SELECT ?releaseDate
WHERE {
  ?movie dbpedia-owl:releaseDate ?releaseDate .
  ?movie dbpedia-owl:country dbpedia:Netherlands .
  ?movie rdfs:label ""Worst Case Scenario""@en
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
144,Whom did Lance Bass marry?,"SELECT ?spouse
WHERE {
  dbpedia:Lance_Bass dbpedia-owl:spouse ?spouse .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
167,Which subsidiary of TUI Travel serves both Glasgow and Dublin?,"SELECT ?subsidiary
WHERE {
  ?subsidiary dbo:subsidiary <http://dbpedia.org/resource/TUI_Travel>.
  ?subsidiary dbo:serves <http://dbpedia.org/resource/Glasgow>.
  ?subsidiary dbo:serves <http://dbpedia.org/resource/Dublin>.
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
131,What languages are spoken in Pakistan?,"SELECT DISTINCT ?language
WHERE {
    <http://dbpedia.org/resource/Pakistan> <http://dbpedia.org/ontology/language> ?language .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
120,Who is the daughter of Bill Clinton married to?,"SELECT ?spouse 
WHERE {
  dbpedia:Chelsea_Clinton dbpedia-owl:spouse ?spouse .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
164,Who was on the Apollo 11 mission?,"SELECT ?astronaut
WHERE {
  dbpedia:Apollo_11 dbo:astronaut ?astronaut .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
88,What is the wavelength of Indigo?,"SELECT ?wavelength
WHERE {
  dbpedia:Indigo dbo:wavelength ?wavelength
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
151,Give me all B-sides of the Ramones.,"SELECT ?bSide
WHERE {
  ?song rdf:type dbo:MusicalWork ;
        dbo:artist dbr:Ramones ;
        dbo:type dbr:B-side ;
        rdfs:label ?bSide .
  FILTER (lang(?bSide) = 'en')
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
63,Who was called Scarface?,"SELECT ?person
WHERE {
  ?person dbo:nickname ""Scarface""@en .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
27,Which rivers flow into the North Sea?,"SELECT DISTINCT ?river
WHERE {
  ?river dct:subject dbc:Rivers_of_Europe ;
        dbo:mouth dbr:North_Sea .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
156,Where is Fort Knox located?,"SELECT ?location 
WHERE {
  dbpedia:Fort_Knox dbo:location ?location .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
207,Which daughters of British earls died at the same place they were born at?,"SELECT ?daughter ?birthPlace
WHERE {
  ?daughter a dbpedia-owl:Noble;
            dbpedia-owl:parent ?parent;
            dbpedia-owl:birthPlace ?birthPlace;
            dbpedia-owl:deathPlace ?birthPlace.
  ?parent a dbpedia-owl:Earl;
          dbpedia-owl:nationality <http://dbpedia.org/resource/United_Kingdom>.
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
24,How many emperors did China have?,"SELECT (COUNT(?emperor) AS ?count)
WHERE {
  ?emperor a dbo:Emperor ;
           dbo:country dbr:China .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
133,What are the names of the Teenage Mutant Ninja Turtles?,"SELECT ?turtleName
WHERE {
  <http://dbpedia.org/resource/Teenage_Mutant_Ninja_Turtles> <http://dbpedia.org/ontology/character> ?turtle .
  ?turtle <http://dbpedia.org/property/name> ?turtleName .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
103,Where does Piccadilly start?,"SELECT ?startPoint
WHERE {
  dbpedia:Piccadilly_Circus dbpedia-owl:location ?startPoint .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
165,What is the name of the university where Obama's wife studied?,"SELECT ?universityName
WHERE {
  ?person dbpedia-owl:spouse dbpedia:Michelle_Obama ;
          dbpedia-owl:almaMater ?university .
  ?university rdfs:label ?universityName .
  FILTER(langMatches(lang(?universityName), ""en""))
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
108,When did Paraguay proclaim its independence?,"SELECT ?date
WHERE {
  dbr:Paraguay dbo:proclamationDate ?date
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
15,How short is the shortest active NBA player?,"SELECT ?player ?height
WHERE {
  ?player a dbo:BasketballPlayer ;
          dbo:height ?height ;
          dbo:team ?team .
  ?team dbo:sport dbr:National_Basketball_Association .
}
ORDER BY ASC(?height)
LIMIT 1",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
45,Where did Abraham Lincoln die?,"SELECT ?place_of_death WHERE {
  dbpedia:Abraham_Lincoln dbo:deathPlace ?place_of_death
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
82,When was Jack Wolfskin founded?,"SELECT ?date
WHERE {
  dbpedia:Jack_Wolfskin dbo:foundationDate ?date
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
9,In which city is the headquarter of Air China?,"SELECT ?city 
WHERE {
  <http://dbpedia.org/resource/Air_China> <http://dbpedia.org/property/headquarters> ?hq .
  ?hq <http://dbpedia.org/property/city> ?city .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
201,What is the founding year of the brewery that produces Pilsner Urquell?,"SELECT ?year
WHERE {
  <http://dbpedia.org/resource/Pilsner_Urquell> dbpedia-owl:owner ?brewery .
  ?brewery dbpedia-owl:foundationYear ?year .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
171,When did the Boston Tea Party take place?,"SELECT ?date
WHERE {
  dbr:Boston_Tea_Party dbo:date ?date
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
182,Which animals are critically endangered?,"SELECT ?animal ?status
WHERE {
  ?animal rdf:type dbo:Animal ;
          dbo:conservationStatus dbr:Critically_Endangered ;
          rdfs:label ?label .
  FILTER (lang(?label) = 'en')
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
13,Which politicians were married to a German?,"SELECT DISTINCT ?politician
WHERE {
  ?politician a <http://dbpedia.org/ontology/Politician> .
  ?politician <http://dbpedia.org/ontology/spouse> ?spouse .
  ?spouse <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Germany> .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
114,How big is the earth's diameter?,"SELECT ?diameter
WHERE {
  <http://dbpedia.org/resource/Earth> <http://dbpedia.org/ontology/diameter> ?diameter
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
92,Is the wife of President Obama called Michelle?,"PREFIX dbpedia-owl: <http://dbpedia.org/ontology/>
SELECT ?wife
WHERE {
  dbpedia:Barack_Obama dbpedia-owl:spouse ?wife .
  FILTER (?wife = dbpedia:Michelle_Obama)
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
194,Which U.S. state has the abbreviation MN?,"SELECT ?state
WHERE {
  ?state dbpedia-owl:abbreviation ""MN"" .
  ?state a dbpedia-owl:State
  FILTER (langMatches(lang(?state), ""en""))
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
175,When did Muhammad die?,"SELECT ?deathDate
WHERE {
  dbpedia:Muhammad dbo:deathDate ?deathDate
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
26,What is the atmosphere of the Moon composed of?,"SELECT ?atmosphere
WHERE {
  dbr:Moon dbo:atmosphere ?atmosphere
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
60,Who is the governor of Texas?,"SELECT ?governor
WHERE {
  dbpedia:Texas dbpedia-owl:governor ?governor .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
110,Which movies did Kurosawa direct?,"SELECT ?movie
WHERE {
  ?movie dbo:director dbr:Akira_Kurosawa
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
206,What was the name of the famous battle in 1836 in San Antonio?,"SELECT ?battleName
WHERE {
  ?battle dbo:date ""1836""^^xsd:integer .
  ?battle dbo:location dbr:San_Antonio .
  ?battle rdfs:label ?battleName .
  FILTER (lang(?battleName) = 'en')
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
97,Give me the official websites of actors of the television show Charmed.,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT ?actor ?website
WHERE {
  ?charmed dbo:starring ?actor .
  ?actor foaf:isPrimaryTopicOf ?website .
  FILTER regex(str(?website), ""official website"", ""i"")
}
LIMIT 10",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
20,How many calories does a baguette have?,"SELECT ?calories
WHERE {
  dbpedia:Baguette dbo:calories ?calories
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
169,Give me all libraries established before 1400.,"SELECT ?library ?established_date
WHERE {
  ?library a dbo:Library ;
           dbo:established ?established_date .
  FILTER (YEAR(?established_date) < 1400)
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
38,Give me all Frisian islands that belong to the Netherlands.,"```sparql
SELECT ?island
WHERE {
  ?island dct:subject dbc:Frisian_Islands .
  ?island dbo:country dbr:Netherlands .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
192,Which museum exhibits The Scream by Munch?,"SELECT ?museum
WHERE {
  ?painting dbo:author dbr:Edvard_Munch ;
           rdfs:label ""The Scream""@en .
  ?museum dbo:collection ?painting .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
78,When was the De Beers company founded?,"SELECT ?dateFounded
WHERE {
  dbr:De_Beers dbo:formationDate ?dateFounded
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
19,Who became president after JFK died?,"SELECT ?successor
WHERE {
  dbr:John_F._Kennedy dbo:succeededBy ?successor .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
190,Who are the parents of the wife of Juan Carlos I?,"SELECT ?parent1 ?parent2
WHERE {
  ?wife dbo:spouse dbr:Juan_Carlos_I_of_Spain .
  ?wife dbo:parent ?parent1 .
  ?wife dbo:parent ?parent2 .
  FILTER (?parent1 != ?parent2)
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
174,Who is the novelist of the work a song of ice and fire?,"SELECT ?author
WHERE {
  dbpedia:A_Song_of_Ice_and_Fire dbo:author ?author .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
189,In which studio did the Beatles record their first album?,"SELECT ?studio
WHERE {
  ?album dbo:artist dbr:The_Beatles ;
        dbo:recordLabel ?studio .
  FILTER regex(str(?album), ""Please Please Me"")
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
152,Which beer brewing companies are located in North-Rhine Westphalia?,"SELECT DISTINCT ?company
WHERE {
  ?company a dbpedia-owl:Brewery ;
           dbpedia-owl:location dbpedia:North_Rhine-Westphalia .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
94,When did princess Diana die?,"SELECT ?dateOfDeath
WHERE {
  dbpedia:Diana,_Princess_of_Wales dbo:dateOfDeath ?dateOfDeath
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
8,Who founded Intel?,"SELECT ?founder WHERE {
  dbpedia:Intel dbpedia-owl:companyFounders ?founder .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
95,Who is the youngest player in the Premier League?,"SELECT ?player ?name ?birthdate
WHERE {
    ?player a dbpedia-owl:SoccerPlayer ;
            dbpedia-owl:league dbpedia:Premier_League ;
            dbpedia-owl:birthDate ?birthdate ;
            foaf:name ?name .
}
ORDER BY ASC(?birthdate)
LIMIT 1",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
119,Which instruments does Cat Stevens play?,"SELECT ?instrument
WHERE {
  dbpedia:Cat_Stevens dbpedia-owl:instrument ?instrument
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
115,How many rivers and lakes are in South Carolina?,"SELECT (COUNT(?river) AS ?num_rivers) 
WHERE {
  ?river a dbo:River ;
         dbo:locatedIn dbr:South_Carolina .
}

SELECT (COUNT(?lake) AS ?num_lakes) 
WHERE {
  ?lake a dbo:Lake ;
         dbo:locatedIn dbr:South_Carolina .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
116,Who was called Rodzilla?,"SELECT ?person
WHERE {
  ?person foaf:nick ""Rodzilla""@en .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
138,Give me the capitals of all countries in Africa.,"```sparql
SELECT ?country ?capital
WHERE {
  ?country a dbo:Country ;
           dct:subject dbc:Countries_in_Africa ;
           dbo:capital ?capital .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
177,Which bridges are of the same type as the Manhattan Bridge?,"SELECT ?bridge
WHERE {
  dbpedia:Manhattan_Bridge dbpedia-owl:sameAs ?bridge .
  ?bridge dbpedia-owl:bridgeType ?type .
  dbpedia:Manhattan_Bridge dbpedia-owl:bridgeType ?type .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
101,How many companies were founded by the founder of Facebook?,"SELECT (COUNT(?company) AS ?count)
WHERE {
  ?company dbo:founder dbr:Mark_Zuckerberg .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
14,Show me hiking trails in the Grand Canyon where there's no danger of flash floods.,"SELECT DISTINCT ?trail
WHERE {
  ?trail dct:subject dbc:Hiking_trails_in_the_Grand_Canyon
  FILTER NOT EXISTS {
    ?trail dct:subject dbc:Flash_floods
  }
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
87,Which book has the most pages?,"SELECT ?book ?pages
WHERE {
  ?book rdf:type dbo:Book .
  ?book dbo:numberOfPages ?pages .
}
ORDER BY DESC(?pages)
LIMIT 1",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
148,What is the largest state in the United States?,"SELECT ?state ?area
WHERE {
  ?state a dbo:State ;
         dbo:areaTotal ?area .
}
ORDER BY DESC(?area)
LIMIT 1",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
43,Give me the websites of companies with more than 500000 employees.,"SELECT DISTINCT ?company ?website
WHERE {
  ?company a dbo:Company ;
           dbo:numberOfEmployees ?employees ;
           foaf:homepage ?website .
  FILTER (?employees > 500000)
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
179,What were the names of the three ships by Columbus?,"SELECT ?shipName
WHERE {
  ?ship dbp:name ""Christopher Columbus""@en ;
        dbp:shipName ?shipName .
}
LIMIT 3",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
99,What is the time zone of Salt Lake City?,"```sparql
SELECT ?city, ?timezone
WHERE {
  ?city a dbo:City ;
        rdfs:label ""Salt Lake City""@en ;
        dbo:timeZone ?timezone .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
98,Who killed Caesar?,"```sparql
SELECT ?killer
WHERE {
  dbpedia:Julius_Caesar dbo:deathCause ?deathCause .
  ?deathCause rdfs:label ""assassination"" .
  dbpedia:Julius_Caesar dbo:assassination ?killer .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
86,What is the highest mountain in Germany?,"```sparql
SELECT ?mountain ?height
WHERE {
  ?mountain rdf:type dbo:Mountain ;
           dbo:country dbr:Germany ;
           dbo:elevation ?height .
}
ORDER BY DESC(?height)
LIMIT 1
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
84,Which American presidents were in office during the Vietnam War?,"```sparql
SELECT DISTINCT ?president
WHERE {
  ?president a dbpedia-owl:President ;
             dbpprop:office dbpedia:Presidency_of_the_United_States ;
             dbpprop:termPeriod ?termPeriod .
  FILTER (?termPeriod >= ""1961-01-20""^^xsd:date && ?termPeriod <= ""1975-04-30""^^xsd:date)
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
81,Butch Otter is the governor of which U.S. state?,"SELECT ?state
WHERE {
  dbpedia:Butch_Otter dbpedia-owl:governor ?state .
}",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
73,How many gold medals did Michael Phelps win at the 2008 Olympics?,"```sparql
SELECT (COUNT(?goldMedal) AS ?countGoldMedals)
WHERE {
  ?athlete dbp:name ""Michael Phelps""@en ;
           dbp:goldMedals ?goldMedal .
  FILTER regex(str(?goldMedal), ""2008 Olympics"")
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
66,Which artists were born on the same date as Rachel Stevens?,"```sparql
SELECT DISTINCT ?artist ?birthDate
WHERE {
  ?artist a dbo:MusicalArtist ;
          dbo:birthDate ?birthDate .
  FILTER (?birthDate = ""1978-04-09""^^xsd:date)
  FILTER (?artist != dbr:Rachel_Stevens)
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
64,What is the profession of Frank Herbert?,"SELECT ?profession
WHERE {
  dbpedia:Frank_Herbert dbpedia-owl:profession ?profession
}",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
6,Are Taiko some kind of Japanese musical instrument?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?instrument
WHERE {
  dbr:Taiko dbo:instrument ?instrument .
}",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
56,How many seats does the home stadium of FC Porto have?,"```sparql
SELECT ?seats
WHERE {
  dbpedia:FC_Porto dbpedia-owl:ground ?stadium .
  ?stadium dbpedia-owl:capacity ?seats .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
49,Which frequent flyer program has the most airlines?,"```sparql
SELECT ?program (COUNT(?airline) AS ?numAirlines)
WHERE {
  ?program a <http://dbpedia.org/ontology/FrequentFlyerProgram> .
  ?program <http://dbpedia.org/ontology/airline> ?airline .
}
GROUP BY ?program
ORDER BY DESC(?numAirlines)
LIMIT 1
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
44,Which European countries have a constitutional monarchy?,"```sparql
SELECT DISTINCT ?country
WHERE {
  ?country a dbo:Country ;
           dbo:governmentType dbr:Constitutional_monarchy ;
           dbo:continent dbr:Europe .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
42,Which countries have places with more than two caves?,"```sparql
SELECT DISTINCT ?country
WHERE {
  ?place rdf:type dbo:Place ;
         dbo:location ?country .
  ?country a dbo:Country ;
           dbo:location ?continent .
  ?continent a dbo:Continent .
  ?place dbo:numberOfCaves ?numCaves .
  FILTER (?numCaves > 2)
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
4,"Which airports are located in California, USA?","```sparql
SELECT ?airport
WHERE {
  ?airport a dbpedia-owl:Airport ;
           dbpedia-owl:location <http://dbpedia.org/resource/California> .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
37,What are the nicknames of San Francisco?,"```sparql
SELECT ?nickname
WHERE {
  dbr:San_Francisco dbo:nickname ?nickname
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
32,What is Angela Merkelâ€™s birth name?,"```sparql
SELECT ?birthName
WHERE {
  dbpedia:Angela_Merkel dbpedia-owl:birthName ?birthName
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
31,Who is the mayor of Berlin?,"SELECT ?mayor
WHERE {
  <http://dbpedia.org/resource/Berlin> <http://dbpedia.org/ontology/leaderName> ?mayor .
}",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
29,Which countries in the European Union adopted the Euro?,"```sparql
SELECT ?country
WHERE {
  ?country a dbo:Country ;
           dbo:currency dbr:Euro ;
           dbo:continent dbr:Europe ;
           dbo:memberOf dbr:European_Union .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
23,Which software has been published by Mean Hamster Software?,"```sparql
SELECT ?software
WHERE {
  ?software dct:publisher dbpedia:Mean_Hamster_Software .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
68,Which country was Bill Gates born in?,"```sparql
SELECT ?countryOfBirth
WHERE {
  dbpedia:Bill_Gates dbpedia-owl:birthPlace ?birthPlace .
  ?birthPlace dbpedia-owl:country ?countryOfBirth .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
22,How many grand-children did Jacques Cousteau have?,"```sparql
SELECT (COUNT(?grandchild) as ?count)
WHERE {
  <http://dbpedia.org/resource/Jacques_Cousteau> dbpedia-owl:grandchild ?grandchild .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
214,Give me all professional skateboarders from Sweden.,"```sparql
SELECT ?skateboarder
WHERE {
  ?skateboarder a dbo:Skateboarder ;
                dbo:birthPlace dbr:Sweden .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
210,Which monarchs of the United Kingdom were married to a German?,"```sparql
SELECT DISTINCT ?monarch ?monarchName
WHERE {
  ?monarch a dbpedia-owl:Monarch ;
           dbpedia-owl:spouse ?spouse .
  ?spouse dbpedia-owl:birthPlace ?birthPlace .
  FILTER regex(str(?birthPlace), ""Germany"", ""i"") .
  ?monarch rdfs:label ?monarchName .
  FILTER (lang(?monarchName) = 'en')
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
199,Give me all Argentine films.,"```sparql
SELECT ?film
WHERE {
  ?film rdf:type dbo:Film ;
        dct:subject dbc:Argentine_films .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
203,How did Michael Jackson die?,"```sparql
SELECT ?causeOfDeath
WHERE {
  dbpedia:Michael_Jackson dbpedia-owl:deathCause ?causeOfDeath .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
197,Which U.S. state has been admitted latest?,"```sparql
SELECT ?state ?date
WHERE {
  ?state a dbpedia-owl:State ;
         dbpedia-owl:formationDate ?date .
}
ORDER BY DESC(?date)
LIMIT 1
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
196,Which classes does the Millepede belong to?,"```sparql
SELECT DISTINCT ?class
WHERE {
  dbpedia:Millepede dct:subject ?class .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
188,Give me the homepage of Forbes.,"SELECT ?homepage 
WHERE {
  <http://dbpedia.org/resource/Forbes> foaf:homepage ?homepage
}",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
187,Who is the husband of Amanda Palmer?,"```sparql
SELECT ?husband
WHERE {
  dbpedia:Amanda_Palmer dbpedia-owl:spouse ?husband .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
176,Who painted The Storm on the Sea of Galilee?,"SELECT ?painter
WHERE {
  ?painting dbo:author dbr:The_Storm_on_the_Sea_of_Galilee.
}",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
62,What is the highest place of Karakoram?,"```sparql
SELECT ?place ?elevation
WHERE {
  ?place dct:subject dbc:Mountains_of_the_Karakoram .
  ?place dbo:elevation ?elevation .
}
ORDER BY DESC(?elevation)
LIMIT 1
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
173,When did Finland join the EU?,"```sparql
SELECT ?date
WHERE {
  dbpedia:Finland dbpedia-owl:formationDate ?date .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
168,Which actors play in Big Bang Theory?,"```sparql
SELECT ?actor
WHERE {
  ?tvShow dbo:starring ?actor .
  ?tvShow foaf:name ""The Big Bang Theory""@en .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
166,Which computer scientist won an oscar?,"```sparql
SELECT ?scientist
WHERE {
  ?scientist dbp:field dbp:Computer_science ;
             dbp:awards dbp:Academy_Award .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
160,Who wrote Harry Potter?,"```sparql
SELECT ?author
WHERE {
  ?book dbo:author ?author .
  ?book foaf:name ""Harry Potter""@en .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
158,Give me all writers that won the Nobel Prize in literature.,"```sparql
SELECT ?writer
WHERE {
  ?writer a dbo:Writer ;
          dbo:award dbr:Nobel_Prize_in_Literature .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
157,Give me English actors starring in Lovesick.,"```sparql
SELECT DISTINCT ?actor
WHERE {
  ?film dbo:starring ?actor .
  ?actor dbo:nationality dbr:England .
  ?film foaf:name ""Lovesick""@en .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
155,What is the nick name of Baghdad?,"```sparql
SELECT ?nickname
WHERE {
  dbr:Baghdad dbo:nickname ?nickname
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
150,In which city was the president of Montenegro born?,"```sparql
SELECT ?cityOfBirth
WHERE {
  <http://dbpedia.org/resource/President_of_Montenegro> dbpedia-owl:birthPlace ?city.
  ?city dbpedia-owl:country <http://dbpedia.org/resource/Montenegro>.
  ?city rdfs:label ?cityOfBirth.
  FILTER(LANG(?cityOfBirth) = """" || LANGMATCHES(LANG(?cityOfBirth), ""en""))
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
149,Which U.S. state has the highest population density?,"```sparql
SELECT ?state ?populationDensity
WHERE {
  ?state a dbo:State ;
         dbo:populationDensity ?populationDensity ;
         dbo:country dbr:United_States .
}
ORDER BY DESC(?populationDensity)
LIMIT 1
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
25,What is the longest river in China?,"```sparql
SELECT ?river ?length
WHERE {
  ?river rdf:type dbo:River ;
         dbo:country dbr:China ;
         dbo:length ?length .
}
ORDER BY DESC(?length)
LIMIT 1
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
143,What is the area code of Berlin?,"```sparql
SELECT ?areaCode
WHERE {
  dbpedia:Berlin dbpedia-owl:areaCode ?areaCode
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
140,How many scientists graduated from an Ivy League university?,"```sparql
SELECT (COUNT(DISTINCT ?scientist) AS ?count)
WHERE {
  ?scientist a <http://dbpedia.org/ontology/Scientist> ;
             <http://dbpedia.org/ontology/education> ?education .
  ?education <http://dbpedia.org/ontology/institution> ?institution .
  ?institution <http://dbpedia.org/ontology/type> <http://dbpedia.org/resource/Ivy_League> .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
139,Which professional surfers were born in Australia?,"```sparql
SELECT ?surfer
WHERE {
  ?surfer a dbpedia-owl:Surfer ;
          dbpedia-owl:birthPlace ?birthPlace .
  FILTER regex(?birthPlace, ""Australia"", ""i"")
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
137,Give me all Dutch parties.,"```sparql
SELECT ?party
WHERE {
  ?party a <http://dbpedia.org/ontology/PoliticalParty> ;
         <http://dbpedia.org/property/country> <http://dbpedia.org/resource/Netherlands> .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
136,How many moons does Mars have?,"```sparql
SELECT (COUNT(?moon) AS ?numMoons)
WHERE {
  <http://dbpedia.org/resource/Mars> dbpedia-owl:numberOfMoons ?numMoons .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
134,What is Batman's real name?,"```sparql
SELECT ?realName
WHERE {
  <http://dbpedia.org/resource/Batman> <http://dbpedia.org/ontology/realName> ?realName
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
132,What is Elon Musk famous for?,"```
SELECT ?abstract
WHERE {
  dbr:Elon_Musk dbo:abstract ?abstract .
  FILTER (langMatches(lang(?abstract), ""en""))
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
128,Who is the author of WikiLeaks?,"```sparql
SELECT ?author
WHERE {
  ?wikiPage dbpedia-owl:wikiPageRedirects dbpedia:WikiLeaks ;
            dbpedia-owl:author ?author .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
126,Sean Parnell was the governor of which U.S. state?,"```sparql
SELECT ?state
WHERE {
  dbpedia:Sean_Parnell dbpedia-owl:governor ?state .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
125,How many years was the Ford Model T manufactured?,"```sparql
SELECT (YEAR(?end) - YEAR(?start) AS ?manufacturing_years)
WHERE {
  dbpedia:Ford_Model_T dbpedia-owl:productionStartYear ?start ;
                        dbpedia-owl:productionEndYear ?end .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
124,When was Carlo Giuliani shot?,"```sparql
SELECT ?date
WHERE {
  dbpedia:Carlo_Giuliani dbpedia-owl:deathDate ?date .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
123,Give me all animals that are extinct.,"```sparql
SELECT ?animal
WHERE {
  ?animal rdf:type dbo:Animal ;
          dbo:extinct true .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
122,Who was the wife of President Lincoln?,"```sparql
SELECT ?wife
WHERE {
  <http://dbpedia.org/resource/Abraham_Lincoln> dbpedia-owl:spouse ?wife .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
111,How many awards has Bertrand Russell?,"```sparql
SELECT (COUNT(?award) AS ?count)
WHERE {
  <http://dbpedia.org/resource/Bertrand_Russell> dbpedia-owl:award ?award .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
117,Is Pamela Anderson a vegan?,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?person ?isVegan
WHERE {
  ?person dbo:wikiPageID ?id .
  FILTER (?id = 11869) .
  ?person dbo:diet ?diet .
  FILTER regex(?diet, ""vegan"", ""i"") .
  BIND(true AS ?isVegan)
}",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
59,Which space probes were sent into orbit around the sun?,"```sparql
SELECT ?probe
WHERE {
  ?probe rdf:type dbo:SpaceProbe ;
         dbo:orbit dbo:Sun .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
113,Which German cities have more than 250000 inhabitants?,"```sparql
SELECT ?city
WHERE {
  ?city a dbo:City ;
        dbo:country dbr:Germany ;
        dbo:populationTotal ?population .
  FILTER (?population > 250000)
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
104,Who is the daughter of Robert Kennedy married to?,"```sparql
SELECT ?spouse
WHERE {
  ?person foaf:name ""Kathleen Kennedy Townsend""@en .
  ?person dbpedia-owl:spouse ?spouse .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
10,How many students does the Free University of Amsterdam have?,"```sparql
SELECT ?numberOfStudents
WHERE {
  <http://dbpedia.org/resource/Free_University_of_Amsterdam> <http://dbpedia.org/ontology/students> ?numberOfStudents
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
1,What is the revenue of IBM?,"```sparql
SELECT ?revenue
WHERE {
  dbpedia:IBM dbo:revenue ?revenue
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
178,How many James Bond movies do exist?,"```sparql
SELECT (COUNT(?film) AS ?count)
WHERE {
  ?film a dbo:Film ;
        dbo:starring dbr:James_Bond .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
129,Who does the voice of Bart Simpson?,"```sparql
SELECT ?actor
WHERE {
  ?actor dbo:voice ?character .
  FILTER (?character = dbr:Bart_Simpson)
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
183,Who was Tom Hanks married to?,"```sparql
SELECT ?spouse
WHERE {
  dbpedia:Tom_Hanks dbpedia-owl:spouse ?spouse .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
181,Through which countries does the Yenisei river flow?,"```sparql
SELECT DISTINCT ?country
WHERE {
  <http://dbpedia.org/resource/Yenisei_River> dbpedia-owl:country ?country .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
7,Give me all cars that are produced in Germany.,"```sparql
SELECT ?car
WHERE {
  ?car dbo:manufacturer dbr:Germany .
  ?car rdf:type dbo:Automobile .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
135,When did Michael Jackson die?,"```
SELECT ?dateOfDeath
WHERE {
  dbpedia:Michael_Jackson dbo:dateOfDeath ?dateOfDeath
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
50,What is the highest volcano in Africa?,"```sparql
SELECT ?volcano ?height
WHERE {
  ?volcano rdf:type dbo:Volcano ;
          dbo:locatedInArea dbr:Africa ;
          dbo:elevation ?height .
}
ORDER BY DESC(?height)
LIMIT 1
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
39,Which poet wrote the most books?,"```sparql
SELECT ?poet (COUNT(?book) AS ?numBooks)
WHERE {
  ?poet a dbo:Person ;
        dbo:author ?book .
}
GROUP BY ?poet
ORDER BY DESC(?numBooks)
LIMIT 1
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
83,Give me all gangsters from the prohibition era.,"```sparql
SELECT ?gangster
WHERE {
  ?gangster a dbpedia-owl:Person ;
            dbpedia-owl:occupation dbpedia:Gangster ;
            dbpedia-owl:birthDate ?birthDate .
  FILTER (?birthDate >= ""1920-01-01""^^xsd:date && ?birthDate <= ""1933-12-05""^^xsd:date)
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
71,Give me all spacecrafts that flew to Mars.,"```sparql
SELECT ?spacecraft
WHERE {
  ?spacecraft dbo:destination <http://dbpedia.org/resource/Mars> .
  ?spacecraft rdf:type dbo:Spacecraft .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
213,Show me all Czech movies.,"```sparql
SELECT ?movie
WHERE {
  ?movie rdf:type dbo:Film ;
         dct:subject dbc:Czech_films .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
209,Give me all taikonauts.,"```sparql
SELECT ?taikonaut ?name
WHERE {
  ?taikonaut a dbpedia-owl:Astronaut ;
              dbpprop:nationality ?nationality ;
              foaf:name ?name .
  FILTER regex(?nationality, ""China"", ""i"")
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
105,Which countries have more than ten volcanoes?,"```sparql
SELECT ?country (COUNT(?volcano) AS ?numVolcanoes)
WHERE {
  ?volcano rdf:type dbo:Volcano ;
           dbo:country ?country .
}
GROUP BY ?country
HAVING (COUNT(?volcano) > 10)
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
52,Give me all movies with Tom Cruise.,"```sparql
SELECT DISTINCT ?movie
WHERE {
  ?movie dbo:starring dbr:Tom_Cruise .
  ?movie rdf:type dbo:Film .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
102,When did Dracula's creator die?,"SELECT ?deathDate
WHERE {
  <http://dbpedia.org/resource/Bram_Stoker> dbo:deathDate ?deathDate
}",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
21,Who created English Wikipedia?,"```sparql
SELECT ?creator
WHERE {
  dbpedia-en:English_Wikipedia dct:creator ?creator .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
34,Give me all female German chancellors.,"```sparql
SELECT ?chancellor
WHERE {
  ?chancellor a dbpedia-owl:Chancellor ;
              dbpprop:gender ""female"" ;
              dbpprop:nationality ""Germany""@en .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
145,Who owns Aldi?,"```sparql
SELECT ?owner
WHERE {
  dbpedia:Aldi dbo:parentCompany ?owner .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
154,Which books were written by Danielle Steel?,"```sparql
SELECT ?book
WHERE {
  ?author foaf:name ""Danielle Steel""@en .
  ?book dbo:author ?author .
  ?book rdf:type dbo:Book .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
198,Who was influenced by Socrates?,"```sparql
SELECT DISTINCT ?influencedBy
WHERE {
  ?influencedBy dbo:influencedBy dbr:Socrates.
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
162,How deep is Lake Chiemsee?,"```sparql
SELECT ?depth
WHERE {
  dbpedia:Lake_Chiemsee dbpedia-owl:maximumDepth ?depth
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
212,Which companies work in the aerospace industry as well as in medicine?,"```sparql
SELECT DISTINCT ?company
WHERE {
  ?company dct:subject dbc:Aerospace_companies ;
           dct:subject dbc:Medical_technology_companies .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
96,Which professional surfers were born on the Philippines?,"```sparql
SELECT ?surfer
WHERE {
  ?surfer a dbpedia-owl:Surfer ;
          dbpedia-owl:birthPlace ?birthPlace .
  FILTER regex(?birthPlace, ""Philippines"", ""i"")
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
40,Who were the parents of Queen Victoria?,"```sparql
SELECT ?parent
WHERE {
  dbr:Queen_Victoria dbo:parent ?parent .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
79,Are there any castles in the United States?,"```sparql
SELECT ?castle
WHERE {
  ?castle rdf:type dbo:Castle .
  ?castle dbo:country dbr:United_States .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
141,Which languages are spoken in Estonia?,"```sparql
SELECT DISTINCT ?language
WHERE {
  <http://dbpedia.org/resource/Estonia> dbpedia-owl:language ?language .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
80,Give me a list of all critically endangered birds.,"```sparql
SELECT ?bird ?name
WHERE {
  ?bird rdf:type dbo:Bird ;
        dbo:conservationStatus dbr:Critically_Endangered ;
        rdfs:label ?name .
  FILTER (lang(?name) = 'en')
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
159,Which countries are connected by the Rhine?,"```sparql
SELECT DISTINCT ?country
WHERE {
  ?river a dbo:River ;
         rdfs:label ""Rhine""@en ;
         dbo:country ?country .
  ?country a dbo:Country ;
           rdfs:label ?countryLabel .
  FILTER(LANG(?countryLabel) = ""en"")
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
107,Who was the father of Queen Elizabeth II?,"```sparql
SELECT ?father
WHERE {
  dbpedia:Elizabeth_II dbpedia-owl:parent ?father .
  ?father a dbpedia-owl:Person .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
163,Give me all chemical elements.,"```sparql
SELECT ?element ?elementLabel
WHERE {
  ?element rdf:type dbo:ChemicalElement .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
211,Give me all American presidents of the last 20 years.,"```sparql
SELECT ?president ?start_date
WHERE {
  ?president a dbpedia-owl:President ;
             dbpprop:termStart ?start_date .
  FILTER (?start_date >= ""2000-01-01""^^xsd:date)
}
ORDER BY ?start_date
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
51,When is the movie Worst Case Scenario going to be in cinemas in the Netherlands?,"```sparql
SELECT ?movie ?releaseDate
WHERE {
  ?movie rdf:type dbo:Film ;
         foaf:name ""Worst Case Scenario""@en ;
         dbo:country dbr:Netherlands ;
         dbo:releaseDate ?releaseDate .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
144,Whom did Lance Bass marry?,"```sparql
SELECT ?spouse
WHERE {
  dbpedia:Lance_Bass dbpedia-owl:spouse ?spouse .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
167,Which subsidiary of TUI Travel serves both Glasgow and Dublin?,"```sparql
SELECT ?company
WHERE {
  ?company dbo:subsidiary <http://dbpedia.org/resource/TUI_Travel>.
  ?company dbo:serves <http://dbpedia.org/resource/Glasgow>.
  ?company dbo:serves <http://dbpedia.org/resource/Dublin>.
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
131,What languages are spoken in Pakistan?,"```sparql
SELECT DISTINCT ?language
WHERE {
  <http://dbpedia.org/resource/Pakistan> dbpedia-owl:language ?language .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
120,Who is the daughter of Bill Clinton married to?,"```sparql
SELECT ?spouse
WHERE {
  dbpedia:Chelsea_Clinton dbpedia-owl:spouse ?spouse .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
164,Who was on the Apollo 11 mission?,"```sparql
SELECT ?astronaut
WHERE {
  dbpedia:Apollo_11 dbo:astronaut ?astronaut .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
88,What is the wavelength of Indigo?,"```sparql
SELECT ?wavelength
WHERE {
  dbpedia:Indigo dbo:wavelength ?wavelength
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
151,Give me all B-sides of the Ramones.,"```sparql
SELECT ?bSide
WHERE {
  ?album dbo:artist dbr:Ramones ;
        dbo:type dbr:B-side ;
        dbo:recordedAt ?bSide .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
63,Who was called Scarface?,"```sparql
SELECT ?person
WHERE {
  ?person foaf:nick ""Scarface""@en .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
27,Which rivers flow into the North Sea?,"```sparql
SELECT DISTINCT ?river
WHERE {
  ?river dct:subject dbc:Rivers_that_flow_into_the_North_Sea .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
156,Where is Fort Knox located?,"```sparql
SELECT ?location
WHERE {
  dbpedia:Fort_Knox dbo:location ?location .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
207,Which daughters of British earls died at the same place they were born at?,"```sparql
SELECT ?daughter ?birthPlace
WHERE {
  ?daughter a dbpedia-owl:Noble;
            dbpedia-owl:parent ?earl;
            dbpedia-owl:birthPlace ?birthPlace;
            dbpedia-owl:deathPlace ?birthPlace.
  ?earl a dbpedia-owl:Earl.
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
24,How many emperors did China have?,"```sparql
SELECT (COUNT(?emperor) AS ?count)
WHERE {
  ?emperor a dbo:Emperor ;
           dbo:country dbr:China .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
133,What are the names of the Teenage Mutant Ninja Turtles?,"```sparql
SELECT ?turtleName
WHERE {
  ?turtle dbo:series dbr:Teenage_Mutant_Ninja_Turtles ;
         dbo:characterName ?turtleName .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
103,Where does Piccadilly start?,"```sparql
SELECT ?startPoint
WHERE {
  <http://dbpedia.org/resource/Piccadilly> dbpedia-owl:routeStart ?startPoint .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
165,What is the name of the university where Obama's wife studied?,"```sparql
SELECT ?universityName
WHERE {
  ?person dbpedia-owl:spouse dbpedia:Michelle_Obama ;
          dbpedia-owl:almaMater ?university .
  ?university rdfs:label ?universityName .
  FILTER(langMatches(lang(?universityName), ""en""))
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
108,When did Paraguay proclaim its independence?,"```sparql
SELECT ?date
WHERE {
  dbr:Paraguay dbo:proclaimationDate ?date
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
15,How short is the shortest active NBA player?,"```sparql
SELECT ?player ?height
WHERE {
  ?player a dbpedia-owl:BasketballPlayer ;
          dbpprop:league dbpedia:NBA ;
          dbpprop:height ?height .
}
ORDER BY ASC(?height)
LIMIT 1
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
45,Where did Abraham Lincoln die?,"```sparql
SELECT ?placeOfDeath
WHERE {
  dbpedia:Abraham_Lincoln dbo:deathPlace ?placeOfDeath .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
82,When was Jack Wolfskin founded?,"```sparql
SELECT ?date
WHERE {
  dbpedia:Jack_Wolfskin dbo:foundationDate ?date
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
9,In which city is the headquarter of Air China?,"```sparql
SELECT ?city
WHERE {
  <http://dbpedia.org/resource/Air_China> dbpedia-owl:headquarter ?hq .
  ?hq dbpedia-owl:city ?city .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
201,What is the founding year of the brewery that produces Pilsner Urquell?,"```sparql
SELECT ?year
WHERE {
  ?brewery dbp:name ""Pilsner Urquell"" .
  ?brewery dbp:foundationYear ?year .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
171,When did the Boston Tea Party take place?,"SELECT ?date
WHERE {
  dbr:Boston_Tea_Party dbo:date ?date
}",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
182,Which animals are critically endangered?,"```sparql
SELECT ?animal
WHERE {
  ?animal rdf:type dbo:Animal ;
          dbo:conservationStatus dbr:Critically_Endangered .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
13,Which politicians were married to a German?,"```sparql
SELECT DISTINCT ?politician ?name
WHERE {
  ?politician a dbpedia-owl:Politician ;
              dbpprop:spouse ?spouse .
  ?spouse a dbpedia-owl:Person ;
         dbpprop:nationality ?nationality .
  FILTER regex(?nationality, ""German"", ""i"") .
  ?politician foaf:name ?name .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
114,How big is the earth's diameter?,"```sparql
SELECT ?diameter
WHERE {
  dbpedia:Earth dbpedia-owl:diameter ?diameter
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
92,Is the wife of President Obama called Michelle?,"```sparql
SELECT ?president ?wife
WHERE {
  ?president rdf:type dbo:President .
  ?president foaf:name ""Barack Obama""@en .
  ?president dbo:spouse ?wife .
  ?wife foaf:name ""Michelle Obama""@en .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
194,Which U.S. state has the abbreviation MN?,"```sparql
SELECT ?state
WHERE {
  ?state dbpedia-owl:abbreviation ""MN"" ;
         a dbpedia-owl:State .
  FILTER (langMatches(lang(?state), ""en""))
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
175,When did Muhammad die?,"SELECT ?deathDate
WHERE {
  dbpedia:Muhammad dbo:deathDate ?deathDate
}",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
26,What is the atmosphere of the Moon composed of?,"```sparql
SELECT ?atmosphere
WHERE {
  <http://dbpedia.org/resource/Moon> dbpedia-owl:atmosphere ?atmosphere .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
60,Who is the governor of Texas?,"```sparql
SELECT ?governor
WHERE {
  dbpedia:Texas dbpedia-owl:governor ?governor .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
110,Which movies did Kurosawa direct?,"```sparql
SELECT ?movie
WHERE {
  ?movie dbo:director dbr:Akira_Kurosawa .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
206,What was the name of the famous battle in 1836 in San Antonio?,"```sparql
SELECT ?battleName
WHERE {
  ?battle dbpedia-owl:date ""1836""^^xsd:integer .
  ?battle dbpedia-owl:location <http://dbpedia.org/resource/San_Antonio> .
  ?battle rdfs:label ?battleName .
  FILTER(langMatches(lang(?battleName), ""en""))
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
97,Give me the official websites of actors of the television show Charmed.,"```sparql
SELECT DISTINCT ?actor ?website
WHERE {
  ?actor dbo:starring dbr:Charmed .
  ?actor foaf:isPrimaryTopicOf ?website .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
20,How many calories does a baguette have?,"```sparql
SELECT ?calories
WHERE {
  dbpedia:Baguette dbpedia-owl:calories ?calories
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
169,Give me all libraries established before 1400.,"```sparql
SELECT ?library ?name ?established
WHERE {
  ?library a dbo:Library ;
           foaf:name ?name ;
           dbo:established ?established .
  FILTER (?established < ""1400-01-01""^^xsd:date)
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
38,Give me all Frisian islands that belong to the Netherlands.,"```sparql
SELECT ?island
WHERE {
  ?island dct:subject dbc:Frisian_Islands .
  ?island dct:subject dbc:Islands_of_the_Netherlands .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
192,Which museum exhibits The Scream by Munch?,"SELECT ?museum
WHERE {
  ?painting dbpedia-owl:author dbr:Edvard_Munch ;
            dbpedia-owl:title ""The_Scream""@en .
  ?museum dbpedia-owl:collection ?painting .
}",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
78,When was the De Beers company founded?,"```
SELECT ?date
WHERE {
  dbr:De_Beers dbo:foundationDate ?date
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
19,Who became president after JFK died?,"SELECT ?successor
WHERE {
  dbr:John_F._Kennedy dbo:succeededBy ?successor .
}",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
190,Who are the parents of the wife of Juan Carlos I?,"```sparql
SELECT ?parent
WHERE {
  ?wife dbo:spouse dbr:Juan_Carlos_I_of_Spain .
  ?wife dbo:parent ?parent .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
174,Who is the novelist of the work a song of ice and fire?,"```sparql
SELECT ?author
WHERE {
  ?novel dbpedia-owl:author ?author .
  ?novel dbpedia-owl:work ""A Song of Ice and Fire"" .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
189,In which studio did the Beatles record their first album?,"```sparql
SELECT ?studio
WHERE {
  ?album dbo:artist dbr:The_Beatles ;
        dbo:recordLabel ?studio .
  FILTER regex(str(?album), ""Please Please Me"")
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
152,Which beer brewing companies are located in North-Rhine Westphalia?,"```sparql
SELECT DISTINCT ?company
WHERE {
  ?company a dbpedia-owl:Brewery ;
           dbpedia-owl:location ?location .
  ?location dbpedia-owl:locatedIn dbpedia:North_Rhine-Westphalia .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
94,When did princess Diana die?,"SELECT ?dateOfDeath
WHERE {
  dbpedia:Diana,_Princess_of_Wales dbo:dateOfDeath ?dateOfDeath
}",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
8,Who founded Intel?,"PREFIX dbpedia-owl: <http://dbpedia.org/ontology/>
SELECT ?founder
WHERE {
  dbpedia:Intel dbpedia-owl:companyFounder ?founder
}",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
95,Who is the youngest player in the Premier League?,"```sparql
SELECT ?player ?birthdate
WHERE {
  ?player a dbpedia-owl:SoccerPlayer ;
          dbpprop:league dbpedia:Premier_League ;
          dbpprop:dateOfBirth ?birthdate .
}
ORDER BY ASC(?birthdate)
LIMIT 1
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
119,Which instruments does Cat Stevens play?,"```sparql
SELECT ?instrument
WHERE {
  dbpedia:Cat_Stevens dbpedia-owl:instrument ?instrument .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
115,How many rivers and lakes are in South Carolina?,"```sparql
SELECT (COUNT(?river) AS ?numRivers) (COUNT(?lake) AS ?numLakes)
WHERE {
  ?river rdf:type dbo:River ;
         dbo:locatedIn dbr:South_Carolina .
  
  ?lake rdf:type dbo:Lake ;
        dbo:locatedIn dbr:South_Carolina .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
116,Who was called Rodzilla?,"```sparql
SELECT ?person
WHERE {
  ?person foaf:nick ""Rodzilla""@en .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
138,Give me the capitals of all countries in Africa.,"```sparql
SELECT ?country ?capital
WHERE {
  ?country a dbo:Country ;
           dct:subject dbc:Countries_in_Africa ;
           dbo:capital ?capital .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
177,Which bridges are of the same type as the Manhattan Bridge?,"```sparql
SELECT ?bridge ?type
WHERE {
  dbpedia:Manhattan_Bridge dbpedia-owl:bridgeType ?type .
  ?bridge dbpedia-owl:bridgeType ?type .
  FILTER (?bridge != dbpedia:Manhattan_Bridge)
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
101,How many companies were founded by the founder of Facebook?,"```sparql
SELECT (COUNT(?company) AS ?count)
WHERE {
  ?founder dbo:company ?company .
  FILTER (?founder = dbr:Mark_Zuckerberg)
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
14,Show me hiking trails in the Grand Canyon where there's no danger of flash floods.,"```sparql
SELECT ?trail ?description
WHERE {
  ?trail dct:subject dbc:Hiking_trails_in_the_Grand_Canyon.
  ?trail dbo:abstract ?description.
  FILTER NOT EXISTS { ?trail dbo:wikiPageRedirects ?redirect }
  FILTER NOT EXISTS { ?trail dbo:danger dbc:Flash_floods }
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
87,Which book has the most pages?,"```sparql
SELECT ?book ?pages
WHERE {
  ?book rdf:type dbo:Book .
  ?book dbo:numberOfPages ?pages .
}
ORDER BY DESC(?pages)
LIMIT 1
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
148,What is the largest state in the United States?,"```sparql
SELECT ?state ?area
WHERE {
  ?state a dbpedia-owl:State ;
         dbpedia-owl:country dbpedia:United_States ;
         dbpedia-owl:areaTotal ?area .
}
ORDER BY DESC(?area)
LIMIT 1
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
43,Give me the websites of companies with more than 500000 employees.,"```sparql
SELECT DISTINCT ?company ?website
WHERE {
  ?company rdf:type dbo:Company ;
           dbo:numberOfEmployees ?employees ;
           foaf:homepage ?website .
  FILTER (?employees > 500000)
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
179,What were the names of the three ships by Columbus?,"```sparql
SELECT ?shipName
WHERE {
  ?ship dbp:name ?shipName .
  ?ship dct:subject dbc:Christopher_Columbus .
}
LIMIT 3
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
99,What is the time zone of Salt Lake City?,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?timezone
WHERE {
  <http://dbpedia.org/resource/Salt_Lake_City> dbo:timeZone ?timezone
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
98,Who killed Caesar?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?assassin
WHERE {
  dbr:Assassination_of_Julius_Caesar dbo:assassin ?assassin .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
86,What is the highest mountain in Germany?,"SELECT ?mountain ?height
WHERE {
  ?mountain rdf:type dbo:Mountain ;
           dbo:country dbr:Germany ;
           dbo:elevation ?height .
}
ORDER BY DESC(?height)
LIMIT 1
","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
84,Which American presidents were in office during the Vietnam War?,"SELECT ?president
WHERE {
  ?president a dbpedia-owl:President ;
             dbpprop:termPeriod [
               dbpprop:startDate ?start ;
               dbpprop:endDate ?end
             ] .
  FILTER (?start < ""1975-04-30""^^xsd:date && ?end > ""1955-11-01""^^xsd:date)
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
81,Butch Otter is the governor of which U.S. state?,"SELECT ?state WHERE {
  dbpedia:Butch_Otter dbpedia-owl:governor ?state .
  ?state a dbpedia-owl:State .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
73,How many gold medals did Michael Phelps win at the 2008 Olympics?,"SELECT (COUNT(?medal) AS ?totalGoldMedals)
WHERE {
  ?athlete dbp:name ""Michael Phelps""@en .
  ?athlete dbo:goldMedal ?medal .
  ?medal dbo:olympics <http://dbpedia.org/resource/2008_Summer_Olympics> .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
66,Which artists were born on the same date as Rachel Stevens?,"SELECT ?artist
WHERE {
  ?artist dbo:birthDate ?date .
  FILTER (?date = ""1978-04-09""^^xsd:date)
  FILTER (?artist != dbr:Rachel_Stevens)
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
64,What is the profession of Frank Herbert?,"SELECT ?profession
WHERE {
  dbpedia:Frank_Herbert dbpedia-owl:profession ?profession
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
6,Are Taiko some kind of Japanese musical instrument?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?instrument
WHERE {
  dbr:Taiko dbo:instrument ?instrument .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
56,How many seats does the home stadium of FC Porto have?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?seats
WHERE {
    <http://dbpedia.org/resource/Est%C3%A1dio_do_Drag%C3%A3o> dbp:seatingCapacity ?seats
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
49,Which frequent flyer program has the most airlines?,"SELECT ?program ?count
WHERE {
  ?program a dbo:AirlineAlliance ;
           dbo:numberOfAirlines ?count .
}
ORDER BY DESC(?count)
LIMIT 1","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
44,Which European countries have a constitutional monarchy?,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT DISTINCT ?country
WHERE {
  ?country a dbo:Country ;
           dbo:governmentType dbo:Constitutional_monarchy ;
           dbo:continent <http://dbpedia.org/resource/Category:Europe> .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
42,Which countries have places with more than two caves?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?country
WHERE {
  ?place a dbo:Place ;
         dbo:location ?country ;
         dbo:numberOfCaves ?numCaves .
  FILTER (?numCaves > 2)
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
4,"Which airports are located in California, USA?","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?airport
WHERE {
    ?airport dbo:location dbr:California .
    ?airport dbo:locationCountry dbr:United_States .
    ?airport a dbo:Airport .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
37,What are the nicknames of San Francisco?,"PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?nickname
WHERE {
  <http://dbpedia.org/resource/San_Francisco> dbpedia2:nickname ?nickname
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
32,What is Angela Merkelâ€™s birth name?,"PREFIX dbpedia: <http://dbpedia.org/resource/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?birthName
WHERE {
  dbpedia:Angela_Merkel dbpedia-owl:birthName ?birthName
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
31,Who is the mayor of Berlin?,"SELECT ?mayor
WHERE {
  <http://dbpedia.org/resource/Berlin> <http://dbpedia.org/ontology/leaderName> ?mayor .
  <http://dbpedia.org/resource/Berlin> <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Germany> .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
29,Which countries in the European Union adopted the Euro?,"SELECT ?country
WHERE {
  ?country rdf:type dbo:Country ;
          dbo:currency dbr:Euro ;
          dbo:location dbr:European_Union .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
23,Which software has been published by Mean Hamster Software?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?software
WHERE {
  ?software dbo:developer <http://dbpedia.org/resource/Mean_Hamster_Software>.
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
68,Which country was Bill Gates born in?,"SELECT ?country WHERE {
  dbpedia:Bill_Gates dbpedia-owl:birthPlace ?birthPlace .
  ?birthPlace dbpedia-owl:country ?country .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
22,How many grand-children did Jacques Cousteau have?,"PREFIX dbpedia: <http://dbpedia.org/resource/>
PREFIX dbpedia2: <http://dbpedia.org/ontology/>

SELECT (COUNT(?grandchild) AS ?count)
WHERE {
  dbpedia:Jacques_Cousteau dbpedia2:child ?child .
  ?child dbpedia2:child ?grandchild .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
214,Give me all professional skateboarders from Sweden.,"SELECT ?skateboarder
WHERE {
  ?skateboarder rdf:type dbo:Skateboarder ;
               dbo:birthPlace dbr:Sweden .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
210,Which monarchs of the United Kingdom were married to a German?,"SELECT DISTINCT ?monarch
WHERE {
  ?monarch dbo:spouse ?spouse .
  ?spouse dbo:birthPlace ?birthPlace .
  ?birthPlace dbo:country dbr:Germany .
  ?monarch a dbo:Monarch .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
199,Give me all Argentine films.,"```sparql
SELECT ?film
WHERE {
  ?film rdf:type dbo:Film ;
        dct:subject dbc:Argentine_films .
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
203,How did Michael Jackson die?,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?causeOfDeath
WHERE {
  <http://dbpedia.org/resource/Michael_Jackson> dbo:deathCause ?causeOfDeath
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
197,Which U.S. state has been admitted latest?,"SELECT ?stateLabel
WHERE {
  ?state a dbo:State ;
         dbo:isPartOf <http://dbpedia.org/resource/United_States> ;
         dbo:admissionDate ?date .
  FILTER NOT EXISTS { ?state dbo:endDate ?endDate }
}
ORDER BY DESC(?date)
LIMIT 1","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
196,Which classes does the Millepede belong to?,"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?class
WHERE {
  <http://dbpedia.org/resource/Millipede> rdf:type ?class .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
188,Give me the homepage of Forbes.,"PREFIX foaf: <http://xmlns.com/foaf/0.1/>
SELECT ?homepage
WHERE {
  <http://dbpedia.org/resource/Forbes> foaf:homepage ?homepage
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
187,Who is the husband of Amanda Palmer?,"PREFIX dbpedia: <http://dbpedia.org/resource/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?husband
WHERE {
  dbpedia:Amanda_Palmer foaf:spouse ?husband .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
176,Who painted The Storm on the Sea of Galilee?,"SELECT ?painter
WHERE {
  ?painting dbo:author dbr:The_Storm_on_the_Sea_of_Galilee.
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
62,What is the highest place of Karakoram?,"SELECT ?place 
WHERE {
  ?place dct:subject dbc:Mountains_of_the_Karakoram .
  ?place dbo:elevation ?elevation .
}
ORDER BY DESC(?elevation)
LIMIT 1","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
173,When did Finland join the EU?,"SELECT ?date
WHERE {
  dbr:Finland dbo:accessionDate ?date .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
168,Which actors play in Big Bang Theory?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?actor
WHERE {
  dbr:The_Big_Bang_Theory dbo:starring ?actor .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
166,Which computer scientist won an oscar?,"SELECT ?scientist
WHERE {
  ?scientist a dbo:Person ;
            dbo:award dbr:Academy_Award_for_Technical_Achievement .
  FILTER regex(str(?scientist), ""computer scientist"", ""i"")
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
160,Who wrote Harry Potter?,"SELECT ?author WHERE {
  ?book dbo:author ?author .
  ?book foaf:name ""Harry Potter"" .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
158,Give me all writers that won the Nobel Prize in literature.,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT DISTINCT ?writer
WHERE {
    ?writer a dbo:Writer ;
            dbo:award dbr:Nobel_Prize_in_Literature .
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
157,Give me English actors starring in Lovesick.,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?actor
WHERE {
  ?film dbo:starring ?actor .
  ?film dbo:wikiPageID ?id .
  FILTER (?id = 43273294) .
  ?actor dbo:birthPlace ?birthPlace .
  ?birthPlace dbo:country dbr:United_Kingdom .
  ?actor dbo:occupation dbr:Actor .
  ?actor dbo:nationality dbr:England .
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
155,What is the nick name of Baghdad?,"PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?nickname
WHERE {
  <http://dbpedia.org/resource/Baghdad> rdfs:label ?nickname
  FILTER (lang(?nickname) = 'en' && contains(?nickname, ""nick""))
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
150,In which city was the president of Montenegro born?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?city
WHERE {
  dbr:President_of_Montenegro dbo:birthPlace ?city .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
149,Which U.S. state has the highest population density?,"SELECT ?state WHERE {
  ?state rdf:type dbo:State ;
        dbo:populationDensity ?density .
  FILTER (?density = (SELECT MAX(?density) WHERE {
    ?state rdf:type dbo:State ;
          dbo:populationDensity ?density .
  }))
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
25,What is the longest river in China?,"SELECT ?river 
WHERE {
  ?river rdf:type dbo:River ;
         dbo:country dbr:China .
  ?river dbo:length ?length .
} 
ORDER BY DESC(?length)
LIMIT 1
","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
143,What is the area code of Berlin?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?areaCode
WHERE {
  <http://dbpedia.org/resource/Berlin> dbp:areaCode ?areaCode
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
140,How many scientists graduated from an Ivy League university?,"SELECT (COUNT(?scientist) AS ?count)
WHERE {
  ?scientist a <http://dbpedia.org/ontology/Scientist> .
  ?scientist <http://dbpedia.org/ontology/education> ?university .
  ?university <http://dbpedia.org/ontology/type> <http://dbpedia.org/resource/Ivy_League> .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
139,Which professional surfers were born in Australia?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?surfer
WHERE {
  ?surfer a dbo:Surfer ;
          dbo:birthPlace dbr:Australia .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
137,Give me all Dutch parties.,"```sparql
SELECT ?party
WHERE {
  ?party rdf:type dbo:PoliticalParty .
  ?party dct:subject dbc:Political_parties_in_the_Netherlands .
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
136,How many moons does Mars have?,"SELECT ?moons
WHERE {
  <http://dbpedia.org/resource/Mars> <http://dbpedia.org/ontology/numberOfMoons> ?moons
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
134,What is Batman's real name?,"SELECT ?realName WHERE {
  <http://dbpedia.org/resource/Batman> <http://dbpedia.org/ontology/realName> ?realName
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
132,What is Elon Musk famous for?,"SELECT ?abstract
WHERE {
  <http://dbpedia.org/resource/Elon_Musk> dbo:abstract ?abstract .
  FILTER langMatches(lang(?abstract), ""en"")
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
128,Who is the author of WikiLeaks?,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?author
WHERE {
    <http://dbpedia.org/resource/WikiLeaks> dbo:author ?author
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
126,Sean Parnell was the governor of which U.S. state?,"SELECT ?state WHERE {
  dbpedia:Sean_Parnell dbpedia-owl:governor ?state .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
125,How many years was the Ford Model T manufactured?,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?years
WHERE {
  dbo:Ford_Model_T dbo:productionEndDate ?endDate ;
                   dbo:productionStartDate ?startDate .
  BIND(year(xsd:dateTime(?endDate)) - year(xsd:dateTime(?startDate)) AS ?years)
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
124,When was Carlo Giuliani shot?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?date
WHERE {
  ?person dbo:deathCause ?cause .
  ?person dbp:name ""Carlo Giuliani""@en .
  ?person dbp:dateOfDeath ?date .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
123,Give me all animals that are extinct.,"SELECT ?animal
WHERE {
  ?animal rdf:type dbo:Animal ;
          dbo:extinct true .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
122,Who was the wife of President Lincoln?,"PREFIX dbpedia-owl: <http://dbpedia.org/ontology/>
SELECT ?wife
WHERE {
  dbpedia:Abraham_Lincoln dbpedia-owl:spouse ?wife .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
111,How many awards has Bertrand Russell?,"SELECT (COUNT(?award) AS ?count)
WHERE {
  dbpedia:Bertrand_Russell dbpedia-owl:award ?award
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
117,Is Pamela Anderson a vegan?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?person
WHERE {
  ?person dbo:wikiPageID ?id .
  ?person dbo:birthName ""Pamela Denise Anderson""@en .
  ?person dbp:occupation ?occupation .
  FILTER(CONTAINS(?occupation, ""Vegan""))
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
59,Which space probes were sent into orbit around the sun?,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?probe
WHERE {
  ?probe rdf:type dbo:SpaceProbe ;
         dbo:orbit <http://dbpedia.org/resource/Orbit_around_the_Sun> .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
113,Which German cities have more than 250000 inhabitants?,"SELECT ?city
WHERE {
  ?city rdf:type dbo:City ;
        dbo:country dbr:Germany ;
        dbo:populationTotal ?population .
  FILTER (?population > 250000)
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
104,Who is the daughter of Robert Kennedy married to?,"PREFIX dbpedia: <http://dbpedia.org/resource/>
PREFIX dbpedia2: <http://dbpedia.org/property/>

SELECT ?spouse
WHERE {
  dbpedia:Kathleen_Kennedy_Townsend dbpedia2:spouse ?spouse .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
10,How many students does the Free University of Amsterdam have?,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT (COUNT(?student) AS ?numberOfStudents)
WHERE {
  ?university dbo:universityName ""Free University of Amsterdam""@en .
  ?student dbo:almaMater ?university .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
1,What is the revenue of IBM?,"SELECT ?revenue
WHERE {
  <http://dbpedia.org/resource/IBM> <http://dbpedia.org/property/revenue> ?revenue
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
178,How many James Bond movies do exist?,"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT (COUNT(?film) as ?count)
WHERE {
    ?film rdf:type dbo:Film ;
          dbo:starring dbr:James_Bond .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
129,Who does the voice of Bart Simpson?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?actor
WHERE {
    ?actor dbo:voice ?character .
    ?character foaf:name ""Bart Simpson""@en .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
183,Who was Tom Hanks married to?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?spouse
WHERE {
    dbo:Tom_Hanks dbo:spouse ?spouse .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
181,Through which countries does the Yenisei river flow?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?country
WHERE {
  dbr:Yenisei dbo:mouthThrough ?country .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
7,Give me all cars that are produced in Germany.,"```sparql
SELECT ?car
WHERE {
  ?car dbo:manufacturer dbr:Germany .
  ?car rdf:type dbo:Automobile .
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
135,When did Michael Jackson die?,"SELECT ?dateOfDeath
WHERE {
  dbpedia:Michael_Jackson dbo:dateOfDeath ?dateOfDeath
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
50,What is the highest volcano in Africa?,"SELECT ?volcano ?height
WHERE {
  ?volcano rdf:type dbo:Volcano ;
          dbo:locatedInArea dbr:Africa ;
          dbo:elevation ?height .
}
ORDER BY DESC(?height)
LIMIT 1","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
39,Which poet wrote the most books?,"SELECT ?poet ?count
WHERE {
  ?author a dbo:Writer ;
          foaf:name ?poet ;
          dbo:notableWork ?book .
  {
    SELECT ?author (COUNT(?book) AS ?count)
    WHERE {
      ?author a dbo:Writer ;
              dbo:notableWork ?book .
    }
    GROUP BY ?author
    ORDER BY DESC(?count)
    LIMIT 1
  }
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
83,Give me all gangsters from the prohibition era.,"SELECT DISTINCT ?gangster
WHERE {
  ?gangster a dbpedia-owl:Person ;
            dbpedia-owl:occupation dbpedia:Gangster ;
            dbpedia-owl:birthDate ?birthDate .
  FILTER (?birthDate >= ""1920-01-01""^^xsd:date && ?birthDate <= ""1933-12-05""^^xsd:date)
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
71,Give me all spacecrafts that flew to Mars.,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?spacecraft
WHERE {
  ?spacecraft dbo:destination dbr:Mars .
  ?spacecraft rdf:type dbo:Spacecraft .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
213,Show me all Czech movies.,"SELECT ?movie
WHERE {
  ?movie rdf:type dbo:Film ;
         dct:subject dbc:Czech_films .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
209,Give me all taikonauts.,"```sparql
SELECT ?taikonaut
WHERE {
  ?taikonaut a <http://dbpedia.org/ontology/Taikonaut> .
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
105,Which countries have more than ten volcanoes?,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?country (COUNT(?volcano) AS ?numVolcanoes)
WHERE {
  ?volcano a dbo:Volcano ;
           dbo:country ?country .
  ?country a dbo:Country .
}
GROUP BY ?country
HAVING (COUNT(?volcano) > 10)
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
52,Give me all movies with Tom Cruise.,"SELECT ?movie
WHERE {
  ?movie dbo:starring dbr:Tom_Cruise .
  ?movie rdf:type dbo:Film .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
102,When did Dracula's creator die?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?deathDate
WHERE {
    ?creator dbo:notableWork dbr:Dracula ;
             dbo:deathDate ?deathDate .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
21,Who created English Wikipedia?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?creator
WHERE {
    ?wiki dbo:language ?language .
    ?wiki dbo:author ?creator .
    FILTER (?language = ""English"")
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
34,Give me all female German chancellors.,"SELECT ?chancellor
WHERE {
  ?chancellor a dbpedia-owl:Chancellor ;
              dbpedia-owl:birthPlace ?birthPlace .
  ?birthPlace dbpedia-owl:country dbpedia:Germany ;
              dbpedia-owl:gender ""female"" .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
145,Who owns Aldi?,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?owner
WHERE {
  dbo:Aldi dbo:owner ?owner
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
154,Which books were written by Danielle Steel?,"SELECT ?book
WHERE {
  ?author dbo:author dbr:Danielle_Steel .
  ?book dbo:author ?author .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
198,Who was influenced by Socrates?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dct: <http://purl.org/dc/terms/>

SELECT ?influencedBy
WHERE {
    dbr:Socrates dbo:influenced ?influencedBy .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
162,How deep is Lake Chiemsee?,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?depth
WHERE {
  <http://dbpedia.org/resource/Lake_Chiemsee> dbo:maxDepth ?depth
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
212,Which companies work in the aerospace industry as well as in medicine?,"SELECT DISTINCT ?company
WHERE {
  ?company dct:subject dbc:Aerospace_companies ;
           dct:subject dbc:Medical_technology_companies .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
96,Which professional surfers were born on the Philippines?,"SELECT ?surfer
WHERE {
  ?surfer dbo:birthPlace dbr:Philippines .
  ?surfer rdf:type dbo:Surfer .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
40,Who were the parents of Queen Victoria?,"PREFIX dbpedia-owl: <http://dbpedia.org/ontology/>
PREFIX dbpedia: <http://dbpedia.org/resource/>

SELECT ?parent
WHERE {
  dbpedia:Queen_Victoria dbpedia-owl:parent ?parent .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
79,Are there any castles in the United States?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?castle
WHERE {
  ?castle rdf:type dbo:Castle .
  ?castle dbo:country dbr:United_States .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
141,Which languages are spoken in Estonia?,"SELECT ?language
WHERE {
  <http://dbpedia.org/resource/Estonia> <http://dbpedia.org/ontology/language> ?language .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
80,Give me a list of all critically endangered birds.,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?bird
WHERE {
  ?bird rdf:type dbo:Bird ;
        dbo:conservationStatus dbr:Critically_Endangered .
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
159,Which countries are connected by the Rhine?,"SELECT ?country
WHERE {
  ?river dbo:name ""Rhine""@en .
  ?country dbo:river ?river .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
107,Who was the father of Queen Elizabeth II?,"PREFIX dbpedia-owl: <http://dbpedia.org/ontology/>
PREFIX dbpedia: <http://dbpedia.org/resource/>

SELECT ?father
WHERE {
  dbpedia:Elizabeth_II dbpedia-owl:parent ?father .
  ?father a dbpedia-owl:Person .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
163,Give me all chemical elements.,"```sparql
SELECT ?element ?elementLabel
WHERE {
  ?element rdf:type dbo:ChemicalElement .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
211,Give me all American presidents of the last 20 years.,"SELECT ?president
WHERE {
  ?president a dbo:President ;
            dbo:nationality dbr:United_States ;
            dbo:birthDate ?birthDate .
  FILTER (?birthDate >= ""2001-01-01""^^xsd:date)
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
51,When is the movie Worst Case Scenario going to be in cinemas in the Netherlands?,"SELECT ?releaseDate
WHERE {
  ?movie dbo:releaseDate ?releaseDate .
  ?movie rdfs:label ""Worst Case Scenario""@en .
  ?movie dbo:country dbr:Netherlands .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
144,Whom did Lance Bass marry?,"PREFIX dbpedia: <http://dbpedia.org/resource/>
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?spouse
WHERE {
  dbpedia:Lance_Bass dbo:spouse ?spouse
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
167,Which subsidiary of TUI Travel serves both Glasgow and Dublin?,"SELECT ?subsidary
WHERE {
  ?subsidary dbo:subsidiary <http://dbpedia.org/resource/TUI_Travel> .
  ?subsidary dbo:serves <http://dbpedia.org/resource/Glasgow> .
  ?subsidary dbo:serves <http://dbpedia.org/resource/Dublin> .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
131,What languages are spoken in Pakistan?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?language
WHERE {
  dbr:Pakistan dbo:officialLanguage ?language .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
120,Who is the daughter of Bill Clinton married to?,"PREFIX dbpedia: <http://dbpedia.org/resource/>
PREFIX dbpedia2: <http://dbpedia.org/property/>

SELECT ?spouse
WHERE {
  dbpedia:Chelsea_Clinton dbpedia2:spouse ?spouse .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
164,Who was on the Apollo 11 mission?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?astronaut
WHERE {
  dbr:Apollo_11 dbo:astronaut ?astronaut .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
88,What is the wavelength of Indigo?,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?wavelength
WHERE {
    dbo:Indigo dbo:wavelength ?wavelength
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
151,Give me all B-sides of the Ramones.,"```sparql
SELECT ?bSide
WHERE {
  ?album rdf:type dbo:Album ;
         dbo:artist dbr:Ramones ;
         dbo:type dbr:B-side ;
         dbo:recordedAt ?studio .
  ?bSide dbo:partOf ?album .
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
63,Who was called Scarface?,"SELECT ?person WHERE {
  ?person dbo:alias ""Scarface""@en .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
27,Which rivers flow into the North Sea?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?river
WHERE {
  ?river dbo:mouth dbr:North_Sea .
  ?river rdf:type dbo:River .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
156,Where is Fort Knox located?,"SELECT ?location WHERE {
  dbpedia:Fort_Knox dbpedia-owl:location ?location
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
207,Which daughters of British earls died at the same place they were born at?,"PREFIX dbpedia-owl: <http://dbpedia.org/ontology/>
PREFIX dbpedia: <http://dbpedia.org/resource/>

SELECT ?daughter
WHERE {
  ?daughter a dbpedia-owl:Noble;
            dbpedia-owl:birthPlace ?birthPlace;
            dbpedia-owl:deathPlace ?birthPlace;
            dbpedia-owl:parent ?parent.
  ?parent a dbpedia-owl:Earl;
          dbpedia-owl:nationality dbpedia:United_Kingdom.
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
24,How many emperors did China have?,"SELECT (COUNT(?emperor) AS ?count)
WHERE {
  ?emperor a dbo:Emperor ;
           dbo:reignStart ?start ;
           dbo:reignEnd ?end .
  FILTER (?start >= ""221-07-01""^^xsd:date && ?end <= ""1912-02-12""^^xsd:date)
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
133,What are the names of the Teenage Mutant Ninja Turtles?,"SELECT ?name
WHERE {
  ?turtle rdf:type dbo:FictionalCharacter ;
          rdfs:label ?name .
  FILTER regex(?name, ""Teenage Mutant Ninja Turtle"", ""i"")
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
103,Where does Piccadilly start?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?startPoint
WHERE {
    <http://dbpedia.org/resource/Piccadilly> dbp:terminusStart ?startPoint
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
165,What is the name of the university where Obama's wife studied?,"SELECT ?universityName
WHERE {
  ?person dbpedia-owl:spouse dbpedia:Barack_Obama ;
          dbpedia-owl:education ?university .
  ?university foaf:name ?universityName .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
108,When did Paraguay proclaim its independence?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dct: <http://purl.org/dc/terms/>

SELECT ?date
WHERE {
  dbo:Paraguay dct:subject dbc:Independence_days ;
               dbo:proclamationDate ?date .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
15,How short is the shortest active NBA player?,"SELECT ?height
WHERE {
  ?player rdf:type dbo:BasketballPlayer .
  ?player dbo:height ?height .
  ?player dbo:activeYearsStartYear ?startYear .
  FILTER(?startYear > ""2016""^^xsd:integer)
}
ORDER BY ASC(?height)
LIMIT 1","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
45,Where did Abraham Lincoln die?,"SELECT ?placeOfDeath WHERE {
  dbpedia:Abraham_Lincoln dbo:deathPlace ?placeOfDeath
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
82,When was Jack Wolfskin founded?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?foundingYear
WHERE {
    <http://dbpedia.org/resource/Jack_Wolfskin> dbp:foundation ?foundingYear
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
9,In which city is the headquarter of Air China?,"SELECT ?city WHERE {
  <http://dbpedia.org/resource/Air_China> <http://dbpedia.org/ontology/headquarter> ?hq .
  ?hq <http://dbpedia.org/ontology/locationCity> ?city .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
201,What is the founding year of the brewery that produces Pilsner Urquell?,"SELECT ?year
WHERE {
  ?brewery dbo:product dbr:Pilsner_Urquell ;
           dbo:foundingYear ?year .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
171,When did the Boston Tea Party take place?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dct: <http://purl.org/dc/terms/>

SELECT ?date
WHERE {
    ?event dct:subject <http://dbpedia.org/resource/Category:Boston_Tea_Party> ;
           dbo:date ?date .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
182,Which animals are critically endangered?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?animal
WHERE {
  ?animal dbo:wikiPageID ?id .
  ?animal dbo:binomialAuthority ?authority .
  ?animal dbo:conservationStatus dbr:Critically_Endangered .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
13,Which politicians were married to a German?,"SELECT ?politician
WHERE {
  ?politician a dbpedia-owl:Politician ;
              dbpedia-owl:spouse ?spouse .
  ?spouse dbpedia-owl:nationality <http://dbpedia.org/resource/Germany> .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
114,How big is the earth's diameter?,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?diameter
WHERE {
  <http://dbpedia.org/resource/Earth> dbo:diameter ?diameter
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
92,Is the wife of President Obama called Michelle?,"PREFIX dbpedia-owl: <http://dbpedia.org/ontology/>
PREFIX dbpprop: <http://dbpedia.org/property/>

SELECT ?wife
WHERE {
  dbpedia:Barack_Obama dbpprop:spouse ?wife .
  FILTER (?wife = dbpedia:Michelle_Obama)
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
194,Which U.S. state has the abbreviation MN?,"SELECT ?stateLabel
WHERE {
  ?state dbo:abbreviation ""MN"" .
  ?state rdf:type dbo:State .
  ?state rdfs:label ?stateLabel .
  FILTER (lang(?stateLabel) = 'en')
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
175,When did Muhammad die?,"SELECT ?dateOfDeath WHERE {
  <http://dbpedia.org/resource/Muhammad> <http://dbpedia.org/ontology/deathDate> ?dateOfDeath
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
26,What is the atmosphere of the Moon composed of?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?atmosphere
WHERE {
  dbr:Moon dbo:atmosphere ?atmosphere
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
60,Who is the governor of Texas?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?governor
WHERE {
  dbr:Texas dbo:governor ?governor .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
110,Which movies did Kurosawa direct?,"SELECT ?movie
WHERE {
  ?movie dbo:director dbr:Akira_Kurosawa .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
206,What was the name of the famous battle in 1836 in San Antonio?,"SELECT ?battleName
WHERE {
  ?battle dbp:date ""1836"" ;
          dbp:location dbr:San_Antonio ;
          rdfs:label ?battleName .
  FILTER (lang(?battleName) = 'en')
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
97,Give me the official websites of actors of the television show Charmed.,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?actor ?website
WHERE {
  ?charmed dbo:starring ?actor .
  ?actor foaf:isPrimaryTopicOf ?website .
  FILTER regex(str(?website), ""http://www\\."")
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
20,How many calories does a baguette have?,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?calories
WHERE {
  ?baguette dbo:abstract ?abstract .
  FILTER (CONTAINS(?abstract, ""calories""))
  FILTER (CONTAINS(?abstract, ""baguette""))
  ?baguette dbo:calories ?calories
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
169,Give me all libraries established before 1400.,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dct: <http://purl.org/dc/terms/>

SELECT ?library
WHERE {
  ?library a dbo:Library ;
           dct:subject <http://dbpedia.org/resource/Category:Libraries_established_before_1400> .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
38,Give me all Frisian islands that belong to the Netherlands.,"```sparql
SELECT ?island
WHERE {
  ?island rdf:type dbo:Island .
  ?island dbo:country dbr:Netherlands .
  ?island dbo:locatedInArea dbr:Frisian_Islands .
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
192,Which museum exhibits The Scream by Munch?,"SELECT ?museum
WHERE {
  ?painting dbo:author dbr:Edvard_Munch ;
           rdfs:label ""The Scream""@en .
  ?museum dbo:collection ?painting .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
78,When was the De Beers company founded?,"SELECT ?date
WHERE {
  dbr:De_Beers dbo:formationDate ?date
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
19,Who became president after JFK died?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?successor
WHERE {
  dbr:John_F._Kennedy dbo:succeededBy ?successor .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
190,Who are the parents of the wife of Juan Carlos I?,"PREFIX dbpedia: <http://dbpedia.org/resource/>
PREFIX dbpedia2: <http://dbpedia.org/property/>

SELECT ?parents
WHERE {
  dbpedia:Juan_Carlos_I dbpedia2:spouse ?wife .
  ?wife dbpedia2:parents ?parents .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
174,Who is the novelist of the work a song of ice and fire?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?author
WHERE {
    ?novel dbo:author ?author .
    ?novel dbp:title ""A Song of Ice and Fire""@en .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
189,In which studio did the Beatles record their first album?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?studio
WHERE {
  ?album dbo:artist dbr:The_Beatles ;
        dbo:recordedIn ?studio .
  ?studio a dbo:Studio .
}
LIMIT 1","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
152,Which beer brewing companies are located in North-Rhine Westphalia?,"SELECT DISTINCT ?company
WHERE {
  ?company rdf:type dbo:Company ;
           dbo:location dbr:North_Rhine-Westphalia ;
           dbo:type dbr:Brewery .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
94,When did princess Diana die?,"SELECT ?dateOfDeath
WHERE {
  <http://dbpedia.org/resource/Diana,_Princess_of_Wales> <http://dbpedia.org/ontology/deathDate> ?dateOfDeath
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
8,Who founded Intel?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?founder
WHERE {
    ?company dbo:companyName ""Intel Corporation""@en .
    ?company dbo:founder ?founder .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
95,Who is the youngest player in the Premier League?,"SELECT ?player ?name ?birthdate
WHERE {
  ?player a dbo:SoccerPlayer ;
          dbo:birthDate ?birthdate ;
          dbo:league ?league .
  ?league rdfs:label ""Premier League""@en .
  ?player foaf:name ?name .
}
ORDER BY ASC(?birthdate)
LIMIT 1
","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
119,Which instruments does Cat Stevens play?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?instrument
WHERE {
  dbr:Cat_Stevens dbo:instrument ?instrument
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
115,How many rivers and lakes are in South Carolina?,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT (COUNT(?river) AS ?numRivers) (COUNT(?lake) AS ?numLakes)
WHERE {
  ?river dbo:locatedInArea <http://dbpedia.org/resource/South_Carolina> .
  ?lake dbo:locatedInArea <http://dbpedia.org/resource/South_Carolina> .
  ?river a dbo:River .
  ?lake a dbo:Lake .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
116,Who was called Rodzilla?,"PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbpedia-owl: <http://dbpedia.org/ontology/>

SELECT ?person
WHERE {
    ?person dbpedia-owl:alias ""Rodzilla""@en .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
138,Give me the capitals of all countries in Africa.,"```sparql
SELECT ?country ?capital
WHERE {
  ?country a dbo:Country ;
           dbo:continent dbr:Africa ;
           dbo:capital ?capital .
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
177,Which bridges are of the same type as the Manhattan Bridge?,"```sparql
SELECT ?bridge
WHERE {
  dbpedia:Manhattan_Bridge dbpedia-owl:sameAs ?sameBridge .
  ?sameBridge dbpedia-owl:bridgeType ?type .
  ?bridge dbpedia-owl:bridgeType ?type .
  FILTER (?bridge != dbpedia:Manhattan_Bridge)
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
101,How many companies were founded by the founder of Facebook?,"SELECT (COUNT(?company) AS ?count)
WHERE {
  ?founder dbo:company ?company .
  ?founder dbo:wikiPageID 698 .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
14,Show me hiking trails in the Grand Canyon where there's no danger of flash floods.,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?trail
WHERE {
  ?trail dbo:location dbr:Grand_Canyon .
  ?trail dbo:activity dbr:Hiking .
  FILTER NOT EXISTS { ?trail dbo:hazard dbr:Flash_flood }
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
87,Which book has the most pages?,"```sparql
SELECT ?book ?pages
WHERE {
  ?book rdf:type dbo:Book .
  ?book dbo:numberOfPages ?pages .
}
ORDER BY DESC(?pages)
LIMIT 1
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
148,What is the largest state in the United States?,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?state ?area
WHERE {
  ?state a dbo:State ;
         dbo:areaTotal ?area .
  FILTER (?area > 1e6)
}
ORDER BY DESC(?area)
LIMIT 1
OFFSET 0","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
43,Give me the websites of companies with more than 500000 employees.,"```sparql
SELECT DISTINCT ?company ?website
WHERE {
  ?company rdf:type dbo:Company ;
           dbo:numberOfEmployees ?employees ;
           foaf:homepage ?website .
  FILTER (?employees > 500000)
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
179,What were the names of the three ships by Columbus?,"SELECT ?shipName
WHERE {
  ?ship dbp:name ""Christopher Columbus""@en ;
        dbp:shipName ?shipName .
}
LIMIT 3","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
99,What is the time zone of Salt Lake City?,"```sparql
SELECT ?timezone
WHERE {
  dbpedia:Salt_Lake_City dbpedia-owl:timeZone ?timezone .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
98,Who killed Caesar?,"```sparql
SELECT ?assassin
WHERE {
  dbpedia:Julius_Caesar dbo:assassination ?assassination .
  ?assassination dbo:perpetrator ?assassin .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
86,What is the highest mountain in Germany?,"```
SELECT ?mountain ?height
WHERE {
  ?mountain rdf:type dbo:Mountain ;
           dbo:country dbr:Germany ;
           dbo:elevation ?height .
}
ORDER BY DESC(?height)
LIMIT 1
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
84,Which American presidents were in office during the Vietnam War?,"```sparql
SELECT DISTINCT ?president
WHERE {
  ?president a dbo:President ;
             dbo:office ?office .
  ?office dbo:incumbentDuring ?vietnamWar .
  FILTER regex(str(?vietnamWar), ""Vietnam_War"", ""i"")
  FILTER regex(str(?president), ""United_States"", ""i"")
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
81,Butch Otter is the governor of which U.S. state?,"```sparql
SELECT ?state
WHERE {
  dbpedia:Butch_Otter dbpedia-owl:governor ?state .
  ?state a dbpedia-owl:State .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
73,How many gold medals did Michael Phelps win at the 2008 Olympics?,"```sparql
SELECT (COUNT(?goldMedal) AS ?totalGoldMedals)
WHERE {
  ?athlete dbpedia-owl:goldMedals ?goldMedal .
  ?athlete foaf:name ""Michael Phelps""@en .
  ?goldMedal dbpedia-owl:games <http://dbpedia.org/resource/2008_Summer_Olympics> .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
66,Which artists were born on the same date as Rachel Stevens?,"```sparql
SELECT DISTINCT ?artist
WHERE {
  {
    SELECT ?artist
    WHERE {
      {
        SELECT ?date
        WHERE {
          ?person dbpedia-owl:birthDate ?date ;
                  foaf:name ""Rachel Stevens""@en .
        }
      }
      ?artist dbpedia-owl:birthDate ?date .
      FILTER (?artist != ?person)
    }
  }
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
64,What is the profession of Frank Herbert?,"```sparql
SELECT ?profession
WHERE {
  dbpedia:Frank_Herbert dbpedia-owl:profession ?profession
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
6,Are Taiko some kind of Japanese musical instrument?,"```
SELECT ?instrument
WHERE {
  dbr:Taiko dbo:instrument ?instrument .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
56,How many seats does the home stadium of FC Porto have?,"```sparql
SELECT ?seats
WHERE {
  dbpedia:FC_Porto dbpedia-owl:ground ?stadium .
  ?stadium dbpedia-owl:capacity ?seats .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
49,Which frequent flyer program has the most airlines?,"```sparql
SELECT ?programName (COUNT(?airline) AS ?numAirlines)
WHERE {
  ?program a dbo:AirlineAlliance ;
           rdfs:label ?programName ;
           dbo:airline ?airline .
}
GROUP BY ?programName
ORDER BY DESC(?numAirlines)
LIMIT 1
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
44,Which European countries have a constitutional monarchy?,"```sparql
SELECT DISTINCT ?country
WHERE {
  ?country a dbo:Country ;
           dbo:governmentType dbr:Constitutional_monarchy ;
           dbo:continent dbr:Europe .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
42,Which countries have places with more than two caves?,"```sparql
SELECT DISTINCT ?country
WHERE {
  ?place rdf:type dbo:Place ;
         dbo:location ?country .
  ?country a dbo:Country .
  {
    SELECT ?country (COUNT(?cave) AS ?numCaves)
    WHERE {
      ?cave rdf:type dbo:Cave ;
            dbo:location ?place .
    }
    GROUP BY ?country
    HAVING (?numCaves > 2)
  }
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
4,"Which airports are located in California, USA?","```sparql
SELECT ?airport
WHERE {
  ?airport a dbpedia-owl:Airport ;
           dbpedia-owl:location <http://dbpedia.org/resource/California> .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
37,What are the nicknames of San Francisco?,"```sparql
SELECT ?nickname
WHERE {
  dbr:San_Francisco dbo:nickname ?nickname
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
32,What is Angela Merkelâ€™s birth name?,"```sparql
SELECT ?birthName
WHERE {
  dbr:Angela_Merkel dbo:birthName ?birthName
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
31,Who is the mayor of Berlin?,"```
SELECT ?mayor
WHERE {
  <http://dbpedia.org/resource/Berlin> <http://dbpedia.org/ontology/leaderName> ?mayor .
  FILTER regex(?mayor, ""Mayor"", ""i"")
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
29,Which countries in the European Union adopted the Euro?,"```sparql
SELECT DISTINCT ?country
WHERE {
  ?country a dbo:Country ;
           dbo:currency dbr:Euro .
  ?country dbo:continent dbr:Europe .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
23,Which software has been published by Mean Hamster Software?,"```sparql
SELECT DISTINCT ?software
WHERE {
  ?software dct:publisher dbc:Mean_Hamster_Software .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
68,Which country was Bill Gates born in?,"```sparql
SELECT ?countryOfBirth
WHERE {
  dbpedia:Bill_Gates dbpedia-owl:birthPlace ?birthPlace .
  ?birthPlace dbpedia-owl:country ?countryOfBirth .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
22,How many grand-children did Jacques Cousteau have?,"```sparql
SELECT (COUNT(?grandchild) as ?count)
WHERE {
  dbpedia:Jacques_Cousteau dbpedia-owl:grandchild ?grandchild .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
214,Give me all professional skateboarders from Sweden.,"```sparql
SELECT DISTINCT ?skateboarder
WHERE {
  ?skateboarder a dbo:Skateboarder ;
                dbo:birthPlace/dbo:country dbr:Sweden .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
210,Which monarchs of the United Kingdom were married to a German?,"```sparql
SELECT DISTINCT ?monarch ?monarchName
WHERE {
  ?monarch a dbo:Monarch ;
           dbo:spouse ?spouse .
  ?spouse dbo:birthPlace ?birthPlace .
  ?birthPlace dbo:country dbr:Germany .
  ?monarch rdfs:label ?monarchName .
  FILTER (lang(?monarchName) = 'en')
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
199,Give me all Argentine films.,"```sparql
SELECT ?film
WHERE {
  ?film rdf:type dbo:Film ;
        dct:subject dbc:Argentine_films .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
203,How did Michael Jackson die?,"```
SELECT ?causeOfDeath
WHERE {
  dbpedia:Michael_Jackson dbpedia-owl:deathCause ?causeOfDeath .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
197,Which U.S. state has been admitted latest?,"```sparql
SELECT ?state ?date
WHERE {
  ?state a dbo:State ;
         dbo:isPartOf dbr:United_States ;
         dbo:admissionDate ?date .
}
ORDER BY DESC(?date)
LIMIT 1
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
196,Which classes does the Millepede belong to?,"```sparql
SELECT DISTINCT ?class
WHERE {
  dbr:Millepede dct:subject ?class .
  ?class a skos:Concept .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
188,Give me the homepage of Forbes.,"```sparql
SELECT ?homepage
WHERE {
  <http://dbpedia.org/resource/Forbes> foaf:homepage ?homepage
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
187,Who is the husband of Amanda Palmer?,"```sparql
SELECT ?husband
WHERE {
  dbpedia:Amanda_Palmer dbpedia-owl:spouse ?husband .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
176,Who painted The Storm on the Sea of Galilee?,"```sparql
SELECT ?painter
WHERE {
  <http://dbpedia.org/resource/The_Storm_on_the_Sea_of_Galilee> dbpedia-owl:author ?painter .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
62,What is the highest place of Karakoram?,"```sparql
SELECT ?place ?elevation
WHERE {
  ?place dct:subject dbc:Mountains_of_the_Karakoram .
  ?place dbo:elevation ?elevation .
}
ORDER BY DESC(?elevation)
LIMIT 1
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
173,When did Finland join the EU?,"```sparql
SELECT ?date
WHERE {
  dbr:Finland dbo:accessionDate ?date.
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
168,Which actors play in Big Bang Theory?,"```sparql
SELECT DISTINCT ?actor
WHERE {
  ?tvShow dbo:starring ?actor .
  ?tvShow foaf:name ""The Big Bang Theory""@en .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
166,Which computer scientist won an oscar?,"```sparql
SELECT ?scientist
WHERE {
  ?scientist a dbo:Person ;
            dbo:award dbr:Academy_Award .
  ?scientist dbo:field dbr:Computer_science .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
160,Who wrote Harry Potter?,"```sparql
SELECT ?author
WHERE {
  <http://dbpedia.org/resource/Harry_Potter> dbpedia-owl:author ?author .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
158,Give me all writers that won the Nobel Prize in literature.,"```sparql
SELECT DISTINCT ?writer
WHERE {
  ?writer a dbo:Writer ;
          dbo:award dbr:Nobel_Prize_in_Literature .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
157,Give me English actors starring in Lovesick.,"```sparql
SELECT DISTINCT ?actor
WHERE {
  ?film dbo:starring ?actor .
  ?actor a dbo:Actor ;
         dbo:nationality dbr:England .
  ?film foaf:name ""Lovesick""@en .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
155,What is the nick name of Baghdad?,"```sparql
SELECT ?nickname
WHERE {
  dbr:Baghdad dbo:nickname ?nickname
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
150,In which city was the president of Montenegro born?,"```sparql
SELECT ?cityOfBirth
WHERE {
  <http://dbpedia.org/resource/President_of_Montenegro> dbpedia-owl:birthPlace ?city.
  ?city dbpedia-owl:country <http://dbpedia.org/resource/Montenegro>.
  ?city rdfs:label ?cityOfBirth.
  FILTER (lang(?cityOfBirth) = 'en')
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
149,Which U.S. state has the highest population density?,"```sparql
SELECT ?state ?populationDensity
WHERE {
  ?state a dbo:AdministrativeRegion ;
         dbo:country dbr:United_States ;
         dbo:populationDensity ?populationDensity .
}
ORDER BY DESC(?populationDensity)
LIMIT 1
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
25,What is the longest river in China?,"```sparql
SELECT ?river ?length
WHERE {
  ?river rdf:type dbo:River ;
         dbo:country dbr:China ;
         dbo:length ?length .
} 
ORDER BY DESC(?length)
LIMIT 1
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
143,What is the area code of Berlin?,"```sparql
SELECT ?areaCode
WHERE {
  dbpedia:Berlin dbpedia-owl:areaCode ?areaCode
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
140,How many scientists graduated from an Ivy League university?,"```sparql
SELECT (COUNT(DISTINCT ?scientist) AS ?count)
WHERE {
  ?scientist a dbpedia-owl:Scientist ;
             dbpedia-owl:almaMater ?university .
  ?university dbpedia-owl:type dbpedia:Ivy_League .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
139,Which professional surfers were born in Australia?,"```sparql
SELECT DISTINCT ?surfer
WHERE {
  ?surfer a dbo:Surfer ;
         dbo:birthPlace/dbo:country dbr:Australia .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
137,Give me all Dutch parties.,"```sparql
SELECT ?party
WHERE {
  ?party rdf:type dbo:PoliticalParty ;
         dct:subject dbc:Political_parties_in_the_Netherlands .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
136,How many moons does Mars have?,"```sparql
SELECT (COUNT(?moon) AS ?numMoons)
WHERE {
  <http://dbpedia.org/resource/Mars> dbpedia-owl:numberOfMoons ?numMoons .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
134,What is Batman's real name?,"```sparql
SELECT ?realName
WHERE {
  <http://dbpedia.org/resource/Batman> <http://dbpedia.org/ontology/alias> ?realName
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
132,What is Elon Musk famous for?,"```sparql
SELECT ?description
WHERE {
  dbpedia:Elon_Musk dbo:abstract ?description .
  FILTER (langMatches(lang(?description), ""en""))
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
128,Who is the author of WikiLeaks?,"```sparql
SELECT ?author
WHERE {
  <http://dbpedia.org/resource/WikiLeaks> <http://dbpedia.org/ontology/author> ?author .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
126,Sean Parnell was the governor of which U.S. state?,"```sparql
SELECT ?state
WHERE {
  dbpedia:Sean_Parnell dbpedia-owl:governor ?state .
  ?state a dbpedia-owl:State .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
125,How many years was the Ford Model T manufactured?,"```sparql
SELECT (YEAR(?endDate) - YEAR(?startDate) AS ?manufacturingYears)
WHERE {
  dbpedia:Ford_Model_T dbpedia-owl:manufacturer ?manufacturer .
  ?manufacturer dbpedia-owl:foundingDate ?startDate ;
                 dbpedia-owl:dissolutionDate ?endDate .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
124,When was Carlo Giuliani shot?,"```sparql
SELECT ?date
WHERE {
  dbr:Carlo_Giuliani dbo:dateOfDeath ?date .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
123,Give me all animals that are extinct.,"```sparql
SELECT ?animal
WHERE {
  ?animal rdf:type dbo:Animal ;
          dbo:extinct true .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
122,Who was the wife of President Lincoln?,"```sparql
SELECT ?wife
WHERE {
  <http://dbpedia.org/resource/Abraham_Lincoln> dbpedia-owl:spouse ?wife .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
111,How many awards has Bertrand Russell?,"```sparql
SELECT (COUNT(?award) AS ?count)
WHERE {
  <http://dbpedia.org/resource/Bertrand_Russell> dbpedia-owl:award ?award .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
117,Is Pamela Anderson a vegan?,"```sparql
SELECT ?person ?personName ?diet
WHERE {
  ?person foaf:name ""Pamela Anderson""@en ;
          dbp:diet ?diet .
  BIND(str(?person) AS ?personName)
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
59,Which space probes were sent into orbit around the sun?,"```sparql
SELECT ?probe
WHERE {
  ?probe a dbpedia-owl:SpaceProbe ;
         dbpedia-owl:orbit dbpedia:Sun .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
113,Which German cities have more than 250000 inhabitants?,"```sparql
SELECT ?city
WHERE {
  ?city rdf:type dbo:City ;
        dbo:country dbr:Germany ;
        dbo:populationTotal ?population .
  FILTER (?population > 250000)
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
104,Who is the daughter of Robert Kennedy married to?,"```sparql
SELECT ?spouse
WHERE {
  ?daughter foaf:parent <http://dbpedia.org/resource/Robert_F._Kennedy> .
  ?daughter dbpedia-owl:spouse ?spouse .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
10,How many students does the Free University of Amsterdam have?,"```sparql
SELECT ?numberOfStudents
WHERE {
  <http://dbpedia.org/resource/Free_University_of_Amsterdam> <http://dbpedia.org/property/numberOfStudents> ?numberOfStudents
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
1,What is the revenue of IBM?,"```
SELECT ?revenue
WHERE {
  <http://dbpedia.org/resource/IBM> <http://dbpedia.org/property/revenue> ?revenue
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
178,How many James Bond movies do exist?,"```sparql
SELECT (COUNT(?film) as ?count)
WHERE {
  ?film rdf:type dbo:Film ;
        dct:subject dbc:James_Bond_films .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
129,Who does the voice of Bart Simpson?,"```sparql
SELECT ?actor
WHERE {
  ?actor dbo:voice ?character .
  FILTER (?character = dbr:Bart_Simpson)
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
183,Who was Tom Hanks married to?,"```sparql
SELECT ?spouse
WHERE {
  dbpedia:Tom_Hanks dbpedia-owl:spouse ?spouse .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
181,Through which countries does the Yenisei river flow?,"```sparql
SELECT DISTINCT ?country
WHERE {
  <http://dbpedia.org/resource/Yenisei_River> dbpedia-owl:country ?country .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
7,Give me all cars that are produced in Germany.,"```sparql
SELECT ?car
WHERE {
  ?car a dbo:Automobile ;
       dbo:manufacturer/dbo:country dbr:Germany .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
135,When did Michael Jackson die?,"SELECT ?dateOfDeath
WHERE {
  dbpedia:Michael_Jackson dbo:dateOfDeath ?dateOfDeath
}","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
50,What is the highest volcano in Africa?,"```sparql
SELECT ?volcano ?height
WHERE {
  ?volcano rdf:type dbo:Volcano ;
           dbo:country dbr:Africa ;
           dbo:elevation ?height .
}
ORDER BY DESC(?height)
LIMIT 1
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
39,Which poet wrote the most books?,"```sparql
SELECT ?poet (COUNT(?book) AS ?numBooks)
WHERE {
  ?poet a dbpedia-owl:Writer ;
        dbpedia-owl:notableWork ?book .
}
GROUP BY ?poet
ORDER BY DESC(?numBooks)
LIMIT 1
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
83,Give me all gangsters from the prohibition era.,"```sparql
SELECT DISTINCT ?gangster
WHERE {
  ?gangster a dbpedia-owl:Person ;
           dbpedia-owl:occupation dbpedia:Gangster ;
           dbpedia-owl:birthDate ?birthDate .
  FILTER (?birthDate >= ""1920-01-01""^^xsd:date && ?birthDate <= ""1933-12-05""^^xsd:date)
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
71,Give me all spacecrafts that flew to Mars.,"```sparql
SELECT DISTINCT ?spacecraft
WHERE {
  ?spacecraft dbo:destination <http://dbpedia.org/resource/Mars> .
  ?spacecraft rdf:type dbo:Spacecraft .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
213,Show me all Czech movies.,"```sparql
SELECT ?movie
WHERE {
  ?movie rdf:type dbo:Film ;
         dct:subject dbc:Czech_films .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
209,Give me all taikonauts.,"```sparql
SELECT ?taikonaut
WHERE {
  ?taikonaut a <http://dbpedia.org/ontology/Taikonaut> .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
105,Which countries have more than ten volcanoes?,"```sparql
SELECT ?country (COUNT(?volcano) AS ?num_volcanoes)
WHERE {
  ?volcano rdf:type dbo:Volcano ;
           dbo:country ?country .
}
GROUP BY ?country
HAVING (COUNT(?volcano) > 10)
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
52,Give me all movies with Tom Cruise.,"```sparql
SELECT DISTINCT ?movie
WHERE {
  ?movie a dbo:Film ;
         dbo:starring dbr:Tom_Cruise .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
102,When did Dracula's creator die?,"```sparql
SELECT ?deathDate
WHERE {
  <http://dbpedia.org/resource/Bram_Stoker> dbo:deathDate ?deathDate
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
21,Who created English Wikipedia?,"```sparql
SELECT ?creator
WHERE {
  dbr:English_Wikipedia dct:creator ?creator .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
34,Give me all female German chancellors.,"```sparql
SELECT ?chancellor
WHERE {
  ?chancellor a dbpedia-owl:Chancellor ;
              dbpedia-owl:birthPlace ?birthPlace ;
              dbpedia-owl:gender dbpedia:Female ;
              dbpedia-owl:nationality dbpedia:Germany .
  FILTER regex(str(?birthPlace), ""Germany"", ""i"")
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
145,Who owns Aldi?,"```sparql
SELECT ?owner
WHERE {
  dbr:Aldi dbo:owner ?owner .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
154,Which books were written by Danielle Steel?,"```sparql
SELECT ?book
WHERE {
  ?author foaf:name ""Danielle Steel""@en .
  ?book dbo:author ?author .
  ?book a dbo:Book .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
198,Who was influenced by Socrates?,"```sparql
SELECT DISTINCT ?influencedBy
WHERE {
  ?socrates dbo:influenced ?influencedBy .
  FILTER (?influencedBy != dbo:Socrates)
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
162,How deep is Lake Chiemsee?,"```sparql
SELECT ?depth
WHERE {
  dbpedia:Lake_Chiemsee dbpedia-owl:maximumDepth ?depth
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
212,Which companies work in the aerospace industry as well as in medicine?,"```sparql
SELECT DISTINCT ?company
WHERE {
  ?company dct:subject dbc:Aerospace_companies ;
           dct:subject dbc:Medical_technology_companies .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
96,Which professional surfers were born on the Philippines?,"```sparql
SELECT DISTINCT ?surfer
WHERE {
  ?surfer a dbo:Surfer ;
         dbo:birthPlace dbr:Philippines .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
40,Who were the parents of Queen Victoria?,"```sparql
SELECT ?parent
WHERE {
  dbr:Queen_Victoria dbo:parent ?parent .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
79,Are there any castles in the United States?,"```sparql
SELECT DISTINCT ?castle
WHERE {
  ?castle rdf:type dbo:Castle ;
          dbo:country dbr:United_States .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
141,Which languages are spoken in Estonia?,"```sparql
SELECT DISTINCT ?language
WHERE {
  <http://dbpedia.org/resource/Estonia> dbpedia-owl:language ?language .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
80,Give me a list of all critically endangered birds.,"```sparql
SELECT ?bird ?name
WHERE {
  ?bird rdf:type dbo:Bird ;
        dbo:conservationStatus dbr:Critically_Endangered ;
        rdfs:label ?name .
  FILTER (lang(?name) = 'en')
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
159,Which countries are connected by the Rhine?,"```sparql
SELECT DISTINCT ?country
WHERE {
  ?river a dbo:River ;
         rdfs:label ""Rhine""@en ;
         dbo:country ?country .
  ?country a dbo:Country .
  FILTER(langMatches(lang(?country), ""en""))
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
107,Who was the father of Queen Elizabeth II?,"```sparql
SELECT ?father
WHERE {
  dbpedia:Elizabeth_II dbpedia-owl:parent ?father .
  ?father a dbpedia-owl:Person .
  FILTER regex(str(?father), ""Prince Philip"")
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
163,Give me all chemical elements.,"```sparql
SELECT ?element ?elementLabel
WHERE {
  ?element rdf:type dbo:ChemicalElement .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
211,Give me all American presidents of the last 20 years.,"```sparql
SELECT DISTINCT ?president ?start_date
WHERE {
  ?president a dbpedia-owl:President ;
             dbpprop:nationality dbpedia:United_States ;
             dbpprop:termStart ?start_date .
  FILTER (?start_date > ""2001-01-01""^^xsd:date)
}
ORDER BY DESC(?start_date)
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
51,When is the movie Worst Case Scenario going to be in cinemas in the Netherlands?,"SELECT ?releaseDate
WHERE {
  ?movie dbo:releaseDate ?releaseDate .
  ?movie foaf:name ""Worst Case Scenario""@en .
  ?movie dbo:country dbr:Netherlands .
}","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
144,Whom did Lance Bass marry?,"```sparql
SELECT ?spouse
WHERE {
  dbpedia:Lance_Bass dbpedia-owl:spouse ?spouse .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
167,Which subsidiary of TUI Travel serves both Glasgow and Dublin?,"```sparql
SELECT ?subsidairy
WHERE {
  ?subsidairy dbo:parentCompany dbr:TUI_Travel .
  ?subsidairy dbo:city dbr:Glasgow .
  ?subsidairy dbo:city dbr:Dublin .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
131,What languages are spoken in Pakistan?,"```sparql
SELECT DISTINCT ?language
WHERE {
  <http://dbpedia.org/resource/Pakistan> dbpedia-owl:language ?language .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
120,Who is the daughter of Bill Clinton married to?,"```sparql
SELECT ?spouse
WHERE {
  dbpedia:Chelsea_Clinton dbpedia-owl:spouse ?spouse .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
164,Who was on the Apollo 11 mission?,"```sparql
SELECT ?astronaut
WHERE {
  dbr:Apollo_11 dbo:astronaut ?astronaut .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
88,What is the wavelength of Indigo?,"```sparql
SELECT ?wavelength
WHERE {
  dbpedia:Indigo dbo:wavelength ?wavelength
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
151,Give me all B-sides of the Ramones.,"```sparql
SELECT ?bSide
WHERE {
  ?album dbo:artist dbr:Ramones ;
         dbo:type dbr:B-side ;
         dbo:recordedAt ?bSide .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
63,Who was called Scarface?,"```sparql
SELECT ?person
WHERE {
  ?person foaf:nick ""Scarface""@en .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
27,Which rivers flow into the North Sea?,"```sparql
SELECT DISTINCT ?river
WHERE {
  ?river dct:subject dbc:Rivers_that_flow_into_the_North_Sea .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
156,Where is Fort Knox located?,"```
SELECT ?location
WHERE {
  dbr:Fort_Knox dbo:location ?location .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
207,Which daughters of British earls died at the same place they were born at?,"```sparql
SELECT ?daughter ?birthPlace
WHERE {
  ?daughter a dbpedia-owl:Noble;
            dbpedia-owl:parent ?parent;
            dbpedia-owl:birthPlace ?birthPlace;
            dbpedia-owl:deathPlace ?deathPlace.
  ?parent a dbpedia-owl:Earl.
  FILTER (?birthPlace = ?deathPlace)
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
24,How many emperors did China have?,"```sparql
SELECT (COUNT(?emperor) AS ?count)
WHERE {
  ?emperor a dbo:Emperor ;
           dbo:reignStart ?start ;
           dbo:reignEnd ?end .
  FILTER (?start < ""1912-01-01""^^xsd:date && ?end > ""221 BC-01-01""^^xsd:date)
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
133,What are the names of the Teenage Mutant Ninja Turtles?,"```sparql
SELECT ?name
WHERE {
  ?turtle rdf:type dbo:FictionalCharacter ;
          rdfs:label ?name .
  FILTER regex(?name, ""Teenage Mutant Ninja Turtle"", ""i"")
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
103,Where does Piccadilly start?,"```sparql
SELECT ?startPoint
WHERE {
  dbr:Piccadilly_Line dbo:routeStart ?startPoint .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
165,What is the name of the university where Obama's wife studied?,"```sparql
SELECT ?universityName
WHERE {
  ?person dbpedia-owl:spouse dbr:Michelle_Obama ;
          dbpedia-owl:almaMater ?university .
  ?university foaf:name ?universityName .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
108,When did Paraguay proclaim its independence?,"```sparql
SELECT ?date
WHERE {
  dbr:Paraguay dbo:proclaimationDate ?date
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
15,How short is the shortest active NBA player?,"```sparql
SELECT DISTINCT ?height
WHERE {
  ?player a dbo:BasketballPlayer ;
          dbo:height ?height ;
          dbo:activeYearsStart ?startYear ;
          dbo:activeYearsEnd ?endYear .
  FILTER (?startYear <= 2016 && ?endYear >= 2016)
}
ORDER BY ASC(?height)
LIMIT 1
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
45,Where did Abraham Lincoln die?,"```sparql
SELECT ?placeOfDeath
WHERE {
  dbpedia:Abraham_Lincoln dbo:deathPlace ?placeOfDeath .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
82,When was Jack Wolfskin founded?,"```sparql
SELECT ?foundingDate
WHERE {
  dbr:Jack_Wolfskin dbo:foundingDate ?foundingDate
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
9,In which city is the headquarter of Air China?,"```sparql
SELECT ?city
WHERE {
  <http://dbpedia.org/resource/Air_China> <http://dbpedia.org/ontology/headquarter> ?hq .
  ?hq <http://dbpedia.org/ontology/locationCity> ?city .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
201,What is the founding year of the brewery that produces Pilsner Urquell?,"```sparql
SELECT ?foundingYear
WHERE {
  ?brewery dbo:product dbr:Pilsner_Urquell ;
          dbo:foundingYear ?foundingYear .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
171,When did the Boston Tea Party take place?,"```sparql
SELECT ?date
WHERE {
  dbr:Boston_Tea_Party dbo:date ?date
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
182,Which animals are critically endangered?,"```sparql
SELECT DISTINCT ?animal
WHERE {
  ?animal rdf:type dbo:Animal ;
          dbo:conservationStatus dbr:Critically_Endangered .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
13,Which politicians were married to a German?,"```sparql
SELECT DISTINCT ?politician ?name
WHERE {
  ?politician a dbo:Politician ;
              foaf:name ?name ;
              dbo:spouse ?spouse .
  ?spouse dbo:birthPlace ?birthPlace .
  ?birthPlace dbo:country dbr:Germany .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
114,How big is the earth's diameter?,"```sparql
SELECT ?diameter
WHERE {
  <http://dbpedia.org/resource/Earth> <http://dbpedia.org/ontology/diameter> ?diameter
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
92,Is the wife of President Obama called Michelle?,"```sparql
SELECT ?wifeName
WHERE {
  dbpedia:Barack_Obama dbpedia-owl:spouse ?wife .
  ?wife foaf:name ?wifeName .
  FILTER (?wifeName = ""Michelle Obama"")
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
194,Which U.S. state has the abbreviation MN?,"```sparql
SELECT ?stateName
WHERE {
  ?state dbpedia-owl:abbreviation ""MN"" .
  ?state rdfs:label ?stateName .
  FILTER (lang(?stateName) = 'en' && ?state a dbpedia-owl:State)
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
175,When did Muhammad die?,"```sparql
SELECT ?deathDate
WHERE {
  <http://dbpedia.org/resource/Muhammad> <http://dbpedia.org/ontology/deathDate> ?deathDate
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
26,What is the atmosphere of the Moon composed of?,"```
SELECT ?atmosphere
WHERE {
  dbr:Moon dbo:atmosphere ?atmosphere .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
60,Who is the governor of Texas?,"```sparql
SELECT ?governor
WHERE {
  <http://dbpedia.org/resource/Texas> <http://dbpedia.org/ontology/governor> ?governor .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
110,Which movies did Kurosawa direct?,"```sparql
SELECT DISTINCT ?movie
WHERE {
  ?movie dbo:director dbr:Akira_Kurosawa .
  ?movie rdf:type dbo:Film .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
206,What was the name of the famous battle in 1836 in San Antonio?,"```
SELECT ?battleName
WHERE {
  ?battle dbpedia-owl:date ""1836"" .
  ?battle dbpedia-owl:place <http://dbpedia.org/resource/San_Antonio> .
  ?battle rdfs:label ?battleName .
  FILTER(langMatches(lang(?battleName), ""en""))
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
97,Give me the official websites of actors of the television show Charmed.,"```sparql
SELECT DISTINCT ?actor ?website
WHERE {
  ?actor dbo:starring dbr:Charmed .
  ?actor foaf:isPrimaryTopicOf ?website .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
20,How many calories does a baguette have?,"```sparql
SELECT ?calories
WHERE {
  <http://dbpedia.org/resource/Baguette> dbpedia-owl:calories ?calories
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
169,Give me all libraries established before 1400.,"```sparql
SELECT ?library ?name ?established
WHERE {
  ?library a dbo:Library ;
           foaf:name ?name ;
           dbo:established ?established .
  FILTER(YEAR(?established) < 1400)
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
38,Give me all Frisian islands that belong to the Netherlands.,"```sparql
SELECT ?island
WHERE {
  ?island rdf:type dbo:Island ;
          dbo:country dbr:Netherlands ;
          dbo:locatedInArea dbr:Frisian_Islands .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
192,Which museum exhibits The Scream by Munch?,"```sparql
SELECT DISTINCT ?museum
WHERE {
  ?painting dbo:author dbr:Edvard_Munch ;
           rdfs:label ""The Scream""@en .
  ?museum dbo:collection ?painting ;
          rdf:type dbo:Museum .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
78,When was the De Beers company founded?,"```sparql
SELECT ?date
WHERE {
  dbr:De_Beers dbo:foundationDate ?date
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
19,Who became president after JFK died?,"SELECT ?successor
WHERE {
  dbr:John_F._Kennedy dbo:succeededBy ?successor .
}","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
190,Who are the parents of the wife of Juan Carlos I?,"```sparql
SELECT ?parents
WHERE {
  ?wife dbo:spouse dbr:Juan_Carlos_I_of_Spain .
  ?wife dbo:parent ?parents .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
174,Who is the novelist of the work a song of ice and fire?,"```sparql
SELECT ?novelist
WHERE {
  ?novel dbpedia-owl:author ?novelist .
  ?novel dbpedia-owl:work ""A Song of Ice and Fire"" .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
189,In which studio did the Beatles record their first album?,"```sparql
SELECT ?studio
WHERE {
  ?album dbo:artist dbr:The_Beatles ;
        dbo:recordLabel ?studio .
  FILTER regex(str(?album), ""Please Please Me"")
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
152,Which beer brewing companies are located in North-Rhine Westphalia?,"```sparql
SELECT DISTINCT ?company
WHERE {
  ?company a dbo:Company ;
          dbo:location dbr:North_Rhine-Westphalia ;
          dbo:industry dbr:Beer_brewing .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
94,When did princess Diana die?,"```sparql
SELECT ?dateOfDeath
WHERE {
  <http://dbpedia.org/resource/Diana,_Princess_of_Wales> <http://dbpedia.org/ontology/deathDate> ?dateOfDeath
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
8,Who founded Intel?,"```sparql
SELECT ?founder
WHERE {
  dbr:Intel dbo:founder ?founder .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
95,Who is the youngest player in the Premier League?,"```sparql
SELECT ?player ?name ?birthdate
WHERE {
  ?player a dbo:SoccerPlayer ;
          dbo:league dbo:Premier_League ;
          foaf:name ?name ;
          dbo:birthDate ?birthdate .
}
ORDER BY ?birthdate
LIMIT 1
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
119,Which instruments does Cat Stevens play?,"```sparql
SELECT DISTINCT ?instrument
WHERE {
  { 
    SELECT ?artist WHERE {
      ?artist foaf:name ""Cat Stevens""@en .
    }
  }
  ?artist dbo:instrument ?instrument .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
115,How many rivers and lakes are in South Carolina?,"```sparql
SELECT (COUNT(?river) AS ?numRivers) (COUNT(?lake) AS ?numLakes)
WHERE {
  ?river rdf:type dbo:River ;
         dbo:locatedIn dbr:South_Carolina .
  
  ?lake rdf:type dbo:Lake ;
        dbo:locatedIn dbr:South_Carolina .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
116,Who was called Rodzilla?,"```sparql
SELECT ?person
WHERE {
  ?person foaf:nick ""Rodzilla""@en .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
138,Give me the capitals of all countries in Africa.,"```sparql
SELECT ?country ?capital
WHERE {
  ?country a dbo:Country ;
           dct:subject dbc:Countries_in_Africa ;
           dbo:capital ?capital .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
177,Which bridges are of the same type as the Manhattan Bridge?,"```sparql
SELECT ?bridge ?type
WHERE {
  dbpedia:Manhattan_Bridge dbpedia-owl:bridgeType ?type .
  ?bridge dbpedia-owl:bridgeType ?type .
  FILTER (?bridge != dbpedia:Manhattan_Bridge)
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
101,How many companies were founded by the founder of Facebook?,"```sparql
SELECT (COUNT(?company) AS ?count)
WHERE {
  ?founder a dbo:Person ;
           foaf:name ""Mark Zuckerberg"" .
  ?company dbo:founder ?founder .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
14,Show me hiking trails in the Grand Canyon where there's no danger of flash floods.,"```sparql
SELECT DISTINCT ?trail
WHERE {
  ?trail a dbpedia-owl:HikingTrail ;
         dbpedia-owl:location <http://dbpedia.org/resource/Grand_Canyon> ;
         dbpedia-owl:safetyFeatures ?safety .
  FILTER NOT EXISTS { ?safety dbpedia-owl:flashFloods ""true"" }
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
87,Which book has the most pages?,"```sparql
SELECT ?book ?pages
WHERE {
  ?book rdf:type dbo:Book .
  ?book dbo:numberOfPages ?pages .
}
ORDER BY DESC(?pages)
LIMIT 1
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
148,What is the largest state in the United States?,"```sparql
SELECT ?state ?area
WHERE {
  ?state a dbpedia-owl:State ;
         dbpedia-owl:country dbpedia:United_States ;
         dbpedia-owl:areaTotal ?area .
}
ORDER BY DESC(?area)
LIMIT 1
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
43,Give me the websites of companies with more than 500000 employees.,"```sparql
SELECT DISTINCT ?company ?website
WHERE {
  ?company rdf:type dbo:Company ;
           dbo:numberOfEmployees ?employees ;
           foaf:homepage ?website .
  FILTER (?employees > 500000)
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
179,What were the names of the three ships by Columbus?,"```sparql
SELECT ?shipName
WHERE {
  ?columbus dbo:commander dbr:Christopher_Columbus ;
           dbo:ship ?ship .
  ?ship rdfs:label ?shipName .
  FILTER(langMatches(lang(?shipName), ""en""))
}
LIMIT 3
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
99,What is the time zone of Salt Lake City?,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?timezone
WHERE {
  dbr:Salt_Lake_City dbo:timeZone ?timezone .
}
```
This SPARQL query retrieves the time zone of Salt Lake City from DBpedia.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
98,Who killed Caesar?,"```sparql
SELECT ?assassin
WHERE {
  dbpedia:Julius_Caesar dbo:deathCause ?deathCause .
  ?deathCause rdfs:label ""Assassination"" .
  dbpedia:Julius_Caesar dbo:assassination ?assassin .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
86,What is the highest mountain in Germany?,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?mountain ?height
WHERE {
  ?mountain dbo:country <http://dbpedia.org/resource/Germany> ;
           dbo:elevation ?height .
}
ORDER BY DESC(?height)
LIMIT 1
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
84,Which American presidents were in office during the Vietnam War?,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?president
WHERE {
  ?president a dbo:President ;
             dbo:office dbr:Presidency_of_the_United_States ;
             dbo:termPeriod ?termPeriod .
  FILTER (?termPeriod >= ""1961-01-20""^^xsd:date && ?termPeriod <= ""1975-04-30""^^xsd:date)
}
```
This query retrieves the American presidents who were in office during the Vietnam War by selecting distinct presidents who held the office of the Presidency of the United States between January 20, 1961, and April 30, 1975.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
81,Butch Otter is the governor of which U.S. state?,"```sparql
SELECT ?stateLabel
WHERE {
  ?person foaf:name ""Butch Otter""@en .
  ?person dbo:position ?position .
  ?position dbo:incumbent ?state .
  ?state a dbo:State .
  ?state rdfs:label ?stateLabel .
  FILTER(LANG(?stateLabel) = 'en')
}
```
This query retrieves the U.S. state where Butch Otter is the governor.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
73,How many gold medals did Michael Phelps win at the 2008 Olympics?,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT (COUNT(?goldMedal) as ?totalGoldMedals)
WHERE {
  ?athlete dbo:goldMedal ?goldMedal .
  ?athlete dbo:olympics <http://dbpedia.org/resource/2008_Summer_Olympics> .
  ?athlete dbo:sport <http://dbpedia.org/resource/Swimming> .
  FILTER (?athlete = <http://dbpedia.org/resource/Michael_Phelps>)
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
66,Which artists were born on the same date as Rachel Stevens?,"```sparql
SELECT DISTINCT ?artist ?artistName
WHERE {
  {
    SELECT ?birthDate
    WHERE {
      ?artist dbpedia-owl:birthDate ?birthDate .
      ?artist foaf:name ""Rachel Stevens""@en .
    }
  }
  ?artist dbpedia-owl:birthDate ?birthDate .
  ?artist foaf:name ?artistName .
  FILTER (?artist != <http://dbpedia.org/resource/Rachel_Stevens>)
}
```
This query retrieves artists who were born on the same date as Rachel Stevens.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
64,What is the profession of Frank Herbert?,"```sparql
SELECT DISTINCT ?professionLabel
WHERE {
  ?person dbo:profession ?profession .
  ?person foaf:name ""Frank Herbert""@en .
  ?profession rdfs:label ?professionLabel .
  FILTER(LANG(?professionLabel) = 'en')
}
```
This SPARQL query retrieves the profession of Frank Herbert from DBpedia.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
6,Are Taiko some kind of Japanese musical instrument?,"Yes, Taiko is a type of Japanese drum that is played in traditional Japanese music and performances. It is a percussion instrument that comes in various sizes and is often played in ensembles called kumi-daiko.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
56,How many seats does the home stadium of FC Porto have?,"```sparql
SELECT ?seats
WHERE {
  dbpedia:FC_Porto dbpedia-owl:ground ?stadium .
  ?stadium dbpedia-owl:capacity ?seats .
}
```
This SPARQL query retrieves the number of seats in the home stadium of FC Porto by first finding the stadium associated with FC Porto and then retrieving the capacity of that stadium.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
49,Which frequent flyer program has the most airlines?,"```sparql
SELECT ?programLabel (COUNT(?airline) AS ?numAirlines)
WHERE {
  ?program a dbo:FrequentFlyerProgram ;
           rdfs:label ?programLabel ;
           dbo:airline ?airline .
}
GROUP BY ?programLabel
ORDER BY DESC(?numAirlines)
LIMIT 1
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
44,Which European countries have a constitutional monarchy?,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT DISTINCT ?countryLabel
WHERE {
  ?country a dbo:Country ;
           dbo:governmentType dbr:Constitutional_monarchy ;
           dbo:continent dbr:Europe .
  ?country rdfs:label ?countryLabel .
  FILTER(LANG(?countryLabel) = """" || LANGMATCHES(LANG(?countryLabel), ""en""))
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
42,Which countries have places with more than two caves?,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?country
WHERE {
  ?place dbo:location ?country .
  ?place dbo:type dbr:Cave .
  {
    SELECT ?country (COUNT(?place) AS ?numCaves)
    WHERE {
      ?place dbo:location ?country .
      ?place dbo:type dbr:Cave .
    }
    GROUP BY ?country
    HAVING (?numCaves > 2)
  }
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
4,"Which airports are located in California, USA?","```sparql
SELECT DISTINCT ?airport ?airportLabel
WHERE {
  ?airport a dbo:Airport ;
          dbo:location dbr:California ;
          dbo:location dbr:United_States .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
This SPARQL query retrieves the distinct airports located in California, USA from DBpedia.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
37,What are the nicknames of San Francisco?,"```sparql
SELECT ?nickname
WHERE {
  dbr:San_Francisco dbo:nickname ?nickname
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
32,What is Angela Merkelâ€™s birth name?,"```sparql
SELECT ?birthName
WHERE {
  dbpedia:Angela_Merkel dbpedia-owl:birthName ?birthName
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
31,Who is the mayor of Berlin?,"```sparql
SELECT ?mayor
WHERE {
  <http://dbpedia.org/resource/Berlin> <http://dbpedia.org/ontology/leaderName> ?mayor .
  FILTER (langMatches(lang(?mayor), ""en""))
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
29,Which countries in the European Union adopted the Euro?,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?country
WHERE {
  ?country a dbo:Country ;
           dbo:currency dbr:Euro ;
           dbo:location dbr:European_Union .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
23,Which software has been published by Mean Hamster Software?,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT ?software
WHERE {
  ?company foaf:name ""Mean Hamster Software""@en .
  ?software dbo:developer ?company .
}
```
This SPARQL query retrieves the software published by Mean Hamster Software by searching for the company with the name ""Mean Hamster Software"" and then finding the software developed by that company.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
68,Which country was Bill Gates born in?,"```sparql
SELECT ?countryOfBirth
WHERE {
  dbpedia:Bill_Gates dbpedia-owl:birthPlace ?birthPlace .
  ?birthPlace dbpedia-owl:country ?countryOfBirth .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
22,How many grand-children did Jacques Cousteau have?,"```sparql
SELECT (COUNT(?grandchild) AS ?numGrandchildren)
WHERE {
  ?person dbo:child ?child .
  ?child dbo:child ?grandchild .
  FILTER(?person = dbr:Jacques_Cousteau)
}
```
This query counts the number of grandchildren that Jacques Cousteau had by finding the children of Jacques Cousteau and then finding their children.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
214,Give me all professional skateboarders from Sweden.,"```sparql
SELECT DISTINCT ?skateboarder
WHERE {
  ?skateboarder rdf:type dbo:Skateboarder ;
                dbo:birthPlace dbr:Sweden .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
210,Which monarchs of the United Kingdom were married to a German?,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?monarch ?spouse
WHERE {
  ?monarch a dbo:Monarch ;
           dbo:spouse ?spouse .
  ?spouse dbo:birthPlace ?birthPlace .
  FILTER regex(str(?birthPlace), ""Germany"", ""i"")
  FILTER regex(str(?monarch), ""Monarch_of_the_United_Kingdom"", ""i"")
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
199,Give me all Argentine films.,"```sparql
SELECT DISTINCT ?film
WHERE {
  ?film rdf:type dbo:Film ;
        dct:subject dbc:Argentine_films .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
203,How did Michael Jackson die?,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?causeOfDeath
WHERE {
  dbo:Michael_Jackson dbo:causeOfDeath ?causeOfDeath .
}
```
This SPARQL query retrieves the cause of death of Michael Jackson from DBpedia.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
197,Which U.S. state has been admitted latest?,"```sparql
SELECT ?stateLabel ?date
WHERE {
  ?state a dbo:State ;
         dbo:admittanceDate ?date .
  ?date rdf:type xsd:date .
  FILTER NOT EXISTS { ?state dbo:abolished ?abolishedDate }
}
ORDER BY DESC(?date)
LIMIT 1
```
This query retrieves the U.S. state that has been admitted most recently by sorting the states based on their admittance date in descending order and selecting the top result.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
196,Which classes does the Millepede belong to?,"```sparql
SELECT DISTINCT ?class
WHERE {
  ?millepede rdf:type ?class .
  FILTER regex(str(?class), ""Millepede"", ""i"")
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
188,Give me the homepage of Forbes.,"```sparql
SELECT ?homepage
WHERE {
  <http://dbpedia.org/resource/Forbes> foaf:homepage ?homepage
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
187,Who is the husband of Amanda Palmer?,"```sparql
SELECT ?husband
WHERE {
  dbpedia:Amanda_Palmer dbpedia-owl:spouse ?husband .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
176,Who painted The Storm on the Sea of Galilee?,"```sparql
SELECT ?painter
WHERE {
  ?painting dbo:author dbr:The_Storm_on_the_Sea_of_Galilee.
}
```
This query retrieves the painter of the painting ""The Storm on the Sea of Galilee"" from DBpedia.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
62,What is the highest place of Karakoram?,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?highestPlace
WHERE {
  ?karakoram dbo:locatedInArea <http://dbpedia.org/resource/Karakoram> ;
             dbo:highestPlace ?highestPlace .
}
```
This SPARQL query retrieves the highest place of the Karakoram mountain range from DBpedia.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
173,When did Finland join the EU?,"```sparql
SELECT ?date
WHERE {
  dbr:Finland dbo:accessionDate ?date.
}
```
This SPARQL query retrieves the accession date of Finland to the EU from DBpedia.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
168,Which actors play in Big Bang Theory?,"```sparql
SELECT DISTINCT ?actorName
WHERE {
  ?tvShow dbo:starring ?actor.
  ?actor foaf:name ?actorName.
  FILTER regex(?tvShow, ""Big_Bang_Theory"", ""i"")
}
```
This SPARQL query retrieves the names of actors who star in the TV show ""Big Bang Theory"" from DBpedia.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
166,Which computer scientist won an oscar?,"```sparql
SELECT DISTINCT ?scientist
WHERE {
  ?scientist a dbo:Person ;
            dbo:award dbr:Academy_Award ;
            dbo:field dbr:Computer_science .
}
```
This query retrieves the computer scientist who has won an Academy Award.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
160,Who wrote Harry Potter?,"```sparql
SELECT DISTINCT ?author
WHERE {
  ?book dbo:author ?author ;
       rdfs:label ""Harry Potter""@en .
  FILTER regex(str(?author), ""Rowling"", ""i"")
}
```
This query retrieves the author of the book ""Harry Potter"" from DBpedia, specifically looking for authors with the name containing ""Rowling"".","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
158,Give me all writers that won the Nobel Prize in literature.,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?writer
WHERE {
  ?writer a dbo:Writer ;
          dbo:award dbr:Nobel_Prize_in_Literature .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
157,Give me English actors starring in Lovesick.,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?actor
WHERE {
  ?film dbo:starring ?actor ;
        dbp:name ""Lovesick""@en ;
        dbo:language ?language .
  FILTER (?language = ""English"")
  FILTER regex(str(?actor), ""actor"", ""i"")
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
155,What is the nick name of Baghdad?,"```sparql
SELECT ?nickname
WHERE {
  dbpedia:Baghdad dbpedia-owl:nickname ?nickname
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
150,In which city was the president of Montenegro born?,"```sparql
SELECT ?cityOfBirth
WHERE {
  <http://dbpedia.org/resource/President_of_Montenegro> dbpedia-owl:birthPlace ?city.
  ?city dbpedia-owl:country <http://dbpedia.org/resource/Montenegro>;
        dbpedia-owl:city ?cityOfBirth.
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
149,Which U.S. state has the highest population density?,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?state ?populationDensity
WHERE {
  ?state a dbo:State ;
         dbp:populationDensity ?populationDensity .
} 
ORDER BY DESC(?populationDensity)
LIMIT 1
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
25,What is the longest river in China?,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?river ?length
WHERE {
  ?river a dbo:River ;
         dbo:country <http://dbpedia.org/resource/China> ;
         dbo:length ?length .
}
ORDER BY DESC(?length)
LIMIT 1
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
143,What is the area code of Berlin?,"```sparql
SELECT ?areaCode
WHERE {
  dbpedia:Berlin dbpedia-owl:areaCode ?areaCode
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
140,How many scientists graduated from an Ivy League university?,"```sparql
SELECT (COUNT(DISTINCT ?scientist) AS ?countScientists)
WHERE {
  ?scientist a dbo:Person ;
            dbo:almaMater ?university .
  ?university dbo:universityType dbr:Ivy_League .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
139,Which professional surfers were born in Australia?,"```sparql
SELECT DISTINCT ?surferName
WHERE {
  ?surfer a dbo:Surfer ;
          dbo:birthPlace/dbo:country dbr:Australia ;
          foaf:name ?surferName .
}
```
","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
137,Give me all Dutch parties.,"```sparql
SELECT DISTINCT ?partyLabel
WHERE {
  ?party a dbo:PoliticalParty ;
         dct:subject dbc:Political_parties_in_the_Netherlands .
  ?party rdfs:label ?partyLabel .
  FILTER (lang(?partyLabel) = 'en')
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
136,How many moons does Mars have?,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?moons
WHERE {
  dbo:Mars dbo:numberOfMoons ?moons
}
```
This SPARQL query retrieves the number of moons that Mars has from DBpedia.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
134,What is Batman's real name?,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?realName
WHERE {
  dbo:Batman dbo:realName ?realName
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
132,What is Elon Musk famous for?,"```sparql
SELECT ?abstract
WHERE {
  dbr:Elon_Musk dbo:abstract ?abstract .
  FILTER (langMatches(lang(?abstract), ""en""))
}
```

This query retrieves the abstract of Elon Musk from DBpedia, which provides a brief description of what he is famous for.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
128,Who is the author of WikiLeaks?,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?author
WHERE {
  ?wikiPage dbo:author ?author .
  FILTER regex(str(?wikiPage), ""WikiLeaks"", ""i"")
}
```
This query retrieves the author of the WikiLeaks page from DBpedia.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
126,Sean Parnell was the governor of which U.S. state?,"```sparql
SELECT ?stateLabel
WHERE {
  ?person foaf:name ""Sean Parnell""@en .
  ?person dbp:office ?office .
  ?office dbp:state ?state .
  ?state rdfs:label ?stateLabel .
  FILTER(LANG(?stateLabel) = 'en')
}
```
This query retrieves the U.S. state where Sean Parnell served as governor.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
125,How many years was the Ford Model T manufactured?,"```sparql
SELECT ?years
WHERE {
  dbpedia:Ford_Model_T dbpedia-owl:productionStart ?start .
  dbpedia:Ford_Model_T dbpedia-owl:productionEnd ?end .
  BIND(year(xsd:dateTime(?end)) - year(xsd:dateTime(?start)) AS ?years)
}
```
This query retrieves the number of years the Ford Model T was manufactured by calculating the difference between the production start and end dates.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
124,When was Carlo Giuliani shot?,"```sparql
SELECT ?date
WHERE {
  ?event dbpedia-owl:location dbr:Genoa_G8_summit_2001 ;
         dbpedia-owl:date ?date .
  FILTER regex(str(?event), ""Carlo_Giuliani"")
}
```
This query retrieves the date when Carlo Giuliani was shot during the Genoa G8 summit in 2001.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
123,Give me all animals that are extinct.,"```sparql
SELECT DISTINCT ?animal
WHERE {
  ?animal rdf:type dbo:Animal ;
          dbo:extinct true .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
122,Who was the wife of President Lincoln?,"```sparql
SELECT ?wife
WHERE {
  ?president a dbpedia-owl:President ;
             foaf:name ""Abraham Lincoln""@en ;
             dbpprop:spouse ?wife .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
111,How many awards has Bertrand Russell?,"```sparql
SELECT (COUNT(?award) AS ?numAwards)
WHERE {
  ?person dbo:wikiPageID dbr:Bertrand_Russell ;
         dbo:award ?award .
}
```
This query counts the number of awards received by Bertrand Russell.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
117,Is Pamela Anderson a vegan?,"```sparql
SELECT ?person ?personLabel ?dietLabel
WHERE {
  ?person rdf:type dbo:Person ;
          rdfs:label ""Pamela Anderson""@en ;
          dbo:diet ?diet .
  ?diet rdfs:label ?dietLabel .
  FILTER (?diet = dbr:Veganism)
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""en"". }
}
```
This query checks if Pamela Anderson is a vegan by looking for her in DBpedia and retrieving her dietary information.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
59,Which space probes were sent into orbit around the sun?,"```sparql
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT DISTINCT ?probe
WHERE {
  ?probe dct:subject dbc:Space_probes_sent_to_the_Sun .
}
```
This SPARQL query retrieves the space probes that were sent into orbit around the sun from DBpedia.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
113,Which German cities have more than 250000 inhabitants?,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?cityName
WHERE {
  ?city rdf:type dbo:City ;
        dbo:country <http://dbpedia.org/resource/Germany> ;
        dbo:populationTotal ?population .
  FILTER (?population > 250000)
  ?city rdfs:label ?cityName .
  FILTER (lang(?cityName) = 'en')
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
104,Who is the daughter of Robert Kennedy married to?,"```sparql
PREFIX dbpedia: <http://dbpedia.org/resource/>
PREFIX dbpedia2: <http://dbpedia.org/property/>

SELECT ?spouse
WHERE {
  dbpedia:Kathleen_Kennedy_Townsend dbpedia2:spouse ?spouse .
}
```

This SPARQL query retrieves the spouse of Kathleen Kennedy Townsend, who is the daughter of Robert Kennedy.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
10,How many students does the Free University of Amsterdam have?,"```sparql
SELECT ?numberOfStudents
WHERE {
  dbpedia:Vrije_Universiteit_Amsterdam dbo:numberOfStudents ?numberOfStudents
}
```
This query retrieves the number of students at the Free University of Amsterdam from DBpedia.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
1,What is the revenue of IBM?,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?revenue
WHERE {
  dbr:IBM dbo:revenue ?revenue .
}
```
This query retrieves the revenue of IBM from DBpedia.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
178,How many James Bond movies do exist?,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT (COUNT(?film) as ?count)
WHERE {
  ?film rdf:type dbo:Film ;
        dbo:starring dbr:James_Bond .
}
```
This SPARQL query retrieves the count of films that star the character James Bond.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
129,Who does the voice of Bart Simpson?,"```sparql
SELECT ?actorName
WHERE {
  ?actor dbp:character ?character ;
         rdfs:label ?actorName .
  FILTER(CONTAINS(LCASE(?character), ""bart simpson""))
  FILTER(LANG(?actorName) = ""en"")
}
```
This query retrieves the name of the actor who does the voice of Bart Simpson by searching for a DBpedia resource that contains the character ""Bart Simpson"" and retrieves the label of the corresponding actor.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
183,Who was Tom Hanks married to?,"```sparql
SELECT ?spouse
WHERE {
  dbpedia:Tom_Hanks dbpedia-owl:spouse ?spouse .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
181,Through which countries does the Yenisei river flow?,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?country
WHERE {
  dbr:Yenisei dbo:mouthThrough ?country .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
7,Give me all cars that are produced in Germany.,"```sparql
SELECT DISTINCT ?car
WHERE {
  ?car dbo:manufacturer ?manufacturer .
  ?manufacturer dbo:country dbr:Germany .
  ?car a dbo:Automobile .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
135,When did Michael Jackson die?,"```sparql
SELECT ?dateOfDeath
WHERE {
  dbpedia:Michael_Jackson dbo:dateOfDeath ?dateOfDeath
}
```
This SPARQL query retrieves the date of death of Michael Jackson from DBpedia.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
50,What is the highest volcano in Africa?,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?volcano ?height
WHERE {
  ?volcano a dbo:Volcano ;
           dbo:locatedInArea <http://dbpedia.org/resource/Africa> ;
           dbo:elevation ?height .
}
ORDER BY DESC(?height)
LIMIT 1
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
39,Which poet wrote the most books?,"```sparql
SELECT ?poet (COUNT(?book) AS ?numBooks)
WHERE {
  ?poet a dbpedia-owl:Person ;
        dbpedia-owl:notableWork ?book .
}
GROUP BY ?poet
ORDER BY DESC(?numBooks)
LIMIT 1
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
83,Give me all gangsters from the prohibition era.,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?gangster
WHERE {
  ?gangster a dbo:Gangster ;
           dbo:activeYearsStartYear ?startYear ;
           dbo:activeYearsEndYear ?endYear .
  FILTER (?startYear >= 1920 && ?endYear <= 1933)
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
71,Give me all spacecrafts that flew to Mars.,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT DISTINCT ?spacecraft
WHERE {
  ?spacecraft dbo:destination <http://dbpedia.org/resource/Mars> .
  ?spacecraft a dbo:Spacecraft .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
213,Show me all Czech movies.,"```sparql
SELECT DISTINCT ?movie ?movieLabel
WHERE {
  ?movie rdf:type dbo:Film ;
         dct:subject dbc:Czech_films .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
209,Give me all taikonauts.,"```sparql
SELECT ?taikonaut ?name
WHERE {
  ?taikonaut a dbpedia-owl:Astronaut ;
              dbpedia-owl:nationality dbpedia:China ;
              foaf:name ?name .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
105,Which countries have more than ten volcanoes?,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?country (COUNT(?volcano) AS ?numVolcanoes)
WHERE {
  ?volcano a dbo:Volcano ;
           dbo:country ?country .
  
  ?country a dbo:Country .
}
GROUP BY ?country
HAVING (COUNT(?volcano) > 10)
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
52,Give me all movies with Tom Cruise.,"```sparql
SELECT DISTINCT ?movie
WHERE {
  ?movie dbo:starring dbr:Tom_Cruise .
  ?movie rdf:type dbo:Film .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
102,When did Dracula's creator die?,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?deathDate
WHERE {
  ?creator dbo:notableWork dbr:Dracula ;
          dbo:deathDate ?deathDate .
}
```
This SPARQL query retrieves the death date of the creator of Dracula.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
21,Who created English Wikipedia?,"```sparql
SELECT DISTINCT ?creator
WHERE {
  dbr:English_Wikipedia dct:creator ?creator .
}
```
This query retrieves the creator of the English Wikipedia.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
34,Give me all female German chancellors.,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?chancellor
WHERE {
  ?chancellor a dbo:Chancellor ;
              dbo:birthPlace/dbo:country dbr:Germany ;
              dbo:gender ""female"" .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
145,Who owns Aldi?,"```sparql
SELECT ?owner
WHERE {
  dbr:Aldi dbo:owner ?owner .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
154,Which books were written by Danielle Steel?,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT ?book
WHERE {
  ?author foaf:name ""Danielle Steel""@en .
  ?book dbo:author ?author .
  ?book a dbo:Book .
}
```
This SPARQL query retrieves the books written by Danielle Steel by searching for the author with the name ""Danielle Steel"" and then selecting the books authored by her.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
198,Who was influenced by Socrates?,"```sparql
SELECT DISTINCT ?influencedBy
WHERE {
  ?socrates dbo:influencedBy ?influencedBy .
  FILTER (?influencedBy != dbr:Socrates)
}
```
This query retrieves individuals who were influenced by Socrates by looking at the ""influencedBy"" property in DBpedia.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
162,How deep is Lake Chiemsee?,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?depth
WHERE {
  dbr:Lake_Chiemsee dbo:maxDepth ?depth
}
```
This SPARQL query retrieves the maximum depth of Lake Chiemsee from DBpedia.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
212,Which companies work in the aerospace industry as well as in medicine?,"```sparql
SELECT DISTINCT ?company
WHERE {
  ?company dct:subject dbc:Aerospace_companies ;
           dct:subject dbc:Medical_technology_companies .
}
```
This query retrieves companies that are categorized under both ""Aerospace companies"" and ""Medical technology companies"" on DBpedia.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
96,Which professional surfers were born on the Philippines?,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?surfer
WHERE {
  ?surfer a dbo:Surfer ;
         dbo:birthPlace dbr:Philippines .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
40,Who were the parents of Queen Victoria?,"```sparql
SELECT ?parent
WHERE {
  dbr:Queen_Victoria dbo:parent ?parent .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
79,Are there any castles in the United States?,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT DISTINCT ?castle
WHERE {
  ?castle a dbo:Castle ;
          dbo:country <http://dbpedia.org/resource/United_States> .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
141,Which languages are spoken in Estonia?,"```sparql
SELECT DISTINCT ?language
WHERE {
  <http://dbpedia.org/resource/Estonia> <http://dbpedia.org/ontology/language> ?language .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
80,Give me a list of all critically endangered birds.,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?bird ?name
WHERE {
  ?bird a dbo:Bird ;
        dbo:conservationStatus dbr:Critically_Endangered ;
        rdfs:label ?name .
  FILTER (lang(?name) = 'en')
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
159,Which countries are connected by the Rhine?,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT DISTINCT ?country
WHERE {
  ?river dbo:riverName ""Rhine""@en .
  ?river dbo:countries ?country .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
107,Who was the father of Queen Elizabeth II?,"```sparql
SELECT ?father
WHERE {
  dbpedia:Elizabeth_II dbpedia-owl:parent ?father .
  ?father a dbpedia-owl:Person .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
163,Give me all chemical elements.,"```sparql
SELECT DISTINCT ?element ?elementLabel
WHERE {
  ?element rdf:type dbo:ChemicalElement .
  ?element rdfs:label ?elementLabel .
  FILTER(LANG(?elementLabel) = 'en')
}
ORDER BY ?elementLabel
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
211,Give me all American presidents of the last 20 years.,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT ?president ?name
WHERE {
  ?president a dbo:President ;
             dbo:nationality <http://dbpedia.org/resource/United_States> ;
             dbo:birthDate ?birthDate ;
             foaf:name ?name .
  FILTER (?birthDate >= ""2001-01-01""^^xsd:date)
}
ORDER BY ?birthDate
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
51,When is the movie Worst Case Scenario going to be in cinemas in the Netherlands?,"The movie ""Worst Case Scenario"" does not have a specific release date mentioned in DBpedia. However, we can provide information about the movie itself. Would you like to know more details about the movie ""Worst Case Scenario""?","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
144,Whom did Lance Bass marry?,"```sparql
SELECT ?spouse
WHERE {
  dbpedia:Lance_Bass dbpedia-owl:spouse ?spouse .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
167,Which subsidiary of TUI Travel serves both Glasgow and Dublin?,"```
SELECT DISTINCT ?subsidary
WHERE {
  ?company dbo:subsidiary ?subsidary .
  ?subsidary dbo:city ?city1 .
  ?subsidary dbo:city ?city2 .
  FILTER (?city1 = dbr:Glasgow && ?city2 = dbr:Dublin)
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
131,What languages are spoken in Pakistan?,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT DISTINCT ?language
WHERE {
    <http://dbpedia.org/resource/Pakistan> dbo:officialLanguage ?language .
}
```
This SPARQL query retrieves the official languages spoken in Pakistan from DBpedia.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
120,Who is the daughter of Bill Clinton married to?,"```sparql
PREFIX dbpedia: <http://dbpedia.org/resource/>
PREFIX dbpedia2: <http://dbpedia.org/ontology/>

SELECT ?spouse
WHERE {
  dbpedia:Chelsea_Clinton dbpedia2:spouse ?spouse .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
164,Who was on the Apollo 11 mission?,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?astronaut
WHERE {
  dbo:Apollo_11 dbo:astronaut ?astronaut .
}
```
This query retrieves the astronauts who were part of the Apollo 11 mission.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
88,What is the wavelength of Indigo?,"```sparql
SELECT ?wavelength
WHERE {
  dbpedia:Indigo dbo:wavelength ?wavelength
}
```
This query retrieves the wavelength of the color Indigo from DBpedia.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
151,Give me all B-sides of the Ramones.,"```sparql
SELECT DISTINCT ?bSide
WHERE {
  ?album rdf:type dbo:Album ;
         dbp:artist dbr:The_Ramones ;
         dbp:bSide ?bSide .
}
```
This query retrieves all B-sides of albums by the Ramones.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
63,Who was called Scarface?,"```sparql
SELECT DISTINCT ?person
WHERE {
  ?person foaf:nick ""Scarface""@en .
}
```
This query retrieves the person who was called ""Scarface"" from DBpedia.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
27,Which rivers flow into the North Sea?,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?river
WHERE {
  ?river dbo:mouth dbr:North_Sea ;
         a dbo:River .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
156,Where is Fort Knox located?,"```sparql
SELECT ?location
WHERE {
  dbpedia:Fort_Knox dbo:location ?location .
}
```
This query retrieves the location of Fort Knox from DBpedia.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
207,Which daughters of British earls died at the same place they were born at?,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?daughter ?birthPlace
WHERE {
  ?daughter a dbo:Noble;
            dbo:parent ?parent;
            dbo:birthPlace ?birthPlace.
  ?parent a dbo:Earl;
          dbo:country <http://dbpedia.org/resource/United_Kingdom>;
          dbo:child ?daughter.
  FILTER (STR(?birthPlace) = STR(?parent))
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
24,How many emperors did China have?,"```sparql
SELECT (COUNT(?emperor) AS ?count)
WHERE {
  ?emperor a dbo:Emperor ;
           dbo:country dbr:China .
}
```
This query counts the number of emperors that China had in DBpedia.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
133,What are the names of the Teenage Mutant Ninja Turtles?,"```sparql
SELECT ?turtleName
WHERE {
  ?turtle dbo:series dbr:Teenage_Mutant_Ninja_Turtles .
  ?turtle dbo:name ?turtleName .
}
```
This SPARQL query retrieves the names of the Teenage Mutant Ninja Turtles characters from DBpedia.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
103,Where does Piccadilly start?,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?startPoint WHERE {
  ?piccadilly dbo:routeStart ?startPoint .
  FILTER regex(?startPoint, ""Piccadilly"", ""i"")
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
165,What is the name of the university where Obama's wife studied?,"```sparql
SELECT ?universityName
WHERE {
  ?person dbpedia-owl:spouse dbpedia:Michelle_Obama ;
          dbpedia-owl:almaMater ?university .
  ?university rdfs:label ?universityName .
  FILTER(langMatches(lang(?universityName), ""en""))
}
```
This SPARQL query retrieves the name of the university where Michelle Obama studied.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
108,When did Paraguay proclaim its independence?,"```sparql
SELECT ?date
WHERE {
  dbr:Paraguay dbo:proclaimationDate ?date.
}
```
This query retrieves the date when Paraguay proclaimed its independence from DBpedia.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
15,How short is the shortest active NBA player?,"```sparql
SELECT DISTINCT ?player ?height
WHERE {
  ?player a dbo:BasketballPlayer ;
          dbo:height ?height ;
          dbo:team ?team .
  ?team dbo:sport dbr:National_Basketball_Association .
}
ORDER BY ASC(?height)
LIMIT 1
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
45,Where did Abraham Lincoln die?,"```sparql
SELECT ?placeOfDeath WHERE {
  dbpedia:Abraham_Lincoln dbo:deathPlace ?placeOfDeath .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
82,When was Jack Wolfskin founded?,"```sparql
SELECT ?foundDate
WHERE {
  dbr:Jack_Wolfskin dbo:formationDate ?foundDate
}
```
This SPARQL query retrieves the formation date of Jack Wolfskin from DBpedia.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
9,In which city is the headquarter of Air China?,"```sparql
SELECT ?city
WHERE {
  <http://dbpedia.org/resource/Air_China> dbpedia-owl:headquarter ?hq .
  ?hq dbpedia-owl:city ?city .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
201,What is the founding year of the brewery that produces Pilsner Urquell?,"```sparql
SELECT ?brewery ?foundingYear
WHERE {
  ?brewery dbp:product dbr:Pilsner_Urquell ;
          dbp:foundation ?foundingYear .
}
```
This query retrieves the founding year of the brewery that produces Pilsner Urquell.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
171,When did the Boston Tea Party take place?,"```sparql
SELECT ?date
WHERE {
  dbr:Boston_Tea_Party dbo:date ?date
}
```
This query retrieves the date of the Boston Tea Party event from DBpedia.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
182,Which animals are critically endangered?,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?animal
WHERE {
  ?animal dbo:wikiPageID ?id .
  ?animal dbo:binomialAuthority ?binomial .
  ?animal dbo:conservationStatus dbr:Critically_Endangered .
}
```
This SPARQL query retrieves the animals that are classified as critically endangered according to DBpedia.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
13,Which politicians were married to a German?,"```sparql
SELECT DISTINCT ?politician ?politicianName
WHERE {
  ?politician a dbpedia-owl:Politician ;
             dbpedia-owl:spouse ?spouse .
  ?spouse dbpedia-owl:nationality <http://dbpedia.org/resource/Germany> .
  ?politician rdfs:label ?politicianName .
  FILTER (lang(?politicianName) = 'en')
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
114,How big is the earth's diameter?,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?diameter
WHERE {
    <http://dbpedia.org/resource/Earth> dbo:diameter ?diameter
}
```
This SPARQL query retrieves the diameter of the Earth from DBpedia.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
92,Is the wife of President Obama called Michelle?,"PREFIX dbpedia-owl: <http://dbpedia.org/ontology/>
SELECT ?wifeName
WHERE {
  dbpedia:Barack_Obama dbpedia-owl:spouse ?wife.
  ?wife foaf:name ?wifeName.
  FILTER (?wifeName = ""Michelle Obama"")
}","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
194,Which U.S. state has the abbreviation MN?,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?stateLabel
WHERE {
  ?state dbo:abbreviation ""MN"" .
  ?state a dbo:State .
  ?state rdfs:label ?stateLabel .
  FILTER (lang(?stateLabel) = 'en')
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
175,When did Muhammad die?,"```sparql
SELECT ?deathDate
WHERE {
  dbpedia:Muhammad dbo:deathDate ?deathDate
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
26,What is the atmosphere of the Moon composed of?,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?atmosphereComposition
WHERE {
  dbo:Moon dbo:atmosphereComposition ?atmosphereComposition .
}
```
This query retrieves the composition of the atmosphere of the Moon from DBpedia.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
60,Who is the governor of Texas?,"```sparql
SELECT ?governor
WHERE {
  dbpedia:Texas dbpedia-gov:governor ?governor .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
110,Which movies did Kurosawa direct?,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT DISTINCT ?movie
WHERE {
  ?director dbo:director <http://dbpedia.org/resource/Akira_Kurosawa> ;
            dbo:director ?movie .
  ?movie a dbo:Film .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
206,What was the name of the famous battle in 1836 in San Antonio?,"The famous battle in 1836 in San Antonio was the Battle of the Alamo. 

Here is the SPARQL query to retrieve this information from DBpedia:

```
SELECT ?battleName
WHERE {
  ?battle dbpedia-owl:date ""1836""^^xsd:integer .
  ?battle dbpedia-owl:place <http://dbpedia.org/resource/San_Antonio> .
  ?battle dbpedia-owl:wikiPageRedirects ?battleRedirect .
  ?battleRedirect rdfs:label ?battleName .
  FILTER(lang(?battleName) = 'en')
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
97,Give me the official websites of actors of the television show Charmed.,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT ?actor ?website
WHERE {
  ?charmed dbo:starring ?actor .
  ?actor foaf:isPrimaryTopicOf ?website .
  FILTER regex(str(?website), ""http://"") .
}
```
This query retrieves the official websites of actors who starred in the television show Charmed.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
20,How many calories does a baguette have?,"```sparql
SELECT ?calories
WHERE {
  dbpedia:Baguette dbo:calories ?calories
}
```
This query retrieves the number of calories in a baguette from DBpedia.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
169,Give me all libraries established before 1400.,"```sparql
SELECT DISTINCT ?library ?libraryLabel ?established
WHERE {
  ?library rdf:type dbo:Library ;
           dbo:established ?established .
  FILTER(YEAR(?established) < 1400)
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
ORDER BY ?established
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
38,Give me all Frisian islands that belong to the Netherlands.,"```sparql
SELECT ?island
WHERE {
  ?island rdf:type dbo:Island ;
          dbo:country dbr:Netherlands ;
          dbo:locatedInArea dbr:Frisian_Islands .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
192,Which museum exhibits The Scream by Munch?,"```sparql
SELECT DISTINCT ?museum ?museumLabel
WHERE {
  ?painting dbo:author dbr:Edvard_Munch ;
           rdfs:label ""The Scream""@en .
  ?museum dbo:collection ?painting ;
          rdf:type dbo:Museum .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""en"". }
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
78,When was the De Beers company founded?,"```sparql
SELECT ?founder
WHERE {
  dbr:De_Beers dbo:foundationDate ?founder .
}
```
This query retrieves the foundation date of the De Beers company.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
19,Who became president after JFK died?,"```sparql
SELECT ?successorName
WHERE {
  ?jfk dbo:successor ?successor .
  ?successor foaf:name ?successorName .
  FILTER (CONTAINS(?successorName, ""President""))
}
```
This query retrieves the name of the person who succeeded JFK as President.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
190,Who are the parents of the wife of Juan Carlos I?,"To find out the parents of the wife of Juan Carlos I, we need to first identify the wife of Juan Carlos I and then retrieve information about her parents. Let's break it down into steps:

1. Find out who is the wife of Juan Carlos I:
```sparql
SELECT ?wife
WHERE {
  <http://dbpedia.org/resource/Juan_Carlos_I> dbpedia-owl:spouse ?wife .
}
```

2. Once we have the wife's DBpedia resource, we can query for her parents:
```sparql
SELECT ?wifeParent1 ?wifeParent2
WHERE {
  <http://dbpedia.org/resource/SofÃ­a_of_Greece_and_Denmark> dbpedia-owl:parent ?wifeParent1 .
  <http://dbpedia.org/resource/SofÃ­a_of_Greece_and_Denmark> dbpedia-owl:parent ?wifeParent2 .
  FILTER (?wifeParent1 != ?wifeParent2)
}
```

Combining the two queries, we can find the parents of the wife of Juan Carlos I, who is Queen SofÃ­a of Spain.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
174,Who is the novelist of the work a song of ice and fire?,"```sparql
SELECT ?authorLabel
WHERE {
  ?novel dbo:author dbr:George_R._R._Martin.
  ?novel rdfs:label ""A Song of Ice and Fire""@en.
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""en"". }
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
189,In which studio did the Beatles record their first album?,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?studio
WHERE {
  ?album dbo:artist dbr:The_Beatles ;
        dbp:recordedIn ?studio .
  FILTER regex(str(?album), ""Please_Please_Me"")
}
```

This SPARQL query retrieves the studio where The Beatles recorded their first album ""Please Please Me"" from DBpedia.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
152,Which beer brewing companies are located in North-Rhine Westphalia?,"```sparql
SELECT DISTINCT ?company
WHERE {
  ?company a dbpedia-owl:Brewery ;
           dbpedia-owl:location ?location .
  ?location dbpedia-owl:locatedIn dbpedia:North_Rhine-Westphalia .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
94,When did princess Diana die?,"```sparql
SELECT ?dateOfDeath
WHERE {
  dbpedia:Diana,_Princess_of_Wales dbo:dateOfDeath ?dateOfDeath
}
```
This SPARQL query retrieves the date of death of Princess Diana from DBpedia.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
8,Who founded Intel?,"```sparql
SELECT ?founder WHERE {
  dbpedia:Intel dbpedia-owl:companyFounders ?founder .
}
```
This query retrieves the founder(s) of Intel.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
95,Who is the youngest player in the Premier League?,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT ?player ?name ?birthdate
WHERE {
  ?player a dbo:SoccerPlayer ;
          dbo:league dbo:Premier_League ;
          foaf:name ?name ;
          dbo:birthDate ?birthdate .
}
ORDER BY ASC(?birthdate)
LIMIT 1
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
119,Which instruments does Cat Stevens play?,"```sparql
SELECT DISTINCT ?instrumentLabel
WHERE {
  ?person dbo:instrument ?instrument .
  ?person foaf:name ""Cat Stevens""@en .
  ?instrument rdfs:label ?instrumentLabel .
  FILTER(LANG(?instrumentLabel) = 'en')
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
115,How many rivers and lakes are in South Carolina?,"```sparql
SELECT (COUNT(DISTINCT ?river) AS ?numRivers) (COUNT(DISTINCT ?lake) AS ?numLakes)
WHERE {
  ?river rdf:type dbo:River ;
         dbo:locatedIn dbr:South_Carolina .
  
  ?lake rdf:type dbo:Lake ;
        dbo:locatedIn dbr:South_Carolina .
}
```
This query counts the number of rivers and lakes in South Carolina by finding all rivers and lakes located in South Carolina and then counting the distinct instances of each.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
116,Who was called Rodzilla?,"```sparql
SELECT DISTINCT ?person
WHERE {
  ?person foaf:nick ""Rodzilla""@en .
}
```
This query retrieves the person who was called ""Rodzilla"" in DBpedia.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
138,Give me the capitals of all countries in Africa.,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?country ?capital
WHERE {
  ?country a dbo:Country ;
           dbo:continent dbr:Africa ;
           dbo:capital ?capital .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
177,Which bridges are of the same type as the Manhattan Bridge?,"```sparql
SELECT DISTINCT ?bridge ?type
WHERE {
  ?bridge rdf:type dbo:Bridge ;
          dbo:bridgeType ?type .
  FILTER(?bridge = dbr:Manhattan_Bridge)
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
101,How many companies were founded by the founder of Facebook?,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT (COUNT(?company) AS ?count)
WHERE {
  ?founder foaf:name ""Mark Zuckerberg""@en .
  ?company dbo:founder ?founder .
  FILTER (?company != <http://dbpedia.org/resource/Facebook>)
}
```
This query retrieves the count of companies founded by Mark Zuckerberg, the founder of Facebook, excluding Facebook itself.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
14,Show me hiking trails in the Grand Canyon where there's no danger of flash floods.,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?trail ?description
WHERE {
  ?trail a dbo:HikingTrail ;
         dbo:location dbr:Grand_Canyon ;
         dbo:abstract ?description .
  FILTER NOT EXISTS { ?trail dbo:hazard ""Flash floods"" }
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
87,Which book has the most pages?,"```sparql
SELECT ?book ?pages
WHERE {
  ?book rdf:type dbo:Book ;
        dbo:numberOfPages ?pages .
}
ORDER BY DESC(?pages)
LIMIT 1
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
148,What is the largest state in the United States?,"```sparql
SELECT ?state ?area
WHERE {
  ?state a dbo:State ;
         dbo:country dbr:United_States ;
         dbo:areaTotal ?area .
}
ORDER BY DESC(?area)
LIMIT 1
```
This SPARQL query retrieves the state in the United States with the largest total area.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
43,Give me the websites of companies with more than 500000 employees.,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT ?company ?website
WHERE {
  ?company a dbo:Company ;
           dbo:numberOfEmployees ?employees ;
           foaf:homepage ?website .
  FILTER (?employees > 500000)
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
179,What were the names of the three ships by Columbus?,"```sparql
SELECT DISTINCT ?shipName
WHERE {
  ?columbus a dbpedia-owl:Person ;
            dbpedia-owl:ship ?ship .
  ?ship rdfs:label ?shipName .
  FILTER regex(?shipName, ""Columbus"", ""i"")
}
LIMIT 3
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
