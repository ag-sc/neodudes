id,question,sparql,prompt
99,What is the time zone of Salt Lake City?,"```sparql
SELECT ?timezone
WHERE {
  dbr:Salt_Lake_City dbo:timeZone ?timezone
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
98,Who killed Caesar?,"```sparql
SELECT ?assassin
WHERE {
  dbpedia:Assassination_of_Julius_Caesar dbpedia-owl:assassin ?assassin .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
86,What is the highest mountain in Germany?,"```sparql
SELECT ?mountain ?height
WHERE {
  ?mountain rdf:type dbo:Mountain ;
           dbo:country dbr:Germany ;
           dbo:elevation ?height .
}
ORDER BY DESC(?height)
LIMIT 1
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
84,Which American presidents were in office during the Vietnam War?,"```sparql
SELECT DISTINCT ?president
WHERE {
  ?president a dbo:President ;
            dbo:office/dbo:commander ?event .
  ?event dbo:wikiPageID 2095 .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
81,Butch Otter is the governor of which U.S. state?,"```sparql
SELECT ?state WHERE {
  dbpedia:Butch_Otter dbp:governor ?state .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
73,How many gold medals did Michael Phelps win at the 2008 Olympics?,"```sparql
SELECT (COUNT(?goldMedal) AS ?totalGoldMedals)
WHERE {
  ?person dbo:goldMedalist ?goldMedal .
  ?goldMedal dbo:goldMedal ?goldMedalType .
  ?goldMedalType rdfs:label ""Gold""@en .
  ?goldMedal dbo:olympics <http://dbpedia.org/resource/2008_Summer_Olympics> .
  ?person foaf:name ""Michael Phelps""@en .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
66,Which artists were born on the same date as Rachel Stevens?,"SELECT DISTINCT ?artist ?birthdate
WHERE {
  ?artist a dbo:MusicalArtist ;
          dbo:birthDate ?birthdate .
  FILTER (?birthdate = ""1978-04-09""^^xsd:date)
  FILTER (?artist != dbr:Rachel_Stevens)
}
",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
64,What is the profession of Frank Herbert?,"SELECT ?profession
WHERE {
  dbpedia:Frank_Herbert dbpedia-owl:profession ?profession
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
6,Are Taiko some kind of Japanese musical instrument?,"```sparql
SELECT DISTINCT ?instrument
WHERE {
  ?instrument rdf:type dbo:MusicalInstrument .
  ?instrument rdfs:label ?label .
  FILTER (langMatches(lang(?label), ""EN"") && regex(?label, ""Taiko"", ""i""))
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
56,How many seats does the home stadium of FC Porto have?,"```sparql
SELECT ?seats
WHERE {
  dbr:FC_Porto dbo:ground ?stadium .
  ?stadium dbo:capacity ?seats
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
49,Which frequent flyer program has the most airlines?,"```sparql
SELECT ?program (COUNT(?airline) AS ?numAirlines)
WHERE {
  ?program dbo:frequentFlyer ?airline .
}
GROUP BY ?program
ORDER BY DESC(?numAirlines)
LIMIT 1
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
44,Which European countries have a constitutional monarchy?,"```sparql
SELECT DISTINCT ?country
WHERE {
  ?country a dbo:Country ;
           dbo:governmentType dbr:Constitutional_monarchy ;
           dbo:continent dbr:Europe .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
42,Which countries have places with more than two caves?,"```sparql
SELECT DISTINCT ?country
WHERE {
  ?place rdf:type dbo:Place .
  ?place dbo:location ?country .
  ?place rdf:type dbo:Cave .
}
GROUP BY ?country
HAVING (COUNT(?place) > 2)
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
4,"Which airports are located in California, USA?","```sparql
SELECT DISTINCT ?airport
WHERE {
  ?airport a dbo:Airport ;
          dbo:location dbr:California .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
37,What are the nicknames of San Francisco?,"```sparql
SELECT ?nickname
WHERE {
  dbr:San_Francisco dbp:nickname ?nickname
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
32,What is Angela Merkelâ€™s birth name?,"```sparql
SELECT ?birthName
WHERE {
  dbr:Angela_Merkel dbo:birthName ?birthName
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
31,Who is the mayor of Berlin?,"SELECT ?mayor
WHERE {
  dbr:Berlin dbp:leader ?mayor .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
29,Which countries in the European Union adopted the Euro?,"```sparql
SELECT DISTINCT ?country
WHERE {
  ?country a dbo:Country ;
           dbo:currency ?currency .
  FILTER regex(str(?currency), ""Euro"", ""i"")
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
23,Which software has been published by Mean Hamster Software?,"```sparql
SELECT ?software
WHERE {
  ?software dct:publisher <http://dbpedia.org/resource/Mean_Hamster_Software> .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
68,Which country was Bill Gates born in?,"```sparql
SELECT ?country
WHERE {
  dbpedia:Bill_Gates dbo:birthPlace ?birthPlace .
  ?birthPlace dbo:country ?country .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
22,How many grand-children did Jacques Cousteau have?,"```sparql
SELECT (COUNT(?grandchild) AS ?count)
WHERE {
  dbr:Jacques_Cousteau dbo:child/dbo:child ?grandchild .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
214,Give me all professional skateboarders from Sweden.,"```sparql
SELECT ?skateboarder
WHERE {
  ?skateboarder a dbo:Person ;
                dbo:nationality dbr:Sweden ;
                dbo:occupation dbr:Professional_skateboarder .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
210,Which monarchs of the United Kingdom were married to a German?,"```sparql
SELECT DISTINCT ?monarch
WHERE {
  ?monarch a dbo:Monarch ;
           dbo:spouse ?spouse .
  ?spouse dbo:birthPlace ?birthplace .
  ?birthplace dbo:country <http://dbpedia.org/resource/Germany> .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
199,Give me all Argentine films.,"```sparql
SELECT ?film
WHERE {
    ?film a dbo:Film ;
          dbo:country dbr:Argentina .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
203,How did Michael Jackson die?,"SELECT ?cause_of_death
WHERE {
  dbpedia:Michael_Jackson dbo:causeOfDeath ?cause_of_death .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
197,Which U.S. state has been admitted latest?,"```sparql
SELECT ?state ?admissionDate
WHERE {
  ?state a dbo:State ;
         dbp:admittancedate ?admissionDate .
}
ORDER BY DESC(?admissionDate)
LIMIT 1
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
196,Which classes does the Millepede belong to?,"```sparql
SELECT DISTINCT ?class
WHERE {
  dbr:Millipede dct:subject ?class .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
188,Give me the homepage of Forbes.,"```sparql
SELECT ?homepage
WHERE {
  dbr:Forbes foaf:homepage ?homepage
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
187,Who is the husband of Amanda Palmer?,"```sparql
SELECT ?husband
WHERE {
  ?person dbo:spouse ?husband .
  FILTER (?person = dbr:Amanda_Palmer)
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
176,Who painted The Storm on the Sea of Galilee?,"```sparql
SELECT ?painter
WHERE {
  ?painter a dbo:Person ;
           dbo:author dbr:The_Storm_on_the_Sea_of_Galilee .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
62,What is the highest place of Karakoram?,"```sparql
SELECT ?place ?elevation
WHERE {
  ?place dbo:location dbpedia:Karakoram ;
        dbp:highest ?elevation .
}
ORDER BY DESC(?elevation)
LIMIT 1
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
173,When did Finland join the EU?,"```sparql
SELECT ?date
WHERE {
  dbr:Finland dbp:accessioneudate ?date
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
168,Which actors play in Big Bang Theory?,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?actor
WHERE {
  ?film dbo:starring ?actor .
  FILTER regex(str(?film), ""Big_Bang_Theory"")
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
166,Which computer scientist won an oscar?,"```sparql
SELECT ?scientist ?name
WHERE {
  ?scientist a dbo:Scientist ;
             dbo:award ?award ;
             foaf:name ?name .
  ?award a dbo:Award .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
160,Who wrote Harry Potter?,"```sparql
SELECT ?author
WHERE {
  ?book dbo:author ?author ;
        rdfs:label ""Harry Potter""@en .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
158,Give me all writers that won the Nobel Prize in literature.,"```sparql
SELECT ?writer ?name
WHERE {
  ?writer a dbo:Writer ;
          dbo:award dbr:Nobel_Prize_in_Literature ;
          foaf:name ?name .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
157,Give me English actors starring in Lovesick.,"```sparql
SELECT DISTINCT ?actor
WHERE {
  ?film dbo:starring ?actor .
  ?film rdfs:label ""Lovesick""@en .
  ?actor dbo:nationality dbr:England .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
155,What is the nick name of Baghdad?,"```sparql
SELECT ?nickname
WHERE {
  dbr:Baghdad dbp:nickname ?nickname
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
150,In which city was the president of Montenegro born?,"```sparql
SELECT ?cityOfBirth
WHERE {
  dbr:President_of_Montenegro dbo:birthPlace ?birthPlace .
  ?birthPlace dbo:location ?cityOfBirth .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
149,Which U.S. state has the highest population density?,"```sparql
SELECT ?state ?populationDensity
WHERE {
  ?state a dbo:State ;
         dbp:densityrank ?populationDensity .
}
ORDER BY DESC(?populationDensity)
LIMIT 1
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
25,What is the longest river in China?,"```sparql
SELECT ?river ?length
WHERE {
  ?river rdf:type dbo:River .
  ?river dbo:country dbr:China .
  ?river dbo:length ?length .
} 
ORDER BY DESC(?length)
LIMIT 1
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
143,What is the area code of Berlin?,"```sparql
SELECT ?areaCode
WHERE {
  dbr:Berlin dbo:areaCode ?areaCode
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
140,How many scientists graduated from an Ivy League university?,"```sparql
SELECT (COUNT(DISTINCT ?scientist) AS ?count)
WHERE {
  ?scientist a dbo:Person ;
             dbo:almaMater ?university .
  ?university dbo:universityOf ?ivyLeague .
  FILTER regex(str(?ivyLeague), ""Ivy_League"")
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
139,Which professional surfers were born in Australia?,"```sparql
SELECT DISTINCT ?surfer
WHERE {
  ?surfer a dbo:Person ;
          dbo:birthPlace/dbo:Country dbr:Australia ;
          dbo:occupation dbr:Surfer .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
137,Give me all Dutch parties.,"```sparql
SELECT ?party
WHERE {
  ?party a dbo:PoliticalParty ;
         rdfs:label ?label .
  FILTER (lang(?label) = 'nl')
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
136,How many moons does Mars have?,"SELECT (COUNT(?moon) AS ?numMoons)
WHERE {
  dbr:Mars dbo:satellites ?moon .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
134,What is Batman's real name?,"SELECT ?realName
WHERE {
  dbr:Batman foaf:name ?realName
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
132,What is Elon Musk famous for?,"```sparql
SELECT ?person ?knownFor
WHERE {
  ?person dbo:knownFor ?knownFor.
  FILTER (?person = dbr:Elon_Musk)
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
128,Who is the author of WikiLeaks?,"SELECT ?author
WHERE {
  <http://dbpedia.org/resource/WikiLeaks> <http://dbpedia.org/ontology/author> ?author
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
126,Sean Parnell was the governor of which U.S. state?,"```sparql
SELECT ?state
WHERE {
  dbr:Sean_Parnell dbo:governor ?state .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
125,How many years was the Ford Model T manufactured?,"```sparql
SELECT (xsd:integer(?endYear) - xsd:integer(?startYear) AS ?manufacturingYears)
WHERE {
  ?car dbo:manufacturer dbr:Ford_Motor_Company ;
       dbo:model dbr:Ford_Model_T ;
       dbo:productionStartYear ?startYear ;
       dbo:productionEndYear ?endYear .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
124,When was Carlo Giuliani shot?,"SELECT ?date
WHERE {
  ?person dbo:deathDate ?date .
  FILTER (?person = dbr:Carlo_Giuliani)
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
123,Give me all animals that are extinct.,"```sparql
SELECT ?animal
WHERE {
  ?animal rdf:type dbo:Animal ;
          dbo:extinct true .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
122,Who was the wife of President Lincoln?,"```sparql
SELECT ?wife
WHERE {
  <http://dbpedia.org/resource/Abraham_Lincoln> dbpedia-owl:spouse ?wife .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
111,How many awards has Bertrand Russell?,"SELECT (COUNT(?award) AS ?count)
WHERE {
  dbr:Bertrand_Russell dbp:awards ?award
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
117,Is Pamela Anderson a vegan?,"```sparql
SELECT ?person ?personName ?diet
WHERE {
  ?person rdf:type dbo:Person ;
          foaf:name ?personName ;
          dbo:diet ?diet .
  FILTER (?personName = ""Pamela Anderson"" && ?diet = ""Veganism"")
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
59,Which space probes were sent into orbit around the sun?,"```sparql
SELECT ?probe
WHERE {
  ?probe rdf:type dbo:SpaceProbe .
  ?probe dbp:launched ""into orbit around the Sun"" .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
113,Which German cities have more than 250000 inhabitants?,"```sparql
SELECT DISTINCT ?city WHERE {
  ?city a dbo:City ;
        dbo:country dbr:Germany ;
        dbo:populationTotal ?population .
  FILTER (?population > 250000)
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
104,Who is the daughter of Robert Kennedy married to?,"```sparql
SELECT ?spouseName 
WHERE {
  ?robertKennedy dbo:child ?daughter .
  ?daughter dbo:spouse ?spouse .
  ?spouse foaf:name ?spouseName .
  FILTER (?robertKennedy = dbr:Robert_F._Kennedy)
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
10,How many students does the Free University of Amsterdam have?,"```sparql
SELECT ?numberOfStudents
WHERE {
  dbr:Free_University_of_Amsterdam dbo:numberOfStudents ?numberOfStudents
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
1,What is the revenue of IBM?,"```sparql
SELECT ?revenue
WHERE {
  dbpedia:IBM dbo:revenue ?revenue .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
178,How many James Bond movies do exist?,"```sparql
SELECT (COUNT(?film) AS ?count)
WHERE {
  ?film rdf:type dbo:Film ;
        dbo:starring dbr:James_Bond .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
129,Who does the voice of Bart Simpson?,"SELECT ?actor
WHERE {
  dbr:Bart_Simpson dbo:voiceActor ?actor
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
183,Who was Tom Hanks married to?,"```sparql
SELECT ?spouse
WHERE {
  dbpedia:Tom_Hanks dbo:spouse ?spouse .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
181,Through which countries does the Yenisei river flow?,"```sparql
SELECT DISTINCT ?country
WHERE {
  ?river dbo:country ?country .
  FILTER (?river = dbr:Yenisei)
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
7,Give me all cars that are produced in Germany.,"```sparql
SELECT ?car
WHERE {
  ?car a dbo:Automobile ;
       dbo:assembly/dbo:country dbr:Germany .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
135,When did Michael Jackson die?,"```sparql
SELECT ?date
WHERE {
  dbr:Michael_Jackson dbo:deathDate ?date
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
50,What is the highest volcano in Africa?,"```sparql
SELECT ?volcano ?elevation
WHERE {
  ?volcano rdf:type dbo:Volcano ;
          dbo:locatedInArea ?country ;
          dbo:elevation ?elevation .
  ?country dbo:locatedInArea dbr:Africa .
}
ORDER BY DESC(?elevation)
LIMIT 1
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
39,Which poet wrote the most books?,"```sparql
SELECT ?poet (COUNT(?book) AS ?numBooks)
WHERE {
  ?poet a dbo:Writer .
  ?poet dbo:author ?book .
} 
GROUP BY ?poet
ORDER BY DESC(?numBooks)
LIMIT 1
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
83,Give me all gangsters from the prohibition era.,"```sparql
SELECT ?gangster
WHERE {
  ?gangster dbo:occupation ""Gangster""@en .
  ?gangster dbo:birthDate ?birthDate .
  FILTER (?birthDate >= ""1900-01-01""^^xsd:date && ?birthDate <= ""1933-12-05""^^xsd:date)
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
71,Give me all spacecrafts that flew to Mars.,"```sparql
SELECT ?spacecraft
WHERE {
  ?spacecraft dbo:ArtificialSatellite ?satellite .
  ?satellite dbp:launched ""Mars"" .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
213,Show me all Czech movies.,"```sparql
SELECT ?movie
WHERE {
  ?movie a dbo:Film ;
         dbp:country ""Czech Republic""@en .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
209,Give me all taikonauts.,"```sparql
SELECT ?taikonaut
WHERE {
  ?taikonaut a <http://dbpedia.org/ontology/Taikonaut> .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
105,Which countries have more than ten volcanoes?,"```sparql
SELECT ?country (COUNT(?volcano) AS ?numVolcanoes)
WHERE {
  ?volcano a dbo:Volcano ;
           dbo:locatedInArea ?country .
}
GROUP BY ?country
HAVING (COUNT(?volcano) > 10)
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
52,Give me all movies with Tom Cruise.,"```sparql
SELECT ?movie
WHERE {
  ?movie rdf:type dbo:Film ;
         dbo:starring dbr:Tom_Cruise .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
102,When did Dracula's creator die?,"```sparql
SELECT ?dateOfDeath
WHERE {
  ?creator dbo:birthPlace dbr:Dracula ;
           dbo:deathDate ?dateOfDeath .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
21,Who created English Wikipedia?,"```sparql
SELECT ?creator
WHERE {
  dbpedia-en:English_Wikipedia dct:creator ?creator .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
34,Give me all female German chancellors.,"```sparql
SELECT ?chancellor
WHERE {
  ?chancellor a dbo:Chancellor ;
             dbo:birthPlace/dbo:country dbr:Germany ;
             dbo:gender ""female"" .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
145,Who owns Aldi?,"```sparql
SELECT ?owner
WHERE {
  dbr:Aldi dbo:owner ?owner .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
154,Which books were written by Danielle Steel?,"SELECT ?book
WHERE {
  ?author dbo:author dbr:Danielle_Steel .
  ?book dbo:author ?author .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
198,Who was influenced by Socrates?,"```sparql
SELECT DISTINCT ?influencedBy
WHERE {
  dbr:Socrates dbo:influenced ?influencedBy .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
162,How deep is Lake Chiemsee?,"SELECT ?depth
WHERE {
  dbpedia:Lake_Chiemsee dbpedia-owl:maximumDepth ?depth
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
212,Which companies work in the aerospace industry as well as in medicine?,"```sparql
SELECT DISTINCT ?company
WHERE {
  ?company a dbo:Company ;
           dbo:industry ?industry1, ?industry2 .
  FILTER (?industry1 = dbr:Aerospace_industry && ?industry2 = dbr:Medicine)
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
96,Which professional surfers were born on the Philippines?,"```sparql
SELECT ?surferName
WHERE {
  ?surfer a dbo:Person ;
          dbo:birthPlace/dbo:country dbr:Philippines ;
          rdf:type dbo:Surfer ;
          rdfs:label ?surferName .
  FILTER (lang(?surferName) = 'en')
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
40,Who were the parents of Queen Victoria?,"```sparql
SELECT ?father ?mother
WHERE {
  dbr:Queen_Victoria dbo:parent ?parent .
  ?parent a dbo:Person .
  ?parent dbo:child dbr:Queen_Victoria .
  OPTIONAL { ?parent dbo:father ?father }
  OPTIONAL { ?parent dbo:mother ?mother }
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
79,Are there any castles in the United States?,"```sparql
SELECT DISTINCT ?castle
WHERE {
  ?castle rdf:type dbo:Castle .
  ?castle dbo:country dbr:United_States .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
141,Which languages are spoken in Estonia?,"```sparql
SELECT DISTINCT ?language
WHERE {
  <http://dbpedia.org/resource/Estonia> dbo:language ?language .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
80,Give me a list of all critically endangered birds.,"```sparql
PREFIX dcterms: <http://purl.org/dc/terms/>
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT DISTINCT ?bird
WHERE {
  ?bird a dbo:Bird ;
        dcterms:description ""critically endangered""@en .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
159,Which countries are connected by the Rhine?,"```sparql
SELECT DISTINCT ?country
WHERE {
  ?river dbo:sourceCountry ?country1 .
  ?river dbo:mouthCountry ?country2 .
  ?country1 dbo:country ?country .
  ?country2 dbo:country ?country .
  FILTER (?country1 != ?country2)
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
107,Who was the father of Queen Elizabeth II?,"```sparql
SELECT ?father
WHERE {
  <http://dbpedia.org/resource/Elizabeth_II> dbo:parent ?father .
  ?father a dbo:Person .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
163,Give me all chemical elements.,"```sparql
SELECT ?element ?elementLabel
WHERE {
  ?element rdf:type dbo:ChemicalElement .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
99,What is the time zone of Salt Lake City?,"```sparql
SELECT ?timezone
WHERE {
  dbr:Salt_Lake_City dbo:timeZone ?timezone
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
98,Who killed Caesar?,"```sparql
SELECT ?killer
WHERE {
  <http://dbpedia.org/resource/Assassination_of_Julius_Caesar> dbpedia-owl:perpetrator ?killer .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
86,What is the highest mountain in Germany?,"```sparql
SELECT ?mountain ?height
WHERE {
  ?mountain rdf:type dbo:Mountain ;
            dbo:country dbr:Germany ;
            dbo:elevation ?height .
}
ORDER BY DESC(?height)
LIMIT 1
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
84,Which American presidents were in office during the Vietnam War?,"```sparql
SELECT DISTINCT ?president
WHERE {
  ?president a dbo:President ;
            dbo:office/dbo:commander ?event .
  ?event dbo:wikiPageID 2095 .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
81,Butch Otter is the governor of which U.S. state?,"```sparql
SELECT ?state WHERE {
  ?person dbp:governor dbr:Butch_Otter .
  ?person dbo:region ?state .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
73,How many gold medals did Michael Phelps win at the 2008 Olympics?,"```sparql
SELECT (COUNT(?goldMedal) AS ?totalGoldMedals)
WHERE {
  ?athlete dbo:goldMedalist ?goldMedal .
  ?goldMedal dbo:goldMedalCompetition ?competition .
  ?competition rdfs:label ""2008 Summer Olympics""@en .
  ?athlete foaf:name ""Michael Phelps""@en .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
66,Which artists were born on the same date as Rachel Stevens?,"SELECT DISTINCT ?artist ?birthdate
WHERE {
  ?artist a dbo:MusicalArtist ;
          dbo:birthDate ?birthdate .
  FILTER (?birthdate = ""1978-04-09""^^xsd:date)
  FILTER (?artist != dbr:Rachel_Stevens)
}
",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
64,What is the profession of Frank Herbert?,"SELECT ?profession
WHERE {
  dbpedia:Frank_Herbert dbpedia-owl:profession ?profession
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
6,Are Taiko some kind of Japanese musical instrument?,"```sparql
SELECT DISTINCT ?instrument
WHERE {
  ?instrument rdf:type dbo:MusicalInstrument .
  ?instrument rdfs:label ?label .
  FILTER (langMatches(lang(?label), ""EN"") && regex(?label, ""Taiko"", ""i""))
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
56,How many seats does the home stadium of FC Porto have?,"SELECT ?seats
WHERE {
  dbr:FC_Porto dbo:ground ?stadium .
  ?stadium dbo:capacity ?seats
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
49,Which frequent flyer program has the most airlines?,"```sparql
SELECT ?program (COUNT(?airline) AS ?numAirlines)
WHERE {
  ?program dbo:frequentFlyer ?airline .
}
GROUP BY ?program
ORDER BY DESC(?numAirlines)
LIMIT 1
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
44,Which European countries have a constitutional monarchy?,"```sparql
SELECT DISTINCT ?country
WHERE {
  ?country a dbo:Country ;
           dbo:governmentType dbr:Constitutional_monarchy ;
           dbo:continent dbr:Europe .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
42,Which countries have places with more than two caves?,"```sparql
SELECT DISTINCT ?country
WHERE {
  ?place rdf:type dbo:Place .
  ?place dbo:location ?country .
  ?place rdf:type dbo:Cave .
}
GROUP BY ?country
HAVING (COUNT(?place) > 2)
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
4,"Which airports are located in California, USA?","```sparql
SELECT DISTINCT ?airport
WHERE {
  ?airport a dbo:Airport ;
          dbo:location dbr:California .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
37,What are the nicknames of San Francisco?,"```sparql
SELECT ?nickname
WHERE {
  dbr:San_Francisco dbo:nickname ?nickname
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
32,What is Angela Merkelâ€™s birth name?,"SELECT ?birthName
WHERE {
  dbr:Angela_Merkel dbo:birthName ?birthName
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
31,Who is the mayor of Berlin?,"SELECT ?mayor
WHERE {
  dbr:Berlin dbp:leader ?mayor .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
29,Which countries in the European Union adopted the Euro?,"```sparql
SELECT DISTINCT ?countryName
WHERE {
  ?country a dbo:Country ;
           dbo:currency dbr:Euro .
  ?country rdfs:label ?countryName .
  FILTER (lang(?countryName) = 'en')
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
23,Which software has been published by Mean Hamster Software?,"```sparql
SELECT DISTINCT ?software
WHERE {
  ?software dct:publisher dbc:Mean_Hamster_Software .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
68,Which country was Bill Gates born in?,"SELECT ?country WHERE {
  dbpedia:Bill_Gates dbo:birthPlace ?birthPlace.
  ?birthPlace dbo:country ?country.
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
22,How many grand-children did Jacques Cousteau have?,"```sparql
SELECT (COUNT(?grandchild) AS ?count)
WHERE {
  dbr:Jacques_Cousteau dbo:child/dbo:child ?grandchild
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
214,Give me all professional skateboarders from Sweden.,"```sparql
SELECT ?skateboarder
WHERE {
  ?skateboarder a dbo:Skateboarder ;
                dbo:birthPlace dbr:Sweden .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
210,Which monarchs of the United Kingdom were married to a German?,"```sparql
SELECT DISTINCT ?monarch
WHERE {
  ?monarch a dbo:Monarch ;
           dbo:spouse ?spouse .
  ?spouse dbo:birthPlace ?birthPlace .
  FILTER regex(str(?birthPlace), ""Germany"", ""i"")
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
199,Give me all Argentine films.,"```sparql
SELECT ?film
WHERE {
  ?film a dbo:Film ;
        dbo:country dbr:Argentina .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
203,How did Michael Jackson die?,"SELECT ?cause_of_death
WHERE {
  dbpedia:Michael_Jackson dbo:causeOfDeath ?cause_of_death .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
197,Which U.S. state has been admitted latest?,"```sparql
SELECT ?state ?admissionDate
WHERE {
  ?state a dbo:State ;
         dbp:admittancedate ?admissionDate .
}
ORDER BY DESC(?admissionDate)
LIMIT 1
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
196,Which classes does the Millepede belong to?,"```sparql
SELECT DISTINCT ?class
WHERE {
  dbr:Millipede dct:subject ?class .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
188,Give me the homepage of Forbes.,"SELECT ?homepage
WHERE {
  dbr:Forbes foaf:homepage ?homepage
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
187,Who is the husband of Amanda Palmer?,"SELECT ?husband
WHERE {
  dbr:Amanda_Palmer dbo:spouse ?husband .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
176,Who painted The Storm on the Sea of Galilee?,"```sparql
SELECT ?painter
WHERE {
  ?painting dbo:author ?painter .
  ?painting rdfs:label ""The Storm on the Sea of Galilee""@en .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
62,What is the highest place of Karakoram?,"```sparql
SELECT ?place ?elevation
WHERE {
  ?place dbo:location dbpedia:Karakoram ;
        dbp:highest ?elevation .
}
ORDER BY DESC(?elevation)
LIMIT 1
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
173,When did Finland join the EU?,"```sparql
SELECT ?date
WHERE {
  dbr:Finland dbp:accessioneudate ?date
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
168,Which actors play in Big Bang Theory?,"SELECT ?actor
WHERE {
  ?film dbo:starring ?actor .
  ?film rdfs:label ""The Big Bang Theory""@en
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
166,Which computer scientist won an oscar?,"```sparql
SELECT ?scientist ?name
WHERE {
  ?scientist a dbo:Scientist ;
             dbo:award ?award .
  ?award foaf:name ?name .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
160,Who wrote Harry Potter?,"```sparql
SELECT ?author
WHERE {
  ?book dbo:author ?author ;
        rdfs:label ""Harry Potter""@en .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
158,Give me all writers that won the Nobel Prize in literature.,"```sparql
SELECT ?writer
WHERE {
  ?writer a dbo:Writer ;
          dbo:award dbr:Nobel_Prize_in_Literature .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
157,Give me English actors starring in Lovesick.,"```sparql
SELECT DISTINCT ?actor
WHERE {
  ?film dbo:starring ?actor .
  ?film dbo:originalTitle ""Lovesick""@en .
  ?actor a dbo:Actor .
  ?actor dbo:nationality dbr:England .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
155,What is the nick name of Baghdad?,"```sparql
SELECT ?nickname
WHERE {
  dbr:Baghdad foaf:nick ?nickname
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
150,In which city was the president of Montenegro born?,"```sparql
SELECT ?cityOfBirth WHERE {
  dbr:President_of_Montenegro dbo:birthPlace ?city .
  ?city dbo:country dbr:Montenegro .
  ?city rdfs:label ?cityOfBirth .
  FILTER(LANG(?cityOfBirth) = """" || LANGMATCHES(LANG(?cityOfBirth), ""en""))
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
149,Which U.S. state has the highest population density?,"```sparql
SELECT ?state ?density
WHERE {
  ?state a dbo:PopulatedPlace ;
         dbo:populationDensity ?density .
}
ORDER BY DESC(?density)
LIMIT 1
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
25,What is the longest river in China?,"```sparql
SELECT ?river ?length
WHERE {
  ?river rdf:type dbo:River .
  ?river dbo:country dbr:China .
  ?river dbo:length ?length .
}
ORDER BY DESC(?length)
LIMIT 1
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
143,What is the area code of Berlin?,"SELECT ?areaCode
WHERE {
  dbr:Berlin dbo:areaCode ?areaCode
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
140,How many scientists graduated from an Ivy League university?,"```sparql
SELECT (COUNT(DISTINCT ?scientist) AS ?count)
WHERE {
  ?scientist a dbo:Person ;
             dbo:almaMater ?university .
  ?university dbo:wikiPageWikiLink <http://dbpedia.org/resource/Ivy_League> .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
139,Which professional surfers were born in Australia?,"```sparql
SELECT DISTINCT ?surferName
WHERE {
  ?surfer a dbo:Person ;
          dbo:birthPlace/dbo:country dbr:Australia ;
          rdf:type dbo:Surfer ;
          rdfs:label ?surferName .
  FILTER (langMatches(lang(?surferName), ""en""))
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
137,Give me all Dutch parties.,"```sparql
SELECT ?party
WHERE {
    ?party a dbo:PoliticalParty ;
           rdfs:label ?label .
    FILTER (lang(?label) = 'nl' && langMatches(?label, 'nl'))
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
136,How many moons does Mars have?,"SELECT (COUNT(?moon) AS ?numMoons)
WHERE {
  dbr:Mars dbo:satellites ?moon .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
134,What is Batman's real name?,"SELECT ?realName
WHERE {
  dbr:Batman foaf:name ?realName
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
132,What is Elon Musk famous for?,"SELECT ?person ?knownFor
WHERE {
  ?person dbo:knownFor ?knownFor ;
          foaf:name ""Elon Musk""@en .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
128,Who is the author of WikiLeaks?,"SELECT ?author
WHERE {
  <http://dbpedia.org/resource/WikiLeaks> <http://dbpedia.org/ontology/author> ?author
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
126,Sean Parnell was the governor of which U.S. state?,"```sparql
SELECT ?state
WHERE {
  dbr:Sean_Parnell dbo:governor ?state .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
125,How many years was the Ford Model T manufactured?,"```sparql
SELECT (xsd:integer(?endYear) - xsd:integer(?startYear) AS ?manufacturingYears)
WHERE {
  <http://dbpedia.org/resource/Ford_Model_T> dbo:productionStartYear ?startYear .
  <http://dbpedia.org/resource/Ford_Model_T> dbo:productionEndYear ?endYear .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
124,When was Carlo Giuliani shot?,"```sparql
SELECT ?date
WHERE {
  dbr:Carlo_Giuliani dbo:deathDate ?date
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
123,Give me all animals that are extinct.,"```sparql
SELECT ?animal
WHERE {
  ?animal rdf:type dbo:Animal ;
          dbo:extinct true .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
122,Who was the wife of President Lincoln?,"```sparql
SELECT ?wife
WHERE {
  dbpedia:Abraham_Lincoln dbpedia-owl:spouse ?wife .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
111,How many awards has Bertrand Russell?,"SELECT (COUNT(?award) AS ?count)
WHERE {
  dbr:Bertrand_Russell dbp:awards ?award
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
117,Is Pamela Anderson a vegan?,"```sparql
SELECT ?person ?personName ?diet
WHERE {
  ?person rdf:type dbo:Person ;
          foaf:name ?personName ;
          dbo:diet ?diet .
  FILTER (?personName = ""Pamela Anderson"" && ?diet = dbr:Veganism)
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
59,Which space probes were sent into orbit around the sun?,"```sparql
SELECT DISTINCT ?probe
WHERE {
  ?probe a dbo:SpaceProbe ;
         dbo:orbitingBody dbr:Sun .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
113,Which German cities have more than 250000 inhabitants?,"```sparql
SELECT ?city
WHERE {
  ?city a dbo:City ;
        dbo:country dbr:Germany ;
        dbo:populationTotal ?population .
  FILTER (?population > 250000)
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
104,Who is the daughter of Robert Kennedy married to?,"```sparql
SELECT ?spouseName 
WHERE {
  ?robertKennedy dbo:child ?daughter .
  ?daughter dbo:spouse ?spouse .
  ?spouse foaf:name ?spouseName .
  FILTER (?robertKennedy = dbr:Robert_F._Kennedy)
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
10,How many students does the Free University of Amsterdam have?,"SELECT ?numberOfStudents
WHERE {
  dbr:Vrije_Universiteit_Amsterdam dbo:numberOfStudents ?numberOfStudents
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
1,What is the revenue of IBM?,"SELECT ?revenue
WHERE {
  dbpedia:IBM dbo:revenue ?revenue
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
178,How many James Bond movies do exist?,"```sparql
SELECT (COUNT(?film) AS ?count)
WHERE {
  ?film rdf:type dbo:Film ;
        rdfs:label ?label .
  FILTER regex(?label, ""James Bond"", ""i"")
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
129,Who does the voice of Bart Simpson?,"SELECT ?actor
WHERE {
  dbr:Bart_Simpson dbo:voiceActor ?actor
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
183,Who was Tom Hanks married to?,"```sparql
SELECT ?spouse
WHERE {
  dbpedia:Tom_Hanks dbo:spouse ?spouse .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
181,Through which countries does the Yenisei river flow?,"```sparql
SELECT DISTINCT ?country
WHERE {
  dbr:Yenisei_River dbo:country ?country .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
7,Give me all cars that are produced in Germany.,"```sparql
SELECT ?car
WHERE {
  ?car a dbo:Automobile ;
       dbo:manufacturer/dbo:country dbr:Germany .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
135,When did Michael Jackson die?,"```sparql
SELECT ?deathDate
WHERE {
  dbr:Michael_Jackson dbo:deathDate ?deathDate
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
50,What is the highest volcano in Africa?,"```sparql
SELECT ?volcano ?elevation
WHERE {
  ?volcano rdf:type dbo:Volcano ;
           dbo:locatedInArea dbr:Africa ;
           dbo:elevation ?elevation .
}
ORDER BY DESC(?elevation)
LIMIT 1
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
39,Which poet wrote the most books?,"```sparql
SELECT ?poet (COUNT(?book) AS ?numBooks)
WHERE {
  ?poet a dbo:Writer .
  ?poet dbo:author ?book .
} 
GROUP BY ?poet
ORDER BY DESC(?numBooks)
LIMIT 1
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
83,Give me all gangsters from the prohibition era.,"```sparql
SELECT ?gangster
WHERE {
  ?gangster dbo:occupation ""Gangster"" .
  ?gangster dbo:activeYearsStartYear ?startYear .
  ?gangster dbo:activeYearsEndYear ?endYear .
  FILTER (?startYear >= 1920 && ?endYear <= 1933)
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
71,Give me all spacecrafts that flew to Mars.,"```sparql
SELECT ?spacecraft
WHERE {
  ?spacecraft dbo:ArtificialSatellite ?satellite .
  ?satellite dbp:launched ""Mars"" .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
213,Show me all Czech movies.,"```sparql
SELECT ?movie
WHERE {
  ?movie a dbo:Film ;
         dbo:country dbr:Czech_Republic .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
209,Give me all taikonauts.,"```sparql
SELECT ?taikonaut
WHERE {
  ?taikonaut a <http://dbpedia.org/ontology/Astronaut> ;
             <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Taikonaut> .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
105,Which countries have more than ten volcanoes?,"```sparql
SELECT ?country (COUNT(?volcano) AS ?numVolcanoes)
WHERE {
  ?volcano a dbo:Volcano ;
           dbo:locatedInArea ?country .
}
GROUP BY ?country
HAVING (COUNT(?volcano) > 10)
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
52,Give me all movies with Tom Cruise.,"```sparql
SELECT ?movie
WHERE {
  ?movie a dbo:Film ;
         dbo:starring dbr:Tom_Cruise .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
102,When did Dracula's creator die?,"```sparql
SELECT ?deathDate
WHERE {
  ?creator dbo:birthName ""Bram Stoker"" .
  ?creator dbo:deathDate ?deathDate .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
21,Who created English Wikipedia?,"```sparql
SELECT ?creator
WHERE {
  dbpedia:English_Wikipedia dct:creator ?creator .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
34,Give me all female German chancellors.,"```sparql
SELECT ?chancellor
WHERE {
  ?chancellor a dbo:Chancellor ;
             dbo:birthPlace/dbo:Country dbr:Germany ;
             dbo:gender ""female"" .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
145,Who owns Aldi?,"```sparql
SELECT ?owner
WHERE {
  dbr:Aldi dbo:owner ?owner .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
154,Which books were written by Danielle Steel?,"SELECT ?book
WHERE {
  ?book a dbo:Book ;
        dbo:author dbr:Danielle_Steel .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
198,Who was influenced by Socrates?,"```sparql
SELECT DISTINCT ?influencedBy
WHERE {
  dbr:Socrates dbo:influenced ?influencedBy .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
162,How deep is Lake Chiemsee?,"```sparql
SELECT ?depth
WHERE {
  dbpedia:Lake_Chiemsee dbpedia-owl:maximumDepth ?depth
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
212,Which companies work in the aerospace industry as well as in medicine?,"```sparql
SELECT DISTINCT ?company
WHERE {
  ?company a dbo:Company ;
           dbo:industry dbr:Aerospace_industry, dbr:Medicine .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
96,Which professional surfers were born on the Philippines?,"```sparql
SELECT DISTINCT ?surferName
WHERE {
  ?surfer a dbo:Person ;
          dbo:birthPlace/dbo:country dbr:Philippines ;
          rdf:type dbo:Surfer ;
          rdfs:label ?surferName .
  FILTER (langMatches(lang(?surferName), ""en""))
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
40,Who were the parents of Queen Victoria?,"```sparql
SELECT ?parent
WHERE {
  dbr:Queen_Victoria dbo:parent ?parent .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
79,Are there any castles in the United States?,"```sparql
SELECT DISTINCT ?castle
WHERE {
  ?castle rdf:type dbo:Castle .
  ?castle dbo:country dbr:United_States .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
141,Which languages are spoken in Estonia?,"```sparql
SELECT DISTINCT ?language
WHERE {
  <http://dbpedia.org/resource/Estonia> dbo:language ?language .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
80,Give me a list of all critically endangered birds.,"```sparql
PREFIX dcterms: <http://purl.org/dc/terms/>
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT DISTINCT ?bird
WHERE {
  ?bird a dbo:Bird ;
        dcterms:description ""critically endangered species""@en .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
159,Which countries are connected by the Rhine?,"```sparql
SELECT DISTINCT ?country
WHERE {
  ?river a dbo:River ;
         rdfs:label ""Rhine""@en ;
         dbo:country ?country .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
107,Who was the father of Queen Elizabeth II?,"```sparql
SELECT ?father
WHERE {
  dbr:Elizabeth_II dbo:father ?father .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
163,Give me all chemical elements.,"```sparql
SELECT ?element ?elementLabel
WHERE {
  ?element rdf:type dbo:ChemicalElement .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
211,Give me all American presidents of the last 20 years.,"```sparql
SELECT DISTINCT ?president
WHERE {
  ?president a dbo:President ;
            dbo:office ?office .
  FILTER regex(?office, ""President of the United States"") .
  FILTER (?office >= ""1996-01-20""^^xsd:date)
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
51,When is the movie Worst Case Scenario going to be in cinemas in the Netherlands?,"```sparql
SELECT ?releaseDate
WHERE {
  ?movie dbpedia-owl:releaseDate ?releaseDate .
  ?movie dbpedia-owl:country dbpedia:Netherlands .
  ?movie rdfs:label ""Worst Case Scenario""@en .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
144,Whom did Lance Bass marry?,"```sparql
SELECT ?spouse
WHERE {
  dbr:Lance_Bass dbo:spouse ?spouse
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
167,Which subsidiary of TUI Travel serves both Glasgow and Dublin?,"```sparql
SELECT ?subsidiary
WHERE {
  ?subsidiary a dbo:Airline ;
              dbo:targetAirport/dbo:city dbr:Glasgow, dbr:Dublin .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
131,What languages are spoken in Pakistan?,"```sparql
SELECT DISTINCT ?language
WHERE {
  <http://dbpedia.org/resource/Pakistan> <http://dbpedia.org/ontology/language> ?language .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
120,Who is the daughter of Bill Clinton married to?,"```sparql
SELECT ?spouseName 
WHERE {
  ?daughter dbo:child dbr:Bill_Clinton .
  ?daughter dbo:spouse ?spouse .
  ?spouse foaf:name ?spouseName .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
164,Who was on the Apollo 11 mission?,"SELECT ?person
WHERE {
  dbr:Apollo_11 dbo:crewMember ?person
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
88,What is the wavelength of Indigo?,"```sparql
SELECT ?wavelength
WHERE {
  dbo:Indigo dbo:wavelength ?wavelength
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
151,Give me all B-sides of the Ramones.,"```sparql
SELECT ?bSide
WHERE {
  ?song dbo:bSide ?bSide .
  ?song dbo:artist dbr:Ramones .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
63,Who was called Scarface?,"```sparql
SELECT ?person
WHERE {
  ?person dbo:alias ""Scarface""@en .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
27,Which rivers flow into the North Sea?,"```sparql
SELECT DISTINCT ?river ?riverName
WHERE {
  ?river dbo:inflow <http://dbpedia.org/resource/North_Sea> .
  ?river rdfs:label ?riverName .
  FILTER (lang(?riverName) = 'en')
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
156,Where is Fort Knox located?,"```sparql
SELECT ?location
WHERE {
  dbr:Fort_Knox dbo:location ?location
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
207,Which daughters of British earls died at the same place they were born at?,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?daughter ?birthPlace ?deathPlace
WHERE {
  ?daughter a dbo:Person ;
            dbo:birthPlace ?birthPlace ;
            dbo:deathPlace ?deathPlace .
  ?earl a dbo:Noble ;
        dbo:child ?daughter .
  ?daughter dbo:deathPlace ?deathPlace .
  ?daughter dbo:birthPlace ?birthPlace .
  FILTER(?birthPlace = ?deathPlace)
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
24,How many emperors did China have?,"```sparql
SELECT (COUNT(?emperor) AS ?count)
WHERE {
  ?emperor a dbo:Emperor .
  ?emperor dbo:country dbr:China .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
133,What are the names of the Teenage Mutant Ninja Turtles?,"```sparql
SELECT ?name
WHERE {
  ?turtle rdf:type dbo:FictionalCharacter ;
          rdfs:label ?name .
  FILTER regex(?name, ""Teenage Mutant Ninja Turtle"", ""i"")
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
103,Where does Piccadilly start?,"```sparql
SELECT ?startPoint
WHERE {
  dbr:Piccadilly_Line dbo:routeStart ?startPoint
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
165,What is the name of the university where Obama's wife studied?,"```sparql
SELECT ?universityName
WHERE {
  ?person dbo:spouse dbr:Michelle_Obama .
  ?person dbo:almaMater ?university .
  ?university rdfs:label ?universityName .
  FILTER(LANG(?universityName) = 'en')
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
108,When did Paraguay proclaim its independence?,"```sparql
SELECT ?date
WHERE {
  dbr:Paraguay dbo:foundingDate ?date
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
15,How short is the shortest active NBA player?,"```sparql
SELECT ?player ?height
WHERE {
  ?player a dbo:BasketballPlayer ;
          dbo:height ?height .
  FILTER NOT EXISTS { ?player dbo:height [] }
}
ORDER BY ?height
LIMIT 1
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
45,Where did Abraham Lincoln die?,"```sparql
SELECT ?place
WHERE {
  dbr:Abraham_Lincoln dbo:deathPlace ?place
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
82,When was Jack Wolfskin founded?,"```sparql
SELECT ?date
WHERE {
  dbr:Jack_Wolfskin dbo:foundingYear ?date
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
9,In which city is the headquarter of Air China?,"```sparql
SELECT ?city WHERE {
  ?airline a dbo:Airline ;
           dbo:headquarter ?hq ;
           rdfs:label ""Air China""@en .
  ?hq dbo:location ?city .
  ?city a dbo:City .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
201,What is the founding year of the brewery that produces Pilsner Urquell?,"```sparql
SELECT ?foundingYear WHERE {
  ?brewery dbo:product dbr:Pilsner_Urquell ;
           dbo:foundingYear ?foundingYear .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
171,When did the Boston Tea Party take place?,"SELECT ?date
WHERE {
  dbr:Boston_Tea_Party dbo:date ?date
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
182,Which animals are critically endangered?,"```sparql
SELECT DISTINCT ?animal
WHERE {
  ?animal rdf:type dbo:Animal ;
         dbo:conservationStatus dbr:Critically_Endangered .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
13,Which politicians were married to a German?,"```sparql
SELECT DISTINCT ?politician
WHERE {
  ?politician a dbo:Person ;
              dbo:spouse ?spouse .
  ?spouse dbo:birthPlace dbr:Germany .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
114,How big is the earth's diameter?,"```sparql
SELECT ?diameter
WHERE {
  dbr:Earth dbo:diameter ?diameter
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
92,Is the wife of President Obama called Michelle?,"```sparql
SELECT ?wife
WHERE {
  dbpedia:Barack_Obama dbpedia-owl:spouse ?wife .
  FILTER (?wife = dbpedia:Michelle_Obama)
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
194,Which U.S. state has the abbreviation MN?,"SELECT ?state
WHERE {
  ?state dbp:postalabbreviation ""MN""@en .
  ?state a dbo:State .
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
175,When did Muhammad die?,"SELECT ?deathDate
WHERE {
  dbr:Muhammad dbo:deathDate ?deathDate
}",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
26,What is the atmosphere of the Moon composed of?,"```sparql
SELECT ?composition
WHERE {
  dbr:Moon dbp:atmosphereComposition ?composition
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
60,Who is the governor of Texas?,"```sparql
SELECT ?governor
WHERE {
  ?state a dbo:Place ;
         dbo:governor ?governor ;
         foaf:name ""Texas""@en .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
110,Which movies did Kurosawa direct?,"```sparql
SELECT ?movie
WHERE {
  ?movie dbo:director dbr:Akira_Kurosawa .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
206,What was the name of the famous battle in 1836 in San Antonio?,"```sparql
SELECT ?battleName
WHERE {
  ?battle dbo:date ""1836"" .
  ?battle rdfs:label ?battleName .
  FILTER regex(?battleName, ""San Antonio"", ""i"")
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
97,Give me the official websites of actors of the television show Charmed.,"```sparql
SELECT DISTINCT ?actor ?actorName ?officialWebsite
WHERE {
  ?actor a dbo:Person ;
         foaf:name ?actorName ;
         dbo:starring/dbo:televisionShow dbr:Charmed ;
         foaf:homepage ?officialWebsite .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
20,How many calories does a baguette have?,"```sparql
SELECT ?calories
WHERE {
  dbr:Baguette dbo:calories ?calories
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
169,Give me all libraries established before 1400.,"```sparql
SELECT ?library ?name ?establishedYear
WHERE {
  ?library a dbo:Library ;
           rdfs:label ?name ;
           dbp:established ?establishedYear .
  FILTER (?establishedYear < ""1400""^^xsd:gYear)
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
38,Give me all Frisian islands that belong to the Netherlands.,"```sparql
SELECT ?island
WHERE {
  ?island rdf:type dbo:Island .
  ?island dbo:country dbr:Netherlands .
  FILTER regex(str(?island), ""Frisian"", ""i"")
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
192,Which museum exhibits The Scream by Munch?,"```sparql
SELECT ?museum
WHERE {
  ?artwork dbo:author dbr:Edvard_Munch ;
           rdfs:label ""The Scream""@en .
  ?museum dbo:exhibition ?artwork .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
78,When was the De Beers company founded?,"```sparql
SELECT ?foundingYear
WHERE {
  dbr:De_Beers dbo:foundingYear ?foundingYear
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
19,Who became president after JFK died?,"```sparql
SELECT ?successor
WHERE {
  dbr:John_F._Kennedy dbo:succeededBy ?successor .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
190,Who are the parents of the wife of Juan Carlos I?,"```sparql
SELECT ?parentName
WHERE {
  ?juan a dbo:Person ;
        foaf:name ""Juan Carlos I"" .
  ?juan dbo:spouse ?wife .
  ?wife dbo:parent ?parent .
  ?parent foaf:name ?parentName .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
174,Who is the novelist of the work a song of ice and fire?,"```sparql
SELECT ?novelist
WHERE {
  ?work dbo:author ?novelist .
  ?work rdfs:label ""A Song of Ice and Fire""@en .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
189,In which studio did the Beatles record their first album?,"```sparql
SELECT ?studio
WHERE {
  ?album a dbo:Album ;
         dbo:artist dbr:The_Beatles ;
         dbo:recordLabel ?studio .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
152,Which beer brewing companies are located in North-Rhine Westphalia?,"```sparql
SELECT DISTINCT ?company
WHERE {
  ?company a dbo:Company ;
           dbo:industry dbr:Beer_brewing ;
           dbo:location dbr:North_Rhine-Westphalia .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
94,When did princess Diana die?,"```sparql
SELECT ?date
WHERE {
  dbr:Diana,_Princess_of_Wales dbo:deathDate ?date
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
8,Who founded Intel?,"```sparql
SELECT ?founder
WHERE {
  dbr:Intel dbo:founder ?founder .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
95,Who is the youngest player in the Premier League?,"```sparql
SELECT ?player ?birthdate
WHERE {
    ?player a dbo:SoccerPlayer .
    ?player dbo:birthDate ?birthdate .
    ?player dbo:league dbr:Premier_League .
}
ORDER BY ?birthdate
LIMIT 1
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
119,Which instruments does Cat Stevens play?,"```sparql
SELECT ?instrument
WHERE {
  dbr:Cat_Stevens dbo:instrument ?instrument
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
115,How many rivers and lakes are in South Carolina?,"```sparql
SELECT (COUNT(?river) AS ?numRivers) (COUNT(?lake) AS ?numLakes)
WHERE {
  ?river a dbo:River ;
         dbo:country dbr:South_Carolina .
  
  ?lake a dbo:Lake ;
        dbo:country dbr:South_Carolina .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
116,Who was called Rodzilla?,"```sparql
SELECT ?person
WHERE {
  ?person foaf:nick ""Rodzilla""@en .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
138,Give me the capitals of all countries in Africa.,"```sparql
SELECT ?country ?capital
WHERE {
  ?country a dbo:Country ;
           dbo:capital ?capital ;
           dct:subject dbc:Countries_in_Africa .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
177,Which bridges are of the same type as the Manhattan Bridge?,"```sparql
SELECT DISTINCT ?bridge ?type
WHERE {
  ?bridge a dbo:Bridge ;
          dbo:bridgeType ?type .
  FILTER (?type = ""Manhattan Bridge"")
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
101,How many companies were founded by the founder of Facebook?,"```sparql
SELECT (COUNT(?company) AS ?count)
WHERE {
  ?company dbo:founder dbr:Mark_Zuckerberg .
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
14,Show me hiking trails in the Grand Canyon where there's no danger of flash floods.,"```sparql
SELECT DISTINCT ?trail
WHERE {
  ?trail a dbo:Trail ;
         dbo:location dbr:Grand_Canyon ;
         dbo:hazards ?hazard .
  FILTER NOT EXISTS { ?hazard dbo:Disease dbr:Flash_flood }
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
87,Which book has the most pages?,"```sparql
SELECT ?book ?title ?pages
WHERE {
  ?book a dbo:Book ;
        rdfs:label ?title ;
        dbo:numberOfPages ?pages .
}
ORDER BY DESC(?pages)
LIMIT 1
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
148,What is the largest state in the United States?,"```sparql
SELECT ?state ?area
WHERE {
  ?state a dbo:State ;
         dbo:areaTotal ?area .
  ?state dbo:country dbr:United_States .
}
ORDER BY DESC(?area)
LIMIT 1
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
43,Give me the websites of companies with more than 500000 employees.,"```sparql
SELECT DISTINCT ?company ?website
WHERE {
  ?company dbo:numberOfEmployees ?employees .
  ?company foaf:homepage ?website .
  FILTER (?employees > 500000)
}
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
179,What were the names of the three ships by Columbus?,"```sparql
SELECT ?shipName
WHERE {
  ?ship dct:subject dbc:Christopher_Columbus.
  ?ship rdfs:label ?shipName.
} LIMIT 3
```",You are a system which creates SPARQL queries for DBPEDIA from 2016-10 from natural language user questions. You answer just with SPARQL queries and nothing else.
99,What is the time zone of Salt Lake City?,"```sparql
SELECT ?timeZone
WHERE {
  dbr:Salt_Lake_City dbo:timeZone ?timeZone
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
98,Who killed Caesar?,"```sparql
SELECT ?killer
WHERE {
  dbpedia:Julius_Caesar dbo:deathCause ?deathCause .
  ?deathCause rdfs:label ""assassination"" .
  dbpedia:Julius_Caesar dbo:assassination ?killer .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
86,What is the highest mountain in Germany?,"```sparql
SELECT ?mountain ?height
WHERE {
  ?mountain rdf:type dbo:Mountain ;
           dbo:country dbr:Germany ;
           dbo:elevation ?height .
}
ORDER BY DESC(?height)
LIMIT 1
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
84,Which American presidents were in office during the Vietnam War?,"```sparql
SELECT DISTINCT ?president
WHERE {
  ?president a dbo:President ;
            dbo:office/dbo:commander ?event .
  ?event dbo:wikiPageID 2090 .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
81,Butch Otter is the governor of which U.S. state?,"```sparql
SELECT ?state
WHERE {
  dbpedia:Butch_Otter dbp:governor ?state .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
73,How many gold medals did Michael Phelps win at the 2008 Olympics?,"```sparql
SELECT (COUNT(?goldMedal) AS ?totalGoldMedals)
WHERE {
  ?athlete dbo:goldMedalist ?goldMedal .
  ?goldMedal dbo:goldMedalCompetition ?competition .
  ?competition dbo:olympics <http://dbpedia.org/resource/2008_Summer_Olympics> .
  FILTER(?athlete = <http://dbpedia.org/resource/Michael_Phelps>)
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
66,Which artists were born on the same date as Rachel Stevens?,"```sparql
SELECT DISTINCT ?artist ?birthDate
WHERE {
  ?artist a dbo:Person ;
          dbo:birthDate ?birthDate .
  FILTER (?birthDate = ""1978-04-09""^^xsd:date)
  FILTER (?artist != dbr:Rachel_Stevens)
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
64,What is the profession of Frank Herbert?,"```sparql
SELECT ?profession
WHERE {
  dbpedia:Frank_Herbert dbpedia-owl:profession ?profession
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
6,Are Taiko some kind of Japanese musical instrument?,"```sparql
SELECT DISTINCT ?instrument
WHERE {
  ?instrument rdf:type dbo:MusicalInstrument ;
              rdfs:label ?label .
  FILTER regex(?label, ""Taiko"", ""i"")
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
56,How many seats does the home stadium of FC Porto have?,"```sparql
SELECT ?seats
WHERE {
  dbr:FC_Porto dbo:ground ?stadium .
  ?stadium dbo:capacity ?seats
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
49,Which frequent flyer program has the most airlines?,"```sparql
SELECT ?program (COUNT(?airline) AS ?numAirlines)
WHERE {
  ?airline dbo:frequentFlyer ?program .
}
GROUP BY ?program
ORDER BY DESC(?numAirlines)
LIMIT 1
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
44,Which European countries have a constitutional monarchy?,"```sparql
SELECT DISTINCT ?country
WHERE {
  ?country a dbo:Country ;
           dbo:governmentType dbr:Constitutional_monarchy ;
           dbo:continent dbr:Europe .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
42,Which countries have places with more than two caves?,"```sparql
SELECT DISTINCT ?country
WHERE {
  ?place rdf:type dbo:Place .
  ?place dbo:location ?country .
  ?place rdf:type dbo:Cave .
}
GROUP BY ?country
HAVING (COUNT(?place) > 2)
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
4,"Which airports are located in California, USA?","```sparql
SELECT ?airport
WHERE {
  ?airport a dbo:Airport ;
          dbo:location dbr:California .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
37,What are the nicknames of San Francisco?,"```sparql
SELECT ?nickname
WHERE {
  dbr:San_Francisco dbp:nickname ?nickname
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
32,What is Angela Merkelâ€™s birth name?,"```sparql
SELECT ?birthName
WHERE {
  dbr:Angela_Merkel dbp:birthName ?birthName
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
31,Who is the mayor of Berlin?,"```sparql
SELECT ?mayor
WHERE {
  ?city dbo:leader ?mayor ;
        rdfs:label ""Berlin""@en .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
29,Which countries in the European Union adopted the Euro?,"```sparql
SELECT ?country
WHERE {
  ?country a dbo:Country ;
           dbo:currency dbr:Euro .
  FILTER regex(str(?country), ""European_Union"", ""i"")
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
23,Which software has been published by Mean Hamster Software?,"```sparql
SELECT DISTINCT ?software
WHERE {
  ?software dct:publisher <http://dbpedia.org/resource/Mean_Hamster_Software> .
  ?software rdf:type <http://dbpedia.org/ontology/Software> .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
68,Which country was Bill Gates born in?,"```sparql
SELECT ?countryOfBirth
WHERE {
  ?person dbpedia-owl:birthPlace ?countryOfBirth .
  FILTER (?person = dbpedia:Bill_Gates)
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
22,How many grand-children did Jacques Cousteau have?,"```sparql
SELECT (COUNT(?grandchild) AS ?count)
WHERE {
  dbr:Jacques_Cousteau dbo:child/dbo:child ?grandchild .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
214,Give me all professional skateboarders from Sweden.,"```sparql
SELECT ?skateboarder
WHERE {
  ?skateboarder a dbo:Skateboarder ;
                dbo:birthPlace dbr:Sweden ;
                dbo:occupation dbr:Professional_skateboarder .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
210,Which monarchs of the United Kingdom were married to a German?,"```sparql
SELECT DISTINCT ?monarch
WHERE {
  ?monarch a dbo:Monarch ;
           dbo:spouse ?spouse .
  ?spouse dbo:birthPlace ?birthPlace .
  ?birthPlace dbo:country dbr:Germany .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
199,Give me all Argentine films.,"```sparql
SELECT ?film
WHERE {
  ?film a dbo:Film ;
        dct:subject dbc:Argentine_films .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
203,How did Michael Jackson die?,"```sparql
SELECT ?causeOfDeath
WHERE {
  dbpedia:Michael_Jackson dbpedia-owl:deathCause ?causeOfDeath
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
197,Which U.S. state has been admitted latest?,"```sparql
SELECT ?state ?admissionDate
WHERE {
  ?state a dbo:PopulatedPlace ;
         dbo:country dbr:United_States ;
         dbp:admittancedate ?admissionDate .
}
ORDER BY DESC(?admissionDate)
LIMIT 1
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
196,Which classes does the Millepede belong to?,"```sparql
SELECT DISTINCT ?class
WHERE {
  dbr:Millepede dct:subject ?class .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
188,Give me the homepage of Forbes.,"```sparql
SELECT ?homepage
WHERE {
  <http://dbpedia.org/resource/Forbes> foaf:homepage ?homepage
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
187,Who is the husband of Amanda Palmer?,"```sparql
SELECT ?husband
WHERE {
  ?person dbo:spouse ?husband .
  FILTER (?person = dbr:Amanda_Palmer)
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
176,Who painted The Storm on the Sea of Galilee?,"```sparql
SELECT ?painter
WHERE {
  ?painting dbo:author ?painter ;
           rdfs:label ""The Storm on the Sea of Galilee""@en .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
62,What is the highest place of Karakoram?,"```sparql
SELECT ?place ?elevation
WHERE {
  ?place rdf:type dbo:Mountain ;
         dbp:highest ?elevation .
  FILTER regex(str(?place), ""Karakoram"", ""i"")
}
ORDER BY DESC(?elevation)
LIMIT 1
```
",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
173,When did Finland join the EU?,"```sparql
SELECT ?date
WHERE {
  dbr:Finland dbo:accessioneudate ?date
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
168,Which actors play in Big Bang Theory?,"```sparql
SELECT ?actor
WHERE {
  ?film dbo:starring ?actor .
  ?film rdfs:label ""The Big Bang Theory""@en .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
166,Which computer scientist won an oscar?,"```sparql
SELECT ?scientist ?award
WHERE {
  ?scientist a dbo:Scientist .
  ?scientist dbo:award ?award .
  ?award a dbo:Award .
  ?award dbo:award dbr:Academy_Award_for_Technical_Achievement .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
160,Who wrote Harry Potter?,"```sparql
SELECT ?author
WHERE {
  ?book dbo:author ?author ;
        rdfs:label ""Harry Potter""@en .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
158,Give me all writers that won the Nobel Prize in literature.,"```sparql
SELECT DISTINCT ?writer ?name
WHERE {
  ?writer a dbo:Writer ;
          dbo:award dbr:Nobel_Prize_in_Literature ;
          foaf:name ?name .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
157,Give me English actors starring in Lovesick.,"```sparql
SELECT DISTINCT ?actor
WHERE {
  ?film dbo:starring ?actor ;
       rdfs:label ""Lovesick""@en .
  ?actor a dbo:Actor ;
         dbo:nationality dbr:England .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
155,What is the nick name of Baghdad?,"```sparql
SELECT ?nickname
WHERE {
  dbr:Baghdad foaf:nick ?nickname
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
150,In which city was the president of Montenegro born?,"```sparql
SELECT ?cityOfBirth WHERE {
  ?president a dbo:President ;
             dbo:birthPlace ?city .
  ?city dbo:isPartOf* ?cityOfBirth .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
149,Which U.S. state has the highest population density?,"```sparql
SELECT ?state ?populationDensity
WHERE {
  ?state a dbo:State ;
         dbo:populationDensity ?populationDensity .
}
ORDER BY DESC(?populationDensity)
LIMIT 1
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
25,What is the longest river in China?,"```sparql
SELECT ?river ?length
WHERE {
  ?river a dbo:River ;
         dbo:country dbr:China ;
         dbo:length ?length .
}
ORDER BY DESC(?length)
LIMIT 1
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
143,What is the area code of Berlin?,"```sparql
SELECT ?areaCode
WHERE {
  dbr:Berlin dbo:areaCode ?areaCode
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
140,How many scientists graduated from an Ivy League university?,"```sparql
SELECT (COUNT(DISTINCT ?scientist) AS ?countScientists)
WHERE {
  ?scientist a dbo:Person ;
             dbo:almaMater ?university .
  ?university dbo:universityOf ?ivyLeague .
  FILTER regex(str(?ivyLeague), ""Ivy_League"")
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
139,Which professional surfers were born in Australia?,"```sparql
SELECT DISTINCT ?surferName
WHERE {
  ?surfer a dbo:Person ;
          dbo:birthPlace/dbo:country dbr:Australia ;
          rdf:type dbo:Surfer ;
          rdfs:label ?surferName .
  FILTER (lang(?surferName) = 'en')
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
137,Give me all Dutch parties.,"```sparql
SELECT ?party
WHERE {
  ?party a dbo:PoliticalParty ;
        rdfs:label ?label .
  FILTER (langMatches(lang(?label), ""nl""))
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
136,How many moons does Mars have?,"```sparql
SELECT ?moonCount
WHERE {
  dbr:Mars dbp:satellites ?moonCount
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
134,What is Batman's real name?,"```sparql
SELECT ?realName
WHERE {
  dbr:Batman foaf:name ?realName
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
132,What is Elon Musk famous for?,"```sparql
SELECT ?person ?knownFor
WHERE {
  ?person dbo:knownFor ?knownFor ;
          rdf:type dbo:Person ;
          foaf:name ""Elon Musk""@en .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
128,Who is the author of WikiLeaks?,"```sparql
SELECT ?author
WHERE {
  ?wikiPage dbpedia-owl:wikiPageRedirects dbpedia:WikiLeaks ;
            dbpedia-owl:author ?author .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
126,Sean Parnell was the governor of which U.S. state?,"```sparql
SELECT ?state
WHERE {
  dbpedia:Sean_Parnell dbo:governor ?state .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
125,How many years was the Ford Model T manufactured?,"```sparql
SELECT (xsd:integer(?endYear) - xsd:integer(?startYear) AS ?manufacturingYears)
WHERE {
  <http://dbpedia.org/resource/Ford_Model_T> dbo:productionStartYear ?startYear ;
                                              dbo:productionEndYear ?endYear .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
124,When was Carlo Giuliani shot?,"```sparql
SELECT ?date
WHERE {
  ?person dbo:deathDate ?date .
  ?person foaf:name ""Carlo Giuliani""@en
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
123,Give me all animals that are extinct.,"```sparql
SELECT ?animal
WHERE {
  ?animal rdf:type dbo:Animal ;
          dbo:extinct true .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
122,Who was the wife of President Lincoln?,"```sparql
SELECT ?wife
WHERE {
  <http://dbpedia.org/resource/Abraham_Lincoln> dbpedia-owl:spouse ?wife .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
111,How many awards has Bertrand Russell?,"```sparql
SELECT (COUNT(?award) AS ?numAwards)
WHERE {
  dbr:Bertrand_Russell dbp:awards ?award
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
117,Is Pamela Anderson a vegan?,"```sparql
SELECT ?person ?personLabel
WHERE {
  ?person rdf:type dbo:Person ;
          rdfs:label ""Pamela Anderson""@en ;
          dbo:diet dbr:Veganism .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""en"". }
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
59,Which space probes were sent into orbit around the sun?,"```sparql
SELECT DISTINCT ?probe
WHERE {
  ?probe rdf:type dbo:SpaceProbe ;
         dbo:orbitingBody dbr:Sun .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
113,Which German cities have more than 250000 inhabitants?,"```sparql
SELECT DISTINCT ?city
WHERE {
  ?city a dbo:City ;
        dbo:country dbr:Germany ;
        dbo:populationTotal ?pop .
  FILTER (?pop > 250000)
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
104,Who is the daughter of Robert Kennedy married to?,"```sparql
SELECT ?daughter ?spouse
WHERE {
  ?daughter dbo:child <http://dbpedia.org/resource/Robert_F._Kennedy> .
  ?daughter dbo:spouse ?spouse .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
10,How many students does the Free University of Amsterdam have?,"```sparql
SELECT ?numberOfStudents
WHERE {
  dbr:Free_University_of_Amsterdam dbo:numberOfStudents ?numberOfStudents
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
1,What is the revenue of IBM?,"```sparql
SELECT ?revenue
WHERE {
  <http://dbpedia.org/resource/IBM> <http://dbpedia.org/ontology/revenue> ?revenue
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
178,How many James Bond movies do exist?,"```sparql
SELECT (COUNT(?film) AS ?count)
WHERE {
  ?film a dbo:Film ;
        dbo:starring dbr:James_Bond .
}
```
",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
129,Who does the voice of Bart Simpson?,"```sparql
SELECT ?actor
WHERE {
  ?actor dbp:voiceactor dbr:Bart_Simpson.
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
183,Who was Tom Hanks married to?,"```sparql
SELECT ?spouse
WHERE {
  dbr:Tom_Hanks dbo:spouse ?spouse
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
181,Through which countries does the Yenisei river flow?,"```sparql
SELECT DISTINCT ?country
WHERE {
  ?river dbo:riverName ""Yenisei""@en .
  ?river dbo:country ?country .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
7,Give me all cars that are produced in Germany.,"```sparql
SELECT ?car
WHERE {
  ?car a dbo:Automobile ;
       dbo:assembly/dbo:country dbr:Germany .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
135,When did Michael Jackson die?,"```sparql
SELECT ?deathDate
WHERE {
  dbr:Michael_Jackson dbo:deathDate ?deathDate
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
50,What is the highest volcano in Africa?,"```sparql
SELECT ?volcano ?elevation
WHERE {
  ?volcano rdf:type dbo:Volcano ;
           dbo:elevation ?elevation .
  FILTER (?elevation = (SELECT MAX(?e) WHERE { ?v rdf:type dbo:Volcano ; dbo:elevation ?e }))
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
39,Which poet wrote the most books?,"```sparql
SELECT ?poet (COUNT(?book) AS ?numBooks)
WHERE {
  ?poet a dbo:Writer .
  ?poet dbo:author ?book .
} 
GROUP BY ?poet
ORDER BY DESC(?numBooks)
LIMIT 1
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
83,Give me all gangsters from the prohibition era.,"```sparql
SELECT DISTINCT ?gangster
WHERE {
  ?gangster dbo:occupation ""gangster"" .
  ?gangster dbo:birthDate ?birthDate .
  FILTER (?birthDate >= ""1920-01-01""^^xsd:date && ?birthDate <= ""1933-12-05""^^xsd:date)
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
71,Give me all spacecrafts that flew to Mars.,"```sparql
SELECT ?spacecraft
WHERE {
  ?spacecraft dbo:destination dbr:Mars .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
213,Show me all Czech movies.,"```sparql
SELECT ?movie
WHERE {
  ?movie a dbo:Film ;
         dbp:country ""Czech Republic""@en .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
209,Give me all taikonauts.,"```sparql
SELECT ?taikonaut
WHERE {
  ?taikonaut rdf:type dbo:Person ;
             dct:subject dbc:Chinese_astronauts .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
105,Which countries have more than ten volcanoes?,"```sparql
SELECT ?country (COUNT(?volcano) AS ?numVolcanoes)
WHERE {
  ?volcano a dbo:Volcano ;
           dbo:locatedInArea ?country .
} 
GROUP BY ?country
HAVING (COUNT(?volcano) > 10)
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
52,Give me all movies with Tom Cruise.,"```sparql
SELECT DISTINCT ?movie
WHERE {
  ?movie a dbo:Film ;
         dbo:starring dbr:Tom_Cruise .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
102,When did Dracula's creator die?,"```sparql
SELECT ?creator ?deathDate
WHERE {
  ?creator a dbo:Person ;
          dbo:birthPlace dbr:Transylvania ;
          dbo:notableWork dbr:Dracula ;
          dbo:deathDate ?deathDate .
}
```
",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
21,Who created English Wikipedia?,"```sparql
SELECT ?creator
WHERE {
  dbpedia-en:English_Wikipedia dct:creator ?creator .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
34,Give me all female German chancellors.,"```sparql
SELECT ?chancellor
WHERE {
  ?chancellor a dbo:Chancellor ;
             dbo:birthPlace dbr:Germany ;
             dbo:gender ""female"" .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
145,Who owns Aldi?,"```sparql
SELECT ?owner
WHERE {
  dbr:Aldi dbo:owner ?owner
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
154,Which books were written by Danielle Steel?,"```sparql
SELECT ?book
WHERE {
  ?author foaf:name ""Danielle Steel""@en .
  ?book dbo:author ?author .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
198,Who was influenced by Socrates?,"```sparql
SELECT DISTINCT ?influencedBy
WHERE {
  ?influencedBy dbo:influencedBy dbr:Socrates .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
162,How deep is Lake Chiemsee?,"```sparql
SELECT ?depth
WHERE {
  dbpedia:Lake_Chiemsee dbpedia-owl:maximumDepth ?depth
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
212,Which companies work in the aerospace industry as well as in medicine?,"```sparql
SELECT DISTINCT ?company
WHERE {
  ?company a dbo:Company ;
           dbo:industry dbr:Aerospace ;
           dbo:industry dbr:Medicine .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
96,Which professional surfers were born on the Philippines?,"```sparql
SELECT DISTINCT ?surferName
WHERE {
  ?surfer a dbo:Person ;
          dbo:birthPlace/dbo:country dbr:Philippines ;
          rdf:type dbo:Surfer ;
          rdfs:label ?surferName .
  FILTER(langMatches(lang(?surferName), ""en""))
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
40,Who were the parents of Queen Victoria?,"```sparql
SELECT ?parent
WHERE {
  dbr:Queen_Victoria dbo:parent ?parent .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
79,Are there any castles in the United States?,"```sparql
SELECT DISTINCT ?castle
WHERE {
  ?castle rdf:type dbo:Castle ;
          dbo:country dbr:United_States .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
141,Which languages are spoken in Estonia?,"```sparql
SELECT DISTINCT ?language
WHERE {
  ?language dbo:spokenIn dbr:Estonia
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
80,Give me a list of all critically endangered birds.,"```sparql
SELECT ?bird
WHERE {
  ?bird rdf:type dbo:Bird ;
        dbo:conservationStatus dbr:Critically_Endangered .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
159,Which countries are connected by the Rhine?,"```sparql
SELECT DISTINCT ?country
WHERE {
  ?river dbo:country ?country .
  ?river rdf:type dbo:River .
  FILTER regex(str(?river), ""Rhine"", ""i"")
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
107,Who was the father of Queen Elizabeth II?,"```sparql
SELECT ?fatherName
WHERE {
  dbr:Elizabeth_II dbo:father ?father .
  ?father foaf:name ?fatherName .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
163,Give me all chemical elements.,"```sparql
SELECT ?element
WHERE {
  ?element rdf:type dbo:ChemicalElement
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
211,Give me all American presidents of the last 20 years.,"```sparql
SELECT DISTINCT ?president
WHERE {
  ?president a dbo:President ;
            dbo:birthDate ?birthDate .
  FILTER (?birthDate > ""1996-01-01""^^xsd:date)
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
51,When is the movie Worst Case Scenario going to be in cinemas in the Netherlands?,"```sparql
SELECT ?movie ?releaseDate
WHERE {
  ?movie rdf:type dbo:Film ;
         foaf:name ""Worst Case Scenario""@en ;
         dbo:country dbr:Netherlands ;
         dbo:releaseDate ?releaseDate .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
144,Whom did Lance Bass marry?,"```sparql
SELECT ?spouse
WHERE {
  dbr:Lance_Bass dbo:spouse ?spouse
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
167,Which subsidiary of TUI Travel serves both Glasgow and Dublin?,"```sparql
SELECT ?subsidiary
WHERE {
  ?subsidiary a dbo:Airline ;
              dbo:targetAirport/dbo:city dbr:Glasgow, dbr:Dublin .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
131,What languages are spoken in Pakistan?,"```sparql
SELECT DISTINCT ?language
WHERE {
  ?country dbo:officialLanguage ?language .
  FILTER (?country = dbr:Pakistan)
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
120,Who is the daughter of Bill Clinton married to?,"```sparql
SELECT ?spouseName
WHERE {
  ?daughter dbo:child dbr:Bill_Clinton ;
           dbo:spouse ?spouse .
  ?spouse foaf:name ?spouseName .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
164,Who was on the Apollo 11 mission?,"```sparql
SELECT ?person
WHERE {
  dbr:Apollo_11 dbo:crewMembers ?person .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
88,What is the wavelength of Indigo?,"```sparql
SELECT ?wavelength
WHERE {
  dbo:Indigo dbo:wavelength ?wavelength
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
151,Give me all B-sides of the Ramones.,"```sparql
SELECT ?bSide
WHERE {
  ?bSide dbo:artist dbr:Ramones ;
         dbo:bSide ?bSideTitle .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
63,Who was called Scarface?,"```sparql
SELECT ?person
WHERE {
  ?person dbo:alias ""Scarface""@en .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
27,Which rivers flow into the North Sea?,"```sparql
SELECT DISTINCT ?river
WHERE {
  ?river dbo:inflow <http://dbpedia.org/resource/North_Sea> .
  ?river a dbo:River .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
156,Where is Fort Knox located?,"```sparql
SELECT ?location
WHERE {
  dbr:Fort_Knox dbo:location ?location
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
207,Which daughters of British earls died at the same place they were born at?,"```sparql
SELECT ?daughter ?birthPlace ?deathPlace
WHERE {
  ?daughter a dbo:Person ;
            dbo:birthPlace ?birthPlace ;
            dbo:deathPlace ?deathPlace .
  ?daughter dbo:parent ?parent .
  ?parent a dbo:Earl .
  FILTER(?birthPlace = ?deathPlace)
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
24,How many emperors did China have?,"```sparql
SELECT (COUNT(?emperor) AS ?count)
WHERE {
  ?emperor a dbo:Emperor ;
           dbo:nationality dbr:China .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
133,What are the names of the Teenage Mutant Ninja Turtles?,"```sparql
SELECT ?name
WHERE {
  ?turtle a dbo:FictionalCharacter ;
          dbo:wikiPageRedirects/dbo:Teenage_Mutant_Ninja_Turtles ;
          foaf:name ?name .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
103,Where does Piccadilly start?,"```sparql
SELECT ?startPoint
WHERE {
  ?road dbo:routeStart ?startPoint ;
       rdfs:label ""Piccadilly""@en .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
165,What is the name of the university where Obama's wife studied?,"```sparql
SELECT ?universityName
WHERE {
  ?person dbo:spouse dbr:Michelle_Obama .
  ?person dbo:almaMater ?university .
  ?university rdfs:label ?universityName .
  FILTER(LANG(?universityName) = 'en')
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
108,When did Paraguay proclaim its independence?,"```sparql
SELECT ?date
WHERE {
  dbr:Paraguay dbo:foundingDate ?date
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
15,How short is the shortest active NBA player?,"```sparql
SELECT ?lexicalEntry ?partOfSpeech ?canonicalForm ?otherForms ?sense ?condition ?propertyDomain ?propertyRange ?reference ?subjectOfProperty ?syntacticBehavior
WHERE {
  ?lexicalEntry rdfs:label ""play""@en ;
               dbo:partOfSpeech ?partOfSpeech ;
               dbo:canonicalForm ?canonicalForm ;
               dbo:otherForms ?otherForms ;
               dbo:sense ?sense ;
               dbo:condition ?condition ;
               dbo:propertyDomain dbo:SoccerClub ;
               dbo:propertyRange dbo:Place ;
               dbo:reference ?reference ;
               dbo:subjectOfProperty ?subjectOfProperty ;
               dbo:syntacticBehavior ?syntacticBehavior .
}
```
",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
45,Where did Abraham Lincoln die?,"```sparql
SELECT ?place WHERE {
  dbr:Abraham_Lincoln dbo:deathPlace ?place
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
82,When was Jack Wolfskin founded?,"```sparql
SELECT ?date
WHERE {
  dbr:Jack_Wolfskin dbo:foundingYear ?date
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
9,In which city is the headquarter of Air China?,"```sparql
SELECT ?city
WHERE {
  dbr:Air_China dbo:headquarter ?hq .
  ?hq dbo:location ?city .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
201,What is the founding year of the brewery that produces Pilsner Urquell?,"```sparql
SELECT ?foundingYear
WHERE {
  ?brewery dbo:product <http://dbpedia.org/resource/Pilsner_Urquell> ;
           dbo:foundingYear ?foundingYear .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
171,When did the Boston Tea Party take place?,"```sparql
SELECT ?date
WHERE {
  dbr:Boston_Tea_Party dbo:date ?date
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
182,Which animals are critically endangered?,"```sparql
SELECT DISTINCT ?animal
WHERE {
  ?animal rdf:type dbo:Animal ;
          dbo:conservationStatus dbr:Critically_Endangered .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
13,Which politicians were married to a German?,"```sparql
SELECT DISTINCT ?politician
WHERE {
  ?politician a dbo:Person ;
              dbo:spouse ?spouse .
  ?spouse dbo:birthPlace ?birthPlace .
  ?birthPlace dbo:country dbr:Germany .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
114,How big is the earth's diameter?,"```sparql
SELECT ?diameter
WHERE {
  dbr:Earth dbo:diameter ?diameter
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
92,Is the wife of President Obama called Michelle?,"```sparql
SELECT ?wifeName
WHERE {
  ?president a dbo:President ;
             foaf:name ""Barack Obama"" .
  ?wife a dbo:Person ;
        dbo:spouse ?president ;
        foaf:name ?wifeName .
  FILTER (regex(?wifeName, ""Michelle"", ""i""))
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
194,Which U.S. state has the abbreviation MN?,"```sparql
SELECT ?state
WHERE {
  ?state dbp:postalabbreviation ""MN""@en .
  ?state a dbo:State .
  ?state dbo:country dbr:United_States .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
175,When did Muhammad die?,"```sparql
SELECT ?deathDate
WHERE {
  dbr:Muhammad dbo:deathDate ?deathDate
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
26,What is the atmosphere of the Moon composed of?,"```sparql
SELECT ?composition
WHERE {
  dbr:Moon dbp:atmosphereComposition ?composition
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
60,Who is the governor of Texas?,"```sparql
SELECT ?governor
WHERE {
  ?state a dbo:Place ;
         dbp:governor ?governor ;
         foaf:name ""Texas""@en .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
110,Which movies did Kurosawa direct?,"```sparql
SELECT ?movie
WHERE {
  ?movie dbo:director dbr:Akira_Kurosawa .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
206,What was the name of the famous battle in 1836 in San Antonio?,"```sparql
SELECT ?battleName
WHERE {
  ?battle dbo:date ""1836""^^xsd:date ;
         rdfs:label ?battleName .
  FILTER(REGEX(?battleName, ""San Antonio"", ""i""))
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
97,Give me the official websites of actors of the television show Charmed.,"```sparql
SELECT DISTINCT ?actor ?actorName ?officialWebsite
WHERE {
  ?charmed dbo:starring ?actor .
  ?actor foaf:name ?actorName .
  ?actor foaf:homepage ?officialWebsite .
  FILTER regex(?actorName, ""Charmed"", ""i"")
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
20,How many calories does a baguette have?,"```sparql
SELECT ?calories
WHERE {
  dbr:Baguette dbp:calories ?calories
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
169,Give me all libraries established before 1400.,"```sparql
SELECT ?library ?name ?establishedYear
WHERE {
  ?library a dbo:Library ;
           dbp:established ?establishedYear .
  FILTER (?establishedYear < ""1400""^^xsd:gYear)
  ?library rdfs:label ?name .
  FILTER (lang(?name) = 'en')
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
38,Give me all Frisian islands that belong to the Netherlands.,"```sparql
SELECT ?island
WHERE {
  ?island rdf:type dbo:Island ;
          dbo:country dbr:Netherlands .
  FILTER regex(str(?island), ""Frisian"", ""i"")
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
192,Which museum exhibits The Scream by Munch?,"```sparql
SELECT ?museum
WHERE {
  ?museum dbo:exhibit dbr:The_Scream_by_Edvard_Munch .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
78,When was the De Beers company founded?,"```sparql
SELECT ?date
WHERE {
  dbr:De_Beers dbo:foundingYear ?date
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
19,Who became president after JFK died?,"```sparql
SELECT ?successor
WHERE {
  ?president dbo:succeededBy ?successor .
  FILTER (?president = dbr:John_F._Kennedy)
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
190,Who are the parents of the wife of Juan Carlos I?,"```sparql
SELECT ?parentName
WHERE {
  ?juanCarlos rdf:type dbo:Person .
  ?juanCarlos foaf:name ""Juan Carlos I"" .
  ?juanCarlos dbo:spouse ?wife .
  ?wife dbo:parent ?parent .
  ?parent foaf:name ?parentName .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
174,Who is the novelist of the work a song of ice and fire?,"```sparql
SELECT ?author
WHERE {
  ?work dbo:author ?author ;
        rdfs:label ""A Song of Ice and Fire""@en .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
189,In which studio did the Beatles record their first album?,"```sparql
SELECT ?studio
WHERE {
  ?album dbo:artist dbr:The_Beatles ;
         dbo:recordLabel ?studio .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
152,Which beer brewing companies are located in North-Rhine Westphalia?,"```sparql
SELECT DISTINCT ?company
WHERE {
  ?company a dbo:Company ;
           dbo:industry dbr:Beer_brewing ;
           dbo:location dbr:North_Rhine-Westphalia .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
94,When did princess Diana die?,"```sparql
SELECT ?deathDate
WHERE {
  dbr:Diana,_Princess_of_Wales dbo:deathDate ?deathDate
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
8,Who founded Intel?,"```sparql
SELECT ?founder
WHERE {
  ?company dbo:companyName ""Intel""@en ;
          dbp:founder ?founder .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
95,Who is the youngest player in the Premier League?,"```sparql
SELECT ?player ?name ?birthdate
WHERE {
  ?player a dbo:Person ;
          dbo:birthDate ?birthdate ;
          dbo:team ?team .
  ?team dbo:league dbr:Premier_League .
}
ORDER BY ASC(?birthdate)
LIMIT 1
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
119,Which instruments does Cat Stevens play?,"```sparql
SELECT ?instrument
WHERE {
  dbr:Cat_Stevens dbo:instrument ?instrument
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
115,How many rivers and lakes are in South Carolina?,"```sparql
SELECT (COUNT(?river) AS ?numRivers) 
WHERE {
  ?river a dbo:River ;
         dbo:country dbr:South_Carolina .
}
```

```sparql
SELECT (COUNT(?lake) AS ?numLakes) 
WHERE {
  ?lake a dbo:Lake ;
         dbo:country dbr:South_Carolina .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
116,Who was called Rodzilla?,"```sparql
SELECT ?person
WHERE {
  ?person foaf:nick ""Rodzilla""@en .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
138,Give me the capitals of all countries in Africa.,"```sparql
SELECT ?country ?capital
WHERE {
  ?country a dbo:Country ;
           dbo:capital ?capital ;
           dct:subject dbc:Countries_in_Africa .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
177,Which bridges are of the same type as the Manhattan Bridge?,"```sparql
SELECT ?bridge ?type
WHERE {
  ?bridge a dbo:Bridge ;
          dbo:bridgeType ?type .
  FILTER EXISTS {
    ?manhattanBridge a dbo:Bridge ;
                     dbo:bridgeType ?manhattanType .
    FILTER (?manhattanType = ?type)
  }
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
101,How many companies were founded by the founder of Facebook?,"```sparql
SELECT (COUNT(?company) AS ?count)
WHERE {
  ?company dbo:foundedBy dbr:Mark_Zuckerberg .
  ?company a dbo:Company .
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
14,Show me hiking trails in the Grand Canyon where there's no danger of flash floods.,"```sparql
SELECT DISTINCT ?trail
WHERE {
  ?trail a dbo:HikingTrail ;
         dbp:trailheads ?trailhead ;
         dbp:hazards ?hazard .
  FILTER NOT EXISTS { ?hazard a dbo:FlashFlood }
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
87,Which book has the most pages?,"```sparql
SELECT ?book ?title ?pages
WHERE {
  ?book a dbo:Book ;
        rdfs:label ?title ;
        dbo:numberOfPages ?pages .
}
ORDER BY DESC(?pages)
LIMIT 1
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
148,What is the largest state in the United States?,"```sparql
SELECT ?state ?areaTotal
WHERE {
  ?state a dbo:State ;
         dbo:areaTotal ?areaTotal .
  ?state dbo:country dbr:United_States .
}
ORDER BY DESC(?areaTotal)
LIMIT 1
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
43,Give me the websites of companies with more than 500000 employees.,"```sparql
SELECT DISTINCT ?company ?website
WHERE {
  ?company a dbo:Company ;
           dbo:numberOfEmployees ?employees ;
           foaf:homepage ?website
  FILTER (?employees > 500000)
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
179,What were the names of the three ships by Columbus?,"```sparql
SELECT ?shipName
WHERE {
  ?ship a dbo:Ship ;
        rdfs:label ?shipName .
  FILTER regex(?shipName, ""Columbus"", ""i"")
}
```",Generate SPARQL queries from user questions for DBpedia from October 2016. Answer solely with SPARQL queries.
99,What is the time zone of Salt Lake City?,"```sparql
SELECT ?timeZone
WHERE {
  dbr:Salt_Lake_City dbo:timeZone ?timeZone
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
98,Who killed Caesar?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?assassin
WHERE {
  dbr:Assassination_of_Julius_Caesar dbo:assassin ?assassin .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
86,What is the highest mountain in Germany?,"```sparql
SELECT ?mountain ?height
WHERE {
  ?mountain rdf:type dbo:Mountain ;
           dbo:country dbr:Germany ;
           dbo:elevation ?height .
}
ORDER BY DESC(?height)
LIMIT 1
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
84,Which American presidents were in office during the Vietnam War?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?president
WHERE {
  ?president dbo:office dbr:Vietnam_War .
  ?president dbo:office ?office .
  ?office dbo:commander ?president .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
81,Butch Otter is the governor of which U.S. state?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?state
WHERE {
  ?person dbo:governor dbp:Butch_Otter ;
          dbo:region ?state .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
73,How many gold medals did Michael Phelps win at the 2008 Olympics?,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT (COUNT(?medal) AS ?count)
WHERE {
  ?person dbo:goldMedalist ?medal .
  ?medal dbo:goldMedal ?goldMedal .
  ?medal dbo:medalCompetition ?competition .
  ?competition dbo:year 2008 .
  FILTER(?person = <http://dbpedia.org/resource/Michael_Phelps>)
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
66,Which artists were born on the same date as Rachel Stevens?,"SELECT DISTINCT ?artist
WHERE {
  ?artist dbo:birthDate ?date .
  FILTER (?date = ""1978-04-09""^^xsd:date)
  FILTER (?artist != dbr:Rachel_Stevens)
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
64,What is the profession of Frank Herbert?,"```sparql
SELECT ?profession
WHERE {
  dbpedia:Frank_Herbert dbpedia-owl:profession ?profession
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
6,Are Taiko some kind of Japanese musical instrument?,"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?instrument
WHERE {
  ?instrument rdf:type dbo:MusicalInstrument ;
             rdfs:label ""Taiko""@en ;
             dbo:origin <http://dbpedia.org/resource/Japan> .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
56,How many seats does the home stadium of FC Porto have?,"```sparql
SELECT ?seats
WHERE {
  ?team rdf:type dbo:SportsClub.
  ?team dbo:ground ?stadium.
  ?stadium dbo:seatingCapacity ?seats.
  FILTER regex(str(?team), ""FC Porto"", ""i"")
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
49,Which frequent flyer program has the most airlines?,"```sparql
SELECT ?program (COUNT(?airline) AS ?numAirlines)
WHERE {
  ?program dbo:frequentFlyer ?airline .
}
GROUP BY ?program
ORDER BY DESC(?numAirlines)
LIMIT 1
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
44,Which European countries have a constitutional monarchy?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?country
WHERE {
  ?country a dbo:Country ;
           dbo:governmentType dbr:Constitutional_monarchy ;
           dbo:continent dbr:Europe .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
42,Which countries have places with more than two caves?,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT DISTINCT ?country
WHERE {
  ?place rdf:type dbo:Place .
  ?place dbo:location ?country .
  ?place rdf:type dbo:Cave .
  {
    SELECT ?country (COUNT(?cave) AS ?numCaves)
    WHERE {
      ?cave rdf:type dbo:Cave .
      ?cave dbo:location ?country .
    }
    GROUP BY ?country
    HAVING (COUNT(?cave) > 2)
  }
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
4,"Which airports are located in California, USA?","```sparql
SELECT ?airportName
WHERE {
  ?airport a dbo:Airport ;
           dbo:location ?city .
  ?city dbo:locatedInArea dbr:California ;
       dbo:locatedInArea dbr:United_States .
  ?airport rdfs:label ?airportName .
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
37,What are the nicknames of San Francisco?,"```sparql
SELECT ?nickname
WHERE {
  dbr:San_Francisco dbo:nickname ?nickname
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
32,What is Angela Merkelâ€™s birth name?,"```sparql
SELECT ?birthName
WHERE {
  dbr:Angela_Merkel dbp:birthName ?birthName
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
31,Who is the mayor of Berlin?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?mayor
WHERE {
  ?city dbo:mayor ?mayor.
  ?city dbo:wikiPageID ?cityID.
  FILTER (?cityID = 446)
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
29,Which countries in the European Union adopted the Euro?,"```sparql
SELECT ?countryName
WHERE {
  ?country rdf:type dbo:Country .
  ?country dbo:currency ?currency .
  ?currency rdf:type dbo:Currency .
  FILTER regex(str(?currency), ""Euro"", ""i"") .
  ?country rdfs:label ?countryName .
  FILTER langMatches(lang(?countryName), ""en"") .
  ?country dbo:location ?location .
  ?location dbo:location dbr:European_Union .
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
23,Which software has been published by Mean Hamster Software?,"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?software
WHERE {
  ?software rdf:type dbo:Software ;
           dbo:developer <http://dbpedia.org/resource/Mean_Hamster_Software> .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
68,Which country was Bill Gates born in?,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?country
WHERE {
  ?person dbo:birthPlace ?country .
  FILTER regex(str(?person), ""Bill Gates"", ""i"") .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
22,How many grand-children did Jacques Cousteau have?,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT (COUNT(?grandchild) AS ?count)
WHERE {
  dbo:Jacques_Cousteau dbo:child/dbo:child ?grandchild .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
214,Give me all professional skateboarders from Sweden.,"```sparql
SELECT ?skateboarder
WHERE {
  ?skateboarder rdf:type dbo:Skateboarder ;
                dbo:birthPlace dbr:Sweden ;
                dbo:occupation dbr:Professional_skateboarder .
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
210,Which monarchs of the United Kingdom were married to a German?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?monarch
WHERE {
  ?monarch a dbo:Monarch ;
           dbo:spouse ?spouse .
  ?spouse dbo:birthPlace dbr:Germany .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
199,Give me all Argentine films.,"```sparql
SELECT ?film
WHERE {
  ?film rdf:type dbo:Film .
  ?film dct:subject dbc:Argentine_films .
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
203,How did Michael Jackson die?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?causeOfDeath
WHERE {
  dbr:Michael_Jackson dbo:deathCause ?causeOfDeath
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
197,Which U.S. state has been admitted latest?,"```sparql
SELECT ?state ?date
WHERE {
  ?state a dbo:AdministrativeRegion ;
         dbo:admittanceDate ?date .
}
ORDER BY DESC(?date)
LIMIT 1
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
196,Which classes does the Millepede belong to?,"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?class
WHERE {
  dbo:Millepede rdf:type ?class
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
188,Give me the homepage of Forbes.,"PREFIX foaf: <http://xmlns.com/foaf/0.1/>
SELECT ?homepage
WHERE {
  <http://dbpedia.org/resource/Forbes> foaf:homepage ?homepage
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
187,Who is the husband of Amanda Palmer?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?husband
WHERE {
  dbo:Amanda_Palmer dbo:spouse ?husband .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
176,Who painted The Storm on the Sea of Galilee?,"```sparql
SELECT ?painter
WHERE {
  ?painting dbo:author ?painter .
  ?painting rdfs:label ""The Storm on the Sea of Galilee""@en .
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
62,What is the highest place of Karakoram?,"```sparql
SELECT ?highestPlace ?elevation
WHERE {
  ?highestPlace dbo:location <http://dbpedia.org/resource/Karakoram> .
  ?highestPlace dbo:elevation ?elevation .
}
ORDER BY DESC(?elevation)
LIMIT 1
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
173,When did Finland join the EU?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?date
WHERE {
  dbo:Finland dbp:accessioneudate ?date
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
168,Which actors play in Big Bang Theory?,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?actor
WHERE {
  <http://dbpedia.org/resource/Big_Bang_Theory> dbo:starring ?actor
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
166,Which computer scientist won an oscar?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?scientist
WHERE {
  ?scientist a dbo:Scientist .
  ?scientist dbo:award dbr:Academy_Award .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
160,Who wrote Harry Potter?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?author
WHERE {
  ?book dbo:author ?author ;
        dbp:name ""Harry Potter""@en .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
158,Give me all writers that won the Nobel Prize in literature.,"```sparql
SELECT ?writerName
WHERE {
  ?writer rdf:type dbo:Writer .
  ?writer dbo:award dbr:Nobel_Prize_in_Literature .
  ?writer foaf:name ?writerName .
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
157,Give me English actors starring in Lovesick.,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?actor
WHERE {
  ?film dbo:starring ?actor .
  ?film dbo:starring dbr:Lovesick .
  ?actor dbo:nationality dbr:England .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
155,What is the nick name of Baghdad?,"```sparql
SELECT ?nickname
WHERE {
  dbr:Baghdad foaf:nick ?nickname
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
150,In which city was the president of Montenegro born?,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?city WHERE {
  ?president dbo:birthPlace ?city .
  ?president dbo:title ""President of Montenegro"" .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
149,Which U.S. state has the highest population density?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?state
WHERE {
  ?state a dbo:Place ;
         dbo:country <http://dbpedia.org/resource/United_States> ;
         dbp:densityrank ?density .
}
ORDER BY DESC(?density)
LIMIT 1","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
25,What is the longest river in China?,"```sparql
SELECT ?river ?length
WHERE {
  ?river rdf:type dbo:River .
  ?river dbo:country dbr:China .
  ?river dbo:length ?length .
}
ORDER BY DESC(?length)
LIMIT 1
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
143,What is the area code of Berlin?,"```sparql
SELECT ?areaCode
WHERE {
  dbr:Berlin dbo:areaCode ?areaCode
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
140,How many scientists graduated from an Ivy League university?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT (COUNT(?scientist) AS ?count)
WHERE {
  ?scientist dbo:almaMater ?university .
  ?university dbo:university ?ivyLeague .
  FILTER regex(str(?ivyLeague), ""Ivy_League"")
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
139,Which professional surfers were born in Australia?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?surferName
WHERE {
  ?surfer a dbo:Surfer ;
          dbo:birthPlace dbr:Australia ;
          rdf:type dbo:Person ;
          rdfs:label ?surferName .
  FILTER (lang(?surferName) = 'en')
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
137,Give me all Dutch parties.,"```sparql
SELECT ?party
WHERE {
  ?party a dbo:PoliticalParty .
  ?party dbo:country dbr:Netherlands .
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
136,How many moons does Mars have?,"```sparql
SELECT (COUNT(?moon) AS ?numMoons)
WHERE {
  dbr:Mars dbo:satellites ?moon .
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
134,What is Batman's real name?,"```sparql
SELECT ?realName
WHERE {
  dbr:Batman foaf:name ?realName
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
132,What is Elon Musk famous for?,"```sparql
SELECT ?knownFor
WHERE {
  dbr:Elon_Musk dbo:knownFor ?knownFor
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
128,Who is the author of WikiLeaks?,"```sparql
SELECT ?author
WHERE {
  <http://dbpedia.org/resource/WikiLeaks> <http://dbpedia.org/ontology/author> ?author .
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
126,Sean Parnell was the governor of which U.S. state?,"```sparql
SELECT ?state WHERE {
  dbpedia:Sean_Parnell dbp:governor ?state .
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
125,How many years was the Ford Model T manufactured?,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT (xsd:integer(?endYear) - xsd:integer(?startYear) AS ?manufacturingYears)
WHERE {
  dbo:Ford_Model_T dbo:productionStartYear ?startYear .
  dbo:Ford_Model_T dbo:productionEndYear ?endYear .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
124,When was Carlo Giuliani shot?,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?date
WHERE {
  ?person dbo:deathDate ?date .
  FILTER (?person = dbo:Carlo_Giuliani)
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
123,Give me all animals that are extinct.,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?animal
WHERE {
  ?animal rdf:type dbo:Animal ;
          dbo:extinct true .
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
122,Who was the wife of President Lincoln?,"```sparql
SELECT ?wife
WHERE {
  <http://dbpedia.org/resource/Abraham_Lincoln> <http://dbpedia.org/ontology/spouse> ?wife .
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
111,How many awards has Bertrand Russell?,"```sparql
SELECT (COUNT(?award) AS ?count)
WHERE {
  dbr:Bertrand_Russell dbp:awards ?award .
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
117,Is Pamela Anderson a vegan?,"```sparql
SELECT ?person ?personName ?diet
WHERE {
  ?person rdf:type dbo:Person ;
          foaf:name ?personName ;
          dbo:diet ?diet .
  FILTER (?personName = ""Pamela Anderson"" && ?diet = ""Veganism"")
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
59,Which space probes were sent into orbit around the sun?,"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?spaceProbe
WHERE {
  ?spaceProbe rdf:type dbo:SpaceProbe ;
              dbo:orbit <http://dbpedia.org/resource/Sun> .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
113,Which German cities have more than 250000 inhabitants?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
SELECT DISTINCT ?city
WHERE {
  ?city rdf:type dbo:City .
  ?city dbo:country <http://dbpedia.org/resource/Germany> .
  ?city dbo:populationTotal ?population .
  FILTER (?population > 250000)
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
104,Who is the daughter of Robert Kennedy married to?,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?spouse WHERE {
  ?person dbo:child dbo:Robert_Kennedy .
  ?person dbo:spouse ?spouse .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
10,How many students does the Free University of Amsterdam have?,"SELECT ?numberOfStudents
WHERE {
  dbr:Free_University_of_Amsterdam dbo:numberOfStudents ?numberOfStudents
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
1,What is the revenue of IBM?,"```sparql
SELECT ?revenue
WHERE {
  <http://dbpedia.org/resource/IBM> <http://dbpedia.org/property/revenue> ?revenue
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
178,How many James Bond movies do exist?,"```sparql
SELECT (COUNT(?film) AS ?count)
WHERE {
  ?film rdf:type dbo:Film ;
        dct:subject dbc:James_Bond_films .
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
129,Who does the voice of Bart Simpson?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?voiceActor
WHERE {
  dbr:Bart_Simpson dbp:voiceactor ?voiceActor .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
183,Who was Tom Hanks married to?,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?spouse
WHERE {
  <http://dbpedia.org/resource/Tom_Hanks> dbo:spouse ?spouse
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
181,Through which countries does the Yenisei river flow?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?country
WHERE {
    <http://dbpedia.org/resource/Yenisei_River> dbo:country ?country .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
7,Give me all cars that are produced in Germany.,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?car
WHERE {
  ?car a dbo:Automobile ;
       dbo:assembly/dbo:location/dbo:country dbr:Germany .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
135,When did Michael Jackson die?,"```sparql
SELECT ?deathDate
WHERE {
  dbr:Michael_Jackson dbo:deathDate ?deathDate
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
50,What is the highest volcano in Africa?,"```sparql
SELECT ?volcano ?elevation
WHERE {
  ?volcano rdf:type dbo:Volcano .
  ?volcano dbo:elevation ?elevation .
  ?volcano dbo:locatedInArea ?country .
  ?country dbo:continent dbr:Africa .
}
ORDER BY DESC(?elevation)
LIMIT 1
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
39,Which poet wrote the most books?,"```sparql
SELECT ?poet (COUNT(?book) AS ?numBooks)
WHERE {
  ?poet a dbo:Writer .
  ?poet dbo:author ?book .
} 
GROUP BY ?poet
ORDER BY DESC(?numBooks)
LIMIT 1
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
83,Give me all gangsters from the prohibition era.,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT DISTINCT ?gangster
WHERE {
  ?gangster dbo:occupation ""Gangster""@en .
  ?gangster dbo:birthDate ?birthDate .
  FILTER (?birthDate >= ""1920-01-01""^^xsd:date && ?birthDate <= ""1933-12-05""^^xsd:date)
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
71,Give me all spacecrafts that flew to Mars.,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?spacecraft
WHERE {
  ?spacecraft dbo:ArtificialSatellite ?satellite .
  ?satellite dbp:launched ""Mars"" .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
213,Show me all Czech movies.,"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?movie
WHERE {
  ?movie rdf:type dbo:Film .
  ?movie dbo:country <http://dbpedia.org/resource/Czech_Republic> .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
209,Give me all taikonauts.,"```sparql
SELECT ?taikonaut
WHERE {
  ?taikonaut rdf:type dbo:Person .
  ?taikonaut dbo:occupation dbr:Taikonaut .
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
105,Which countries have more than ten volcanoes?,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT DISTINCT ?country WHERE {
  ?volcano rdf:type dbo:Volcano .
  ?volcano dbo:locatedInArea ?country .
  {
    SELECT ?country (COUNT(?volcano) AS ?numVolcanoes) WHERE {
      ?volcano rdf:type dbo:Volcano .
      ?volcano dbo:locatedInArea ?country .
    } GROUP BY ?country
  }
  FILTER (?numVolcanoes > 10)
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
52,Give me all movies with Tom Cruise.,"```sparql
SELECT ?movie
WHERE {
  ?movie rdf:type dbo:Film ;
         dbo:starring dbr:Tom_Cruise .
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
102,When did Dracula's creator die?,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?deathDate
WHERE {
  ?creator dbo:birthPlace <http://dbpedia.org/resource/Bram_Stoker>;
          dbo:deathDate ?deathDate.
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
21,Who created English Wikipedia?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?creator
WHERE {
    ?wiki dbo:language ?language .
    ?wiki dbo:author ?creator .
    FILTER (?language = ""English"")
}
LIMIT 1","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
34,Give me all female German chancellors.,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?chancellor
WHERE {
  ?chancellor a dbo:Person ;
             dbo:nationality ""Germany""@en ;
             dbp:gender ""female""@en ;
             dbo:title ""Chancellor""@en .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
145,Who owns Aldi?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?owner
WHERE {
  dbr:Aldi dbo:owner ?owner
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
154,Which books were written by Danielle Steel?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?book
WHERE {
  ?author foaf:name ""Danielle Steel""@en .
  ?book dbo:author ?author .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
198,Who was influenced by Socrates?,"```sparql
SELECT DISTINCT ?influencedBy
WHERE {
  dbr:Socrates dbo:influenced ?influencedBy
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
162,How deep is Lake Chiemsee?,"```sparql
SELECT ?depth
WHERE {
  <http://dbpedia.org/resource/Lake_Chiemsee> <http://dbpedia.org/ontology/maxDepth> ?depth
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
212,Which companies work in the aerospace industry as well as in medicine?,"```sparql
SELECT DISTINCT ?company
WHERE {
  ?company dbo:industry dbr:Aerospace_industry ;
           dbo:industry dbr:Medicine.
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
96,Which professional surfers were born on the Philippines?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?surferName
WHERE {
  ?surfer a dbo:Surfer ;
          dbo:birthPlace dbr:Philippines ;
          foaf:name ?surferName .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
40,Who were the parents of Queen Victoria?,"```sparql
SELECT ?parent
WHERE {
  dbr:Queen_Victoria dbo:parent ?parent .
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
79,Are there any castles in the United States?,"```sparql
SELECT DISTINCT ?castle
WHERE {
  ?castle rdf:type dbo:Castle .
  ?castle dbo:country dbr:United_States .
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
141,Which languages are spoken in Estonia?,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT DISTINCT ?language
WHERE {
  ?language dbo:spokenIn dbr:Estonia
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
80,Give me a list of all critically endangered birds.,"```
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?bird
WHERE {
  ?bird rdf:type dbo:Bird ;
        dbo:conservationStatus dbr:Critically_Endangered .
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
159,Which countries are connected by the Rhine?,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT DISTINCT ?country
WHERE {
  ?river dbo:connects ?country .
  ?river dbo:connects <http://dbpedia.org/resource/Rhine> .
  ?country a dbo:Country .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
107,Who was the father of Queen Elizabeth II?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?father
WHERE {
  <http://dbpedia.org/resource/Elizabeth_II> dbp:father ?father .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
163,Give me all chemical elements.,"```sparql
SELECT ?element ?elementLabel
WHERE {
  ?element rdf:type dbo:ChemicalElement .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
211,Give me all American presidents of the last 20 years.,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT DISTINCT ?president
WHERE {
  ?president a dbo:President ;
            dbo:office ?office .
  FILTER regex(?office, ""President of the United States"", ""i"") .
  FILTER (YEAR(now()) - xsd:integer(?office) <= 20)
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
51,When is the movie Worst Case Scenario going to be in cinemas in the Netherlands?,"PREFIX dbpedia-owl: <http://dbpedia.org/ontology/>
PREFIX dbpprop: <http://dbpedia.org/property/>

SELECT ?releaseDate
WHERE {
  ?movie a dbpedia-owl:Film ;
         dbpprop:country ""Netherlands""@en ;
         dbpprop:name ""Worst Case Scenario""@en ;
         dbpprop:releaseDate ?releaseDate .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
144,Whom did Lance Bass marry?,"```sparql
SELECT ?spouseName
WHERE {
  ?person dbo:spouse ?spouse.
  ?person foaf:name ""Lance Bass""@en.
  ?spouse foaf:name ?spouseName.
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
167,Which subsidiary of TUI Travel serves both Glasgow and Dublin?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?subsidiary
WHERE {
  ?subsidiary dbo:subsidiary dbr:TUI_Travel ;
              dbo:destination dbr:Glasgow ;
              dbo:destination dbr:Dublin .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
131,What languages are spoken in Pakistan?,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT DISTINCT ?language
WHERE {
  ?country dbo:officialLanguage ?language .
  FILTER (?country = dbo:Pakistan)
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
120,Who is the daughter of Bill Clinton married to?,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?spouseName 
WHERE {
  ?daughter dbo:child dbo:Bill_Clinton .
  ?daughter dbo:spouse ?spouse .
  ?spouse foaf:name ?spouseName .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
164,Who was on the Apollo 11 mission?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?crewMember
WHERE {
  dbo:Apollo_11 dbp:crewMembers ?crewMember
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
88,What is the wavelength of Indigo?,"```sparql
SELECT ?wavelength
WHERE {
  dbr:Indigo dbo:wavelength ?wavelength
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
151,Give me all B-sides of the Ramones.,"```sparql
SELECT ?bSide
WHERE {
  ?album dbo:artist dbr:Ramones ;
         dbo:bSide ?bSide .
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
63,Who was called Scarface?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?person
WHERE {
  ?person dbo:alias ""Scarface""@en
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
27,Which rivers flow into the North Sea?,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT DISTINCT ?riverName
WHERE {
  ?river dbo:inflow ?sea .
  ?river rdf:type dbo:River .
  ?sea dbo:North_Sea .
  ?river rdfs:label ?riverName .
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
156,Where is Fort Knox located?,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?location
WHERE {
  dbo:Fort_Knox dbo:location ?location
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
207,Which daughters of British earls died at the same place they were born at?,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?daughter ?birthPlace ?deathPlace
WHERE {
  ?daughter a dbo:Person .
  ?daughter dbo:birthPlace ?birthPlace .
  ?daughter dbo:deathPlace ?deathPlace .
  ?daughter dbo:deathPlace ?birthPlace .
  ?daughter dbo:birthPlace ?birthPlace .
  FILTER (?birthPlace = ?deathPlace)
  FILTER regex(str(?daughter), ""daughter of [Bb]ritish earls"", ""i"")
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
24,How many emperors did China have?,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT (COUNT(?emperor) AS ?count)
WHERE {
  ?emperor a dbo:Emperor ;
           dbo:nationality dbr:China .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
133,What are the names of the Teenage Mutant Ninja Turtles?,"PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?name
WHERE {
  ?turtle a dbo:FictionalCharacter ;
          dbo:creator <http://dbpedia.org/resource/Kevin_Eastman> ;
          foaf:name ?name .
  FILTER regex(?name, ""Teenage Mutant Ninja Turtle"", ""i"")
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
103,Where does Piccadilly start?,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?startPoint WHERE {
  ?road dbo:routeStart ?startPoint.
  FILTER regex(?road, ""Piccadilly"", ""i"")
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
165,What is the name of the university where Obama's wife studied?,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?universityName
WHERE {
  ?person dbo:spouse ?wife .
  ?wife dbo:almaMater ?university .
  ?university dbo:type dbo:University .
  FILTER (?person = dbr:Barack_Obama)
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
108,When did Paraguay proclaim its independence?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dct: <http://purl.org/dc/terms/>
SELECT ?date
WHERE {
  dbo:Paraguay dct:subject ?event .
  ?event dct:subject dbc:Independence_days_by_country .
  ?event dbo:date ?date .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
15,How short is the shortest active NBA player?,"```sparql
SELECT ?height
WHERE {
  ?player a dbo:BasketballPlayer ;
          dbo:height ?height ;
          dbo:activeYearsStart ?startYear .
  FILTER (?startYear >= 2016)
}
ORDER BY ASC(?height)
LIMIT 1
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
45,Where did Abraham Lincoln die?,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?place
WHERE {
  dbo:Abraham_Lincoln dbo:deathPlace ?place
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
82,When was Jack Wolfskin founded?,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?foundingYear
WHERE {
  dbr:Jack_Wolfskin dbo:foundingYear ?foundingYear
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
9,In which city is the headquarter of Air China?,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?city WHERE {
  ?airline dbo:headquarter ?hq .
  ?hq dbo:location ?city .
  FILTER regex(str(?airline), ""Air China"", ""i"")
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
201,What is the founding year of the brewery that produces Pilsner Urquell?,"```sparql
SELECT ?foundingYear WHERE {
  ?brewery dbo:produces dbr:Pilsner_Urquell .
  ?brewery dbo:foundingYear ?foundingYear .
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
171,When did the Boston Tea Party take place?,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?date
WHERE {
  ?event a dbo:MilitaryConflict ;
         dbo:date ?date ;
         dbo:location dbr:Boston_Tea_Party .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
182,Which animals are critically endangered?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?animal
WHERE {
  ?animal dbo:wikiPageID ?id .
  ?animal dbo:conservationStatus dbr:Critically_Endangered .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
13,Which politicians were married to a German?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
SELECT DISTINCT ?politician
WHERE {
  ?politician rdf:type dbo:Politician .
  ?politician dbo:spouse ?spouse .
  ?spouse rdf:type dbo:Person .
  ?spouse dbo:birthPlace <http://dbpedia.org/resource/Germany> .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
114,How big is the earth's diameter?,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?diameter
WHERE {
  dbo:Earth dbo:diameter ?diameter
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
92,Is the wife of President Obama called Michelle?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?wife
WHERE {
  dbo:Barack_Obama dbp:spouse ?wife.
  FILTER (?wife = ""Michelle Obama"")
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
194,Which U.S. state has the abbreviation MN?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?state
WHERE {
  ?state dbp:postalabbreviation ""MN"" .
  ?state a dbo:State .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
175,When did Muhammad die?,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?deathDate
WHERE {
  dbo:Muhammad dbo:deathDate ?deathDate
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
26,What is the atmosphere of the Moon composed of?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?composition
WHERE {
  dbo:Moon dbp:atmosphereComposition ?composition
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
60,Who is the governor of Texas?,"```sparql
SELECT ?governor
WHERE {
  ?state a dbo:Place ;
         dbp:governor ?governor ;
         foaf:name ""Texas""@en .
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
110,Which movies did Kurosawa direct?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?movie
WHERE {
  ?movie dbo:director dbr:Akira_Kurosawa .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
206,What was the name of the famous battle in 1836 in San Antonio?,"```sparql
SELECT ?battleName
WHERE {
  ?battle dbo:place <http://dbpedia.org/resource/San_Antonio>.
  ?battle dbo:date ""1836""^^xsd:date.
  ?battle rdfs:label ?battleName.
  FILTER regex(?battleName, ""Battle"", ""i"").
  FILTER regex(?battleName, ""1836"", ""i"").
  FILTER regex(?battleName, ""San Antonio"", ""i"").
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
97,Give me the official websites of actors of the television show Charmed.,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?actor ?website
WHERE {
  ?actor dbo:starring <http://dbpedia.org/resource/Charmed> .
  ?actor foaf:homepage ?website .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
20,How many calories does a baguette have?,"```sparql
SELECT ?calories
WHERE {
  dbr:Baguette dbo:calories ?calories
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
169,Give me all libraries established before 1400.,"```sparql
SELECT ?library
WHERE {
  ?library a dbo:Library ;
           dbp:established ?established .
  FILTER (?established < ""1400-01-01""^^xsd:date)
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
38,Give me all Frisian islands that belong to the Netherlands.,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?island
WHERE {
  ?island dbo:isPartOf <http://dbpedia.org/resource/Netherlands> ;
          rdf:type dbo:Island ;
          rdf:type dbo:Place .
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
192,Which museum exhibits The Scream by Munch?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?museum
WHERE {
  ?museum dbo:exhibits <http://dbpedia.org/resource/The_Scream>
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
78,When was the De Beers company founded?,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?foundingYear
WHERE {
  ?company rdf:type dbo:Company .
  ?company dbo:foundingYear ?foundingYear .
  FILTER regex(str(?company), ""De_Beers"", ""i"")
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
19,Who became president after JFK died?,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?successor
WHERE {
  ?president dbo:deathDate ?date .
  ?president dbo:successor ?successor .
  FILTER (?date > ""1963-11-22""^^xsd:date)
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
190,Who are the parents of the wife of Juan Carlos I?,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?parentName
WHERE {
  ?juanCarlosI dbo:spouse ?juanCarlosIWife .
  ?juanCarlosIWife dbo:parent ?parent .
  ?parent dbo:spouse ?parentSpouse .
  ?parentSpouse dbo:parent ?parentName .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
174,Who is the novelist of the work a song of ice and fire?,"```sparql
SELECT ?author
WHERE {
  ?work dbo:author ?author .
  ?work foaf:name ""A Song of Ice and Fire""@en .
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
189,In which studio did the Beatles record their first album?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?studio
WHERE {
  ?album dbo:artist dbr:The_Beatles ;
         dbo:recordLabel ?studio .
  ?album dbo:releaseDate ?date .
  FILTER (?date = ""1963-03-22""^^xsd:date)
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
152,Which beer brewing companies are located in North-Rhine Westphalia?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?company
WHERE {
  ?company rdf:type dbo:Company ;
           dbo:industry dbr:Beer_brewing ;
           dbo:location dbr:North_Rhine-Westphalia .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
94,When did princess Diana die?,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?date
WHERE {
  ?person dbo:deathDate ?date .
  ?person foaf:name ""Princess Diana""@en .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
8,Who founded Intel?,"```sparql
SELECT ?founder
WHERE {
  dbr:Intel dbo:founder ?founder .
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
95,Who is the youngest player in the Premier League?,"```sparql
SELECT ?player ?name ?birthdate
WHERE {
  ?player a dbo:SoccerPlayer ;
          dbo:birthDate ?birthdate ;
          rdfs:label ?name .
  FILTER NOT EXISTS { ?player dbo:birthDate ?otherBirthdate .
                     FILTER (?otherBirthdate < ?birthdate) }
}
ORDER BY ?birthdate
LIMIT 1
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
119,Which instruments does Cat Stevens play?,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?instrument
WHERE {
  ?artist dbo:instrument ?instrument .
  FILTER (?artist = dbo:Cat_Stevens)
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
115,How many rivers and lakes are in South Carolina?,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT (COUNT(?river) AS ?numRivers) (COUNT(?lake) AS ?numLakes)
WHERE {
  ?river a dbo:River ;
         dbo:country dbr:South_Carolina .
  ?lake a dbo:Lake ;
        dbo:country dbr:South_Carolina .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
116,Who was called Rodzilla?,"```sparql
SELECT ?person WHERE {
  ?person foaf:nick ""Rodzilla""@en .
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
138,Give me the capitals of all countries in Africa.,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?country ?capital
WHERE {
  ?country a dbo:Country ;
           dbo:capital ?capital ;
           dct:subject dbc:Countries_in_Africa .
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
177,Which bridges are of the same type as the Manhattan Bridge?,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?bridge
WHERE {
  ?bridge a dbo:Bridge ;
          dbo:sameAs <http://dbpedia.org/resource/Manhattan_Bridge> .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
101,How many companies were founded by the founder of Facebook?,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT (COUNT(?company) AS ?count)
WHERE {
  ?founder dbo:founded ?company .
  ?founder dbo:wikiPageID 1162 .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
14,Show me hiking trails in the Grand Canyon where there's no danger of flash floods.,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?trail
WHERE {
  ?trail a dbo:Trail ;
         dbp:trailheads ?trailhead ;
         dbp:hazards ?hazard .
  FILTER NOT EXISTS { ?hazard dbp:flashFloods ""true"" }
  FILTER regex(str(?trailhead), ""Grand Canyon"", ""i"")
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
87,Which book has the most pages?,"```sparql
SELECT ?book ?pages
WHERE {
  ?book a dbo:Book .
  ?book dbo:numberOfPages ?pages .
}
ORDER BY DESC(?pages)
LIMIT 1
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
148,What is the largest state in the United States?,"```sparql
SELECT ?state ?areaTotal
WHERE {
  ?state a dbo:State ;
         dbo:areaTotal ?areaTotal .
  ?state dbo:country dbr:United_States .
}
ORDER BY DESC(?areaTotal)
LIMIT 1
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
43,Give me the websites of companies with more than 500000 employees.,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT DISTINCT ?company ?website
WHERE {
  ?company a dbo:Company ;
           dbo:numberOfEmployees ?employees ;
           foaf:homepage ?website .
  FILTER (?employees > 500000)
}
```","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
179,What were the names of the three ships by Columbus?,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?shipName
WHERE {
  ?ship dbo:associatedMusicalArtist <http://dbpedia.org/resource/Christopher_Columbus> ;
        dbo:shipName ?shipName .
}","Develop a system capable of generating SPARQL queries for DBPedia based on user questions in natural language, with a knowledge base updated until October 2016. The system should exclusively respond with SPARQL queries and no additional information."
99,What is the time zone of Salt Lake City?,"```sparql
SELECT ?timezone
WHERE {
  dbr:Salt_Lake_City dbo:timeZone ?timezone
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
98,Who killed Caesar?,"```sparql
SELECT ?assassin
WHERE {
  <http://dbpedia.org/resource/Assassination_of_Julius_Caesar> dbpedia-owl:assassin ?assassin .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
86,What is the highest mountain in Germany?,"```sparql
SELECT ?mountain ?mountainName
WHERE {
  ?mountain rdf:type dbo:Mountain ;
           dbo:country dbr:Germany ;
           rdfs:label ?mountainName .
  FILTER (lang(?mountainName) = 'en')
}
ORDER BY DESC(?mountain)
LIMIT 1
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
84,Which American presidents were in office during the Vietnam War?,"```sparql
SELECT DISTINCT ?presidentName
WHERE {
  ?president a dbo:President ;
             dbo:officeDuring ?office .
  ?office dbo:commander ?presidentName ;
         dbo:timePeriod ?timePeriod .
  FILTER regex(str(?timePeriod), ""Vietnam War"", ""i"")
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
81,Butch Otter is the governor of which U.S. state?,"```sparql
SELECT ?state
WHERE {
  dbr:Butch_Otter dbo:incumbent ?position .
  ?position dbo:incumbents ?governor .
  ?governor dbo:state ?state .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
73,How many gold medals did Michael Phelps win at the 2008 Olympics?,"```sparql
SELECT (COUNT(?goldMedal) AS ?totalGoldMedals)
WHERE {
  ?goldMedal a dbo:OlympicMedal ;
             dbo:goldMedalist dbr:Michael_Phelps ;
             dbo:olympics <http://dbpedia.org/resource/2008_Summer_Olympics> .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
66,Which artists were born on the same date as Rachel Stevens?,"```sparql
SELECT DISTINCT ?artist ?birthDate
WHERE {
  ?artist a dbo:Artist ;
          dbo:birthDate ?birthDate .
  FILTER (?birthDate = ""1978-04-09""^^xsd:date)
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
64,What is the profession of Frank Herbert?,"```sparql
SELECT ?profession
WHERE {
  dbpedia:Frank_Herbert dbpedia-owl:profession ?profession
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
6,Are Taiko some kind of Japanese musical instrument?,"```sparql
SELECT DISTINCT ?instrument
WHERE {
  ?instrument rdf:type dbo:MusicalInstrument ;
             rdfs:label ?label .
  FILTER (lang(?label) = 'en' && regex(?label, ""Taiko"", ""i""))
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
56,How many seats does the home stadium of FC Porto have?,"```sparql
SELECT ?seats
WHERE {
  dbr:FC_Porto dbo:ground ?stadium .
  ?stadium dbo:capacity ?seats
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
49,Which frequent flyer program has the most airlines?,"```sparql
SELECT ?program (COUNT(?airline) AS ?numAirlines)
WHERE {
  ?program a dbo:Airline ;
           dbp:frequentFlyer ?airline .
}
GROUP BY ?program
ORDER BY DESC(?numAirlines)
LIMIT 1
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
44,Which European countries have a constitutional monarchy?,"```sparql
SELECT DISTINCT ?country
WHERE {
  ?country a dbo:Country ;
           dbo:governmentType dbr:Constitutional_monarchy ;
           dbo:continent dbr:Europe .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
42,Which countries have places with more than two caves?,"```sparql
SELECT DISTINCT ?country
WHERE {
  ?place rdf:type dbo:Place .
  ?place dbo:location ?country .
  ?place rdf:type dbo:Cave .
}
GROUP BY ?country
HAVING (COUNT(?place) > 2)
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
4,"Which airports are located in California, USA?","```sparql
SELECT DISTINCT ?airport
WHERE {
  ?airport a dbo:Airport ;
          dbo:location dbr:California .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
37,What are the nicknames of San Francisco?,"```sparql
SELECT ?nickname
WHERE {
  dbr:San_Francisco dbp:nickname ?nickname
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
32,What is Angela Merkelâ€™s birth name?,"```sparql
SELECT ?birthName
WHERE {
  dbr:Angela_Merkel dbp:birthName ?birthName
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
31,Who is the mayor of Berlin?,"```sparql
SELECT ?mayor
WHERE {
  dbr:Berlin dbp:leader ?mayor .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
29,Which countries in the European Union adopted the Euro?,"```sparql
SELECT DISTINCT ?countryName
WHERE {
  ?country a dbo:Country ;
           dbo:currency dbr:Euro ;
           dbo:location ?europeanUnion .
  ?europeanUnion a dbo:European_Union .
  ?country rdfs:label ?countryName .
  FILTER (lang(?countryName) = 'en')
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
23,Which software has been published by Mean Hamster Software?,"```sparql
SELECT DISTINCT ?software
WHERE {
  ?software dct:publisher dbc:Mean_Hamster_Software .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
68,Which country was Bill Gates born in?,"```sparql
SELECT ?countryOfBirth
WHERE {
  dbpedia:Bill_Gates dbo:birthPlace ?birthPlace .
  ?birthPlace dbo:country ?countryOfBirth .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
22,How many grand-children did Jacques Cousteau have?,"```sparql
SELECT (COUNT(?grandchild) AS ?numGrandchildren)
WHERE {
  dbr:Jacques_Cousteau dbo:child/dbo:child ?grandchild .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
214,Give me all professional skateboarders from Sweden.,"```sparql
SELECT DISTINCT ?skateboarder
WHERE {
  ?skateboarder a dbo:Skateboarder ;
                dbo:birthPlace/dbo:country dbr:Sweden ;
                dbo:occupation dbr:Professional_skateboarder .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
210,Which monarchs of the United Kingdom were married to a German?,"```sparql
SELECT DISTINCT ?monarch
WHERE {
  ?monarch a dbo:Monarch ;
           dbo:spouse ?spouse .
  ?spouse dbo:birthPlace ?birthPlace .
  FILTER regex(str(?birthPlace), ""Germany"", ""i"")
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
199,Give me all Argentine films.,"```sparql
SELECT ?film
WHERE {
  ?film a dbo:Film ;
        dbo:country dbr:Argentina .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
203,How did Michael Jackson die?,"```sparql
SELECT ?causeOfDeath
WHERE {
  dbpedia:Michael_Jackson dbpedia-owl:deathCause ?causeOfDeath .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
197,Which U.S. state has been admitted latest?,"```sparql
SELECT ?state ?admissionDate
WHERE {
  ?state a dbo:PopulatedPlace ;
         dbo:country dbr:United_States ;
         dbp:admittancedate ?admissionDate .
}
ORDER BY DESC(?admissionDate)
LIMIT 1
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
196,Which classes does the Millepede belong to?,"```sparql
SELECT DISTINCT ?class
WHERE {
  dbr:Millepede dct:subject ?class .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
188,Give me the homepage of Forbes.,"```sparql
SELECT ?homepage
WHERE {
  dbr:Forbes foaf:homepage ?homepage
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
187,Who is the husband of Amanda Palmer?,"```sparql
SELECT ?husband
WHERE {
  dbr:Amanda_Palmer dbo:spouse ?husband .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
176,Who painted The Storm on the Sea of Galilee?,"```sparql
SELECT ?painter
WHERE {
  ?painter dbo:author dbr:The_Storm_on_the_Sea_of_Galilee.
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
62,What is the highest place of Karakoram?,"```sparql
SELECT ?highestPlace ?elevation
WHERE {
  ?highestPlace dbo:location ?location ;
                dbp:highest ?elevation .
  ?location dbo:location dbr:Karakoram .
}
ORDER BY DESC(?elevation)
LIMIT 1
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
173,When did Finland join the EU?,"```sparql
SELECT ?date
WHERE {
  dbr:Finland dbo:accessioneudate ?date
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
168,Which actors play in Big Bang Theory?,"```sparql
SELECT ?actorName
WHERE {
  ?film dbo:starring ?actor .
  ?actor foaf:name ?actorName .
  FILTER regex(?film, ""Big_Bang_Theory"", ""i"")
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
166,Which computer scientist won an oscar?,"```sparql
SELECT ?scientist ?scientistName
WHERE {
  ?scientist a dbo:Scientist ;
            dbo:award ?award .
  ?award a dbo:Award ;
         rdfs:label ?awardLabel .
  FILTER(REGEX(?awardLabel, ""Oscar"", ""i""))
  ?scientist foaf:name ?scientistName .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
160,Who wrote Harry Potter?,"```sparql
SELECT ?author
WHERE {
  dbr:Harry_Potter dbo:author ?author .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
158,Give me all writers that won the Nobel Prize in literature.,"```sparql
SELECT DISTINCT ?writer ?name
WHERE {
  ?writer a dbo:Writer ;
          dbo:award dbr:Nobel_Prize_in_Literature ;
          foaf:name ?name .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
157,Give me English actors starring in Lovesick.,"```sparql
SELECT DISTINCT ?actorName
WHERE {
  ?film dbo:starring ?actor .
  ?actor a dbo:Actor ;
         dbo:birthPlace dbr:England ;
         rdfs:label ?actorName .
  ?film foaf:name ""Lovesick""@en .
  FILTER (lang(?actorName) = ""en"")
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
155,What is the nick name of Baghdad?,"```sparql
SELECT ?nickname
WHERE {
  dbr:Baghdad foaf:nick ?nickname
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
150,In which city was the president of Montenegro born?,"```sparql
SELECT ?cityOfBirth
WHERE {
  dbr:President_of_Montenegro dbo:birthPlace ?birthPlace .
  ?birthPlace dbo:location ?cityOfBirth .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
149,Which U.S. state has the highest population density?,"```sparql
SELECT ?state ?populationDensity
WHERE {
  ?state a dbo:State ;
         dbo:populationDensity ?populationDensity .
}
ORDER BY DESC(?populationDensity)
LIMIT 1
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
25,What is the longest river in China?,"```sparql
SELECT ?river ?length
WHERE {
  ?river a dbo:River ;
         dbo:country dbr:China ;
         dbo:length ?length .
}
ORDER BY DESC(?length)
LIMIT 1
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
143,What is the area code of Berlin?,"```sparql
SELECT ?areaCode
WHERE {
  dbr:Berlin dbo:areaCode ?areaCode
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
140,How many scientists graduated from an Ivy League university?,"```sparql
SELECT (COUNT(DISTINCT ?scientist) AS ?countScientists)
WHERE {
  ?scientist a dbo:Person ;
             dbo:almaMater ?university .
  ?university a dbo:EducationalInstitution ;
              dbo:country <http://dbpedia.org/resource/Ivy_League> .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
139,Which professional surfers were born in Australia?,"```sparql
SELECT DISTINCT ?surferName
WHERE {
  ?surfer a dbo:Person ;
          dbo:birthPlace/dbo:country dbr:Australia ;
          rdf:type dbo:Surfer ;
          rdfs:label ?surferName .
  FILTER (langMatches(lang(?surferName), ""en""))
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
137,Give me all Dutch parties.,"```sparql
SELECT ?party
WHERE {
  ?party a dbo:PoliticalParty ;
         dbp:country ""Netherlands""@en .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
136,How many moons does Mars have?,"```sparql
SELECT (COUNT(?moon) AS ?numMoons)
WHERE {
  dbr:Mars dbo:satellites ?moon .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
134,What is Batman's real name?,"```sparql
SELECT ?realName
WHERE {
  dbr:Batman foaf:name ?realName
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
132,What is Elon Musk famous for?,"```sparql
SELECT ?knownFor
WHERE {
  dbr:Elon_Musk dbo:knownFor ?knownFor
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
128,Who is the author of WikiLeaks?,"```sparql
SELECT ?author
WHERE {
  <http://dbpedia.org/resource/WikiLeaks> dbpedia-owl:author ?author .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
126,Sean Parnell was the governor of which U.S. state?,"```sparql
SELECT ?state
WHERE {
  dbr:Sean_Parnell dbo:governor ?state .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
125,How many years was the Ford Model T manufactured?,"```sparql
SELECT (xsd:integer(?endYear) - xsd:integer(?startYear) AS ?manufacturingYears)
WHERE {
  <http://dbpedia.org/resource/Ford_Model_T> dbo:productionStartYear ?startYear ;
                                              dbo:productionEndYear ?endYear .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
124,When was Carlo Giuliani shot?,"```sparql
SELECT ?date
WHERE {
  dbr:Carlo_Giuliani dbo:deathDate ?date
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
123,Give me all animals that are extinct.,"```sparql
SELECT ?animal
WHERE {
  ?animal rdf:type dbo:Animal ;
          dbo:extinct true .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
122,Who was the wife of President Lincoln?,"```sparql
SELECT ?wife
WHERE {
  <http://dbpedia.org/resource/Abraham_Lincoln> dbpedia-owl:spouse ?wife .
  ?wife a dbpedia-owl:Person .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
111,How many awards has Bertrand Russell?,"```sparql
SELECT (COUNT(?award) AS ?numAwards)
WHERE {
  dbr:Bertrand_Russell dbp:awards ?award .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
117,Is Pamela Anderson a vegan?,"```sparql
SELECT ?person ?personName ?diet
WHERE {
  ?person foaf:name ""Pamela Anderson""@en ;
          dbp:diet ?diet .
  BIND(str(?person) AS ?personName)
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
59,Which space probes were sent into orbit around the sun?,"```sparql
SELECT ?probe
WHERE {
  ?probe rdf:type dbo:SpaceProbe ;
         dbo:orbit dbpedia:Sun .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
113,Which German cities have more than 250000 inhabitants?,"```sparql
SELECT DISTINCT ?city
WHERE {
  ?city a dbo:City ;
        dbo:country dbr:Germany ;
        dbo:populationTotal ?population .
  FILTER (?population > 250000)
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
104,Who is the daughter of Robert Kennedy married to?,"```sparql
SELECT ?daughter ?spouseName
WHERE {
  ?daughter a dbo:Person ;
           dbo:child of dbr:Robert_F._Kennedy ;
           dbo:spouse ?spouse .
  ?spouse foaf:name ?spouseName .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
10,How many students does the Free University of Amsterdam have?,"```sparql
SELECT ?numberOfStudents
WHERE {
  dbr:Free_University_of_Amsterdam dbo:numberOfStudents ?numberOfStudents
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
1,What is the revenue of IBM?,"```sparql
SELECT ?revenue
WHERE {
  dbpedia:IBM dbo:revenue ?revenue
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
178,How many James Bond movies do exist?,"```sparql
SELECT (COUNT(?film) AS ?count)
WHERE {
  ?film rdf:type dbo:Film ;
        dbo:starring dbr:James_Bond .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
129,Who does the voice of Bart Simpson?,"```sparql
SELECT ?actor
WHERE {
  dbr:Bart_Simpson dbo:voice ?actor .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
183,Who was Tom Hanks married to?,"```sparql
SELECT ?spouseName
WHERE {
  dbr:Tom_Hanks dbo:spouse ?spouse .
  ?spouse foaf:name ?spouseName .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
181,Through which countries does the Yenisei river flow?,"```sparql
SELECT DISTINCT ?country
WHERE {
  dbr:Yenisei dbo:country ?country .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
7,Give me all cars that are produced in Germany.,"```sparql
SELECT DISTINCT ?car
WHERE {
  ?car a dbo:Automobile ;
       dbo:manufacturer ?manufacturer .
  ?manufacturer dbo:country dbr:Germany .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
135,When did Michael Jackson die?,"```sparql
SELECT ?deathDate
WHERE {
  dbr:Michael_Jackson dbo:deathDate ?deathDate
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
50,What is the highest volcano in Africa?,"```sparql
SELECT ?volcano ?elevation
WHERE {
  ?volcano rdf:type dbo:Volcano ;
           dbo:locatedInArea ?country ;
           dbo:elevation ?elevation .
  ?country dbo:isPartOf dbr:Africa .
}
ORDER BY DESC(?elevation)
LIMIT 1
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
39,Which poet wrote the most books?,"```sparql
SELECT ?poet (COUNT(?book) AS ?numBooks)
WHERE {
  ?poet a dbo:Writer .
  ?poet dbo:author ?book .
} 
GROUP BY ?poet
ORDER BY DESC(?numBooks)
LIMIT 1
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
83,Give me all gangsters from the prohibition era.,"```sparql
SELECT DISTINCT ?gangster
WHERE {
  ?gangster a dbo:Person ;
           dbo:occupation ""Gangster"" ;
           dbo:birthDate ?birthDate .
  FILTER (?birthDate >= ""1920-01-01""^^xsd:date && ?birthDate <= ""1933-12-05""^^xsd:date)
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
71,Give me all spacecrafts that flew to Mars.,"```sparql
SELECT DISTINCT ?spacecraft
WHERE {
  ?spacecraft dbo:wikiPageWikiLink dbr:Mars .
  ?spacecraft dbo:launchSite ?launchSite .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
213,Show me all Czech movies.,"```sparql
SELECT ?movie
WHERE {
  ?movie a dbo:Film ;
         dbo:country dbr:Czech_Republic .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
209,Give me all taikonauts.,"```sparql
SELECT ?taikonaut
WHERE {
  ?taikonaut rdf:type dbo:Person ;
             dbo:occupation dbr:Taikonaut .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
105,Which countries have more than ten volcanoes?,"```sparql
SELECT ?country (COUNT(?volcano) AS ?numVolcanoes)
WHERE {
  ?volcano a dbo:Volcano ;
           dbo:locatedInArea ?country .
}
GROUP BY ?country
HAVING (COUNT(?volcano) > 10)
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
52,Give me all movies with Tom Cruise.,"```sparql
SELECT ?movie
WHERE {
  ?movie a dbo:Film ;
         dbo:starring dbr:Tom_Cruise .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
102,When did Dracula's creator die?,"```sparql
SELECT ?deathDate
WHERE {
  dbr:Bram_Stoker dbo:deathDate ?deathDate
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
21,Who created English Wikipedia?,"```sparql
SELECT ?creator
WHERE {
  dbr:English_Wikipedia dct:creator ?creator .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
34,Give me all female German chancellors.,"```sparql
SELECT ?chancellor
WHERE {
  ?chancellor a dbo:Chancellor ;
             dbo:birthPlace/dbo:country dbr:Germany ;
             rdf:type foaf:Person ;
             foaf:gender ""female"" .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
145,Who owns Aldi?,"```sparql
SELECT ?owner
WHERE {
  dbr:Aldi dbo:owner ?owner .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
154,Which books were written by Danielle Steel?,"```sparql
SELECT ?bookTitle
WHERE {
  ?author a dbo:Person ;
          foaf:name ""Danielle Steel"" ;
          dbo:notableWork ?book .
  ?book foaf:name ?bookTitle .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
198,Who was influenced by Socrates?,"```sparql
SELECT DISTINCT ?influencedBy
WHERE {
  ?socrates dbo:influenced ?influencedBy .
  FILTER (?influencedBy != dbo:Socrates)
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
162,How deep is Lake Chiemsee?,"```sparql
SELECT ?depth
WHERE {
  dbpedia:Lake_Chiemsee dbo:maximumDepth ?depth
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
212,Which companies work in the aerospace industry as well as in medicine?,"```sparql
SELECT DISTINCT ?company
WHERE {
  ?company a dbo:Company ;
           dbo:industry ?industry1, ?industry2 .
  FILTER (?industry1 = dbr:Aerospace_industry && ?industry2 = dbr:Medicine)
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
96,Which professional surfers were born on the Philippines?,"```sparql
SELECT DISTINCT ?surferName
WHERE {
  ?surfer a dbo:Person ;
          dbo:birthPlace/dbo:country dbr:Philippines ;
          rdf:type dbo:Surfer ;
          rdfs:label ?surferName .
  FILTER (lang(?surferName) = 'en')
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
40,Who were the parents of Queen Victoria?,"```sparql
SELECT ?parent
WHERE {
  dbr:Queen_Victoria dbo:parent ?parent .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
79,Are there any castles in the United States?,"```sparql
SELECT DISTINCT ?castle
WHERE {
  ?castle a dbo:Castle ;
          dbo:country dbr:United_States .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
141,Which languages are spoken in Estonia?,"```sparql
SELECT DISTINCT ?language
WHERE {
  dbr:Estonia dbo:spokenIn ?language .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
80,Give me a list of all critically endangered birds.,"```sparql
SELECT ?bird
WHERE {
  ?bird rdf:type dbo:Bird ;
        dbo:conservationStatus dbr:Critically_Endangered .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
159,Which countries are connected by the Rhine?,"```sparql
SELECT DISTINCT ?country
WHERE {
  ?river a dbo:River ;
         rdfs:label ""Rhine""@en ;
         dbo:country ?countryResource .
  ?countryResource a dbo:Country ;
                  rdfs:label ?country .
  FILTER(LANG(?country) = ""en"")
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
107,Who was the father of Queen Elizabeth II?,"```sparql
SELECT ?fatherName
WHERE {
  <http://dbpedia.org/resource/Elizabeth_II> dbo:parent ?father .
  ?father foaf:name ?fatherName .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
163,Give me all chemical elements.,"```sparql
SELECT ?element
WHERE {
  ?element a dbo:ChemicalElement
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
211,Give me all American presidents of the last 20 years.,"```sparql
SELECT DISTINCT ?president
WHERE {
  ?president a dbo:President ;
            dbo:office ?office .
  FILTER regex(?office, ""President of the United States"", ""i"") .
  FILTER (?office >= ""1996-01-01""^^xsd:date)
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
51,When is the movie Worst Case Scenario going to be in cinemas in the Netherlands?,"```sparql
SELECT ?releaseDate
WHERE {
  ?movie dbpedia-owl:releaseDate ?releaseDate .
  ?movie dbpedia-owl:country dbpedia:Netherlands .
  ?movie rdfs:label ""Worst Case Scenario""@en .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
144,Whom did Lance Bass marry?,"```sparql
SELECT ?spouse
WHERE {
  dbr:Lance_Bass dbo:spouse ?spouse .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
167,Which subsidiary of TUI Travel serves both Glasgow and Dublin?,"```sparql
SELECT ?subsidiary
WHERE {
  ?subsidiary a dbo:Airline ;
              dbo:targetAirport/dbo:city dbr:Glasgow, dbr:Dublin .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
131,What languages are spoken in Pakistan?,"```sparql
SELECT DISTINCT ?language
WHERE {
  <http://dbpedia.org/resource/Pakistan> dbo:language ?language .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
120,Who is the daughter of Bill Clinton married to?,"```sparql
SELECT ?daughter ?spouseName
WHERE {
  ?daughter a dbo:Person ;
           dbo:child of dbr:Bill_Clinton ;
           dbo:spouse ?spouse .
  ?spouse foaf:name ?spouseName .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
164,Who was on the Apollo 11 mission?,"```sparql
SELECT ?crewMember
WHERE {
  dbr:Apollo_11 dbo:crewMembers ?crewMember .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
88,What is the wavelength of Indigo?,"```sparql
SELECT ?wavelength
WHERE {
  dbr:Indigo dbo:wavelength ?wavelength
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
151,Give me all B-sides of the Ramones.,"```sparql
SELECT ?bSide
WHERE {
  ?album dbo:artist dbr:Ramones ;
         dbo:bSide ?bSide .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
63,Who was called Scarface?,"```sparql
SELECT ?person
WHERE {
  ?person dbo:alias ""Scarface""@en .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
27,Which rivers flow into the North Sea?,"```sparql
SELECT DISTINCT ?riverName
WHERE {
  ?river a dbo:River ;
         dbo:inflow ?sea .
  ?sea a dbo:BodyOfWater ;
       dbo:locatedInArea dbr:North_Sea .
  ?river rdfs:label ?riverName .
  FILTER (lang(?riverName) = 'en')
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
156,Where is Fort Knox located?,"```sparql
SELECT ?location
WHERE {
  dbr:Fort_Knox dbo:location ?location
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
207,Which daughters of British earls died at the same place they were born at?,"```sparql
SELECT ?daughter ?birthPlace ?deathPlace
WHERE {
  ?daughter a dbo:Person ;
            dbo:birthPlace ?birthPlace ;
            dbo:deathPlace ?deathPlace .
  ?daughter dbo:parent dbr:British_earl .
  FILTER (?birthPlace = ?deathPlace)
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
24,How many emperors did China have?,"```sparql
SELECT (COUNT(?emperor) AS ?count)
WHERE {
  ?emperor a dbo:Emperor ;
           dbo:nationality dbr:China .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
133,What are the names of the Teenage Mutant Ninja Turtles?,"```sparql
SELECT ?name
WHERE {
  ?turtle rdf:type dbo:FictionalCharacter ;
          rdfs:label ""Teenage Mutant Ninja Turtles""@en ;
          dbo:creator dbr:Kevin_Eastman .
  ?turtle dbo:characterName ?name .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
103,Where does Piccadilly start?,"```sparql
SELECT ?startPoint
WHERE {
  dbr:Piccadilly_Line dbo:routeStart ?startPoint .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
165,What is the name of the university where Obama's wife studied?,"```sparql
SELECT ?universityName
WHERE {
  ?person dbo:spouse dbr:Michelle_Obama .
  ?person dbo:almaMater ?university .
  ?university rdfs:label ?universityName .
  FILTER(LANG(?universityName) = 'en')
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
108,When did Paraguay proclaim its independence?,"```sparql
SELECT ?date
WHERE {
  dbr:Paraguay dbo:foundingDate ?date
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
15,How short is the shortest active NBA player?,"```sparql
SELECT ?height
WHERE {
  ?player a dbo:BasketballPlayer ;
          dbo:height ?height ;
          dbo:activeYearsStartYear ?startYear .
  FILTER (?startYear >= 2016)
}
ORDER BY ASC(?height)
LIMIT 1
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
45,Where did Abraham Lincoln die?,"```sparql
SELECT ?placeOfDeath WHERE {
  dbr:Abraham_Lincoln dbo:deathPlace ?placeOfDeath .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
82,When was Jack Wolfskin founded?,"```sparql
SELECT ?foundingYear
WHERE {
  dbr:Jack_Wolfskin dbo:foundingYear ?foundingYear
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
9,In which city is the headquarter of Air China?,"```sparql
SELECT ?city WHERE {
  dbr:Air_China dbo:headquarter ?hq .
  ?hq dbo:location ?city .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
201,What is the founding year of the brewery that produces Pilsner Urquell?,"```sparql
SELECT ?foundingYear
WHERE {
  ?brewery dbo:product dbr:Pilsner_Urquell ;
           dbo:foundingYear ?foundingYear .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
171,When did the Boston Tea Party take place?,"```sparql
SELECT ?date
WHERE {
  dbr:Boston_Tea_Party dbo:date ?date
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
182,Which animals are critically endangered?,"```sparql
SELECT DISTINCT ?animal
WHERE {
  ?animal rdf:type dbo:Animal ;
          dbo:conservationStatus dbr:Critically_Endangered .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
13,Which politicians were married to a German?,"```sparql
SELECT DISTINCT ?politician
WHERE {
  ?politician a dbo:Person ;
              dbo:spouse ?spouse .
  ?spouse dbo:birthPlace ?birthPlace .
  ?birthPlace dbo:country dbr:Germany .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
114,How big is the earth's diameter?,"```sparql
SELECT ?diameter
WHERE {
  dbr:Earth dbo:diameter ?diameter
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
92,Is the wife of President Obama called Michelle?,"```sparql
SELECT ?wifeName
WHERE {
  ?president dbo:spouse ?wife .
  ?president foaf:name ""Barack Obama""@en .
  ?wife foaf:name ""Michelle Obama""@en .
  BIND(""Michelle"" AS ?wifeName)
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
194,Which U.S. state has the abbreviation MN?,"```sparql
SELECT ?stateName
WHERE {
  ?state dbo:postalabbreviation ""MN"" .
  ?state rdfs:label ?stateName .
  FILTER (lang(?stateName) = 'en')
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
175,When did Muhammad die?,"```sparql
SELECT ?deathDate
WHERE {
  dbr:Muhammad dbo:deathDate ?deathDate
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
26,What is the atmosphere of the Moon composed of?,"```sparql
SELECT ?composition
WHERE {
  dbr:Moon dbp:atmosphereComposition ?composition
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
60,Who is the governor of Texas?,"```sparql
SELECT ?governor
WHERE {
  dbr:Texas dbo:governor ?governor .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
110,Which movies did Kurosawa direct?,"```sparql
SELECT ?movieTitle
WHERE {
  ?movie dbo:director dbr:Akira_Kurosawa .
  ?movie rdfs:label ?movieTitle .
  FILTER (lang(?movieTitle) = 'en')
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
206,What was the name of the famous battle in 1836 in San Antonio?,"```sparql
SELECT ?battleName
WHERE {
  ?battle dbo:date ""1836""^^xsd:date ;
         rdfs:label ?battleName .
  FILTER(REGEX(?battleName, ""San Antonio"", ""i""))
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
97,Give me the official websites of actors of the television show Charmed.,"```sparql
SELECT DISTINCT ?actor ?officialWebsite
WHERE {
  ?charmed dbo:starring ?actor .
  ?actor foaf:homepage ?officialWebsite .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
20,How many calories does a baguette have?,"```sparql
SELECT ?calories
WHERE {
  dbr:Baguette dbp:calories ?calories
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
169,Give me all libraries established before 1400.,"```sparql
SELECT ?library ?name ?establishedYear
WHERE {
  ?library a dbo:Library ;
           foaf:name ?name ;
           dbp:established ?establishedYear .
  FILTER (?establishedYear < ""1400""^^xsd:gYear)
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
38,Give me all Frisian islands that belong to the Netherlands.,"```sparql
SELECT ?island
WHERE {
  ?island rdf:type dbo:Island ;
          dbo:country dbr:Netherlands .
  FILTER regex(str(?island), ""Frisian"", ""i"")
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
192,Which museum exhibits The Scream by Munch?,"```sparql
SELECT ?museum
WHERE {
  ?artwork dbo:author dbr:Edvard_Munch ;
           rdfs:label ""The Scream""@en .
  ?museum dbo:exhibits ?artwork .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
78,When was the De Beers company founded?,"```sparql
SELECT ?foundingYear
WHERE {
  dbr:De_Beers dbo:foundingYear ?foundingYear
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
19,Who became president after JFK died?,"```sparql
SELECT ?successor
WHERE {
  dbr:John_F._Kennedy dbo:succeededBy ?successor .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
190,Who are the parents of the wife of Juan Carlos I?,"```sparql
SELECT ?parentName
WHERE {
  ?juanCarlos rdf:type dbo:Person ;
              foaf:name ""Juan Carlos I"" .
  
  ?juanCarlos dbo:spouse ?wife .
  ?wife dbo:parent ?parent .
  
  ?parent foaf:name ?parentName .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
174,Who is the novelist of the work a song of ice and fire?,"```sparql
SELECT ?novelist
WHERE {
  ?work dbo:author ?novelist ;
        rdfs:label ""A Song of Ice and Fire""@en .
  ?novelist a dbo:Person .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
189,In which studio did the Beatles record their first album?,"```sparql
SELECT ?studio
WHERE {
  ?album a dbo:Album ;
         dbo:artist dbr:The_Beatles ;
         dbo:recordLabel ?studio .
  FILTER regex(str(?album), ""Please Please Me"")
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
152,Which beer brewing companies are located in North-Rhine Westphalia?,"```sparql
SELECT DISTINCT ?company
WHERE {
  ?company a dbo:Company ;
           dbo:industry dbr:Beer_brewing ;
           dbo:location dbr:North_Rhine-Westphalia .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
94,When did princess Diana die?,"```sparql
SELECT ?deathDate
WHERE {
  dbr:Princess_Diana dbo:deathDate ?deathDate
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
8,Who founded Intel?,"```sparql
SELECT ?founder
WHERE {
  dbr:Intel dbo:founder ?founder .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
95,Who is the youngest player in the Premier League?,"```sparql
SELECT ?player ?name ?birthdate
WHERE {
  ?player a dbo:SoccerPlayer ;
          dbo:birthDate ?birthdate ;
          dbo:team ?team .
  ?team dbo:league dbr:Premier_League .
}
ORDER BY ASC(?birthdate)
LIMIT 1
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
119,Which instruments does Cat Stevens play?,"```sparql
SELECT ?instrument
WHERE {
  dbr:Cat_Stevens dbo:instrument ?instrument
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
115,How many rivers and lakes are in South Carolina?,"```sparql
SELECT (COUNT(?river) AS ?numRivers) (COUNT(?lake) AS ?numLakes)
WHERE {
  ?river a dbo:River ;
         dbo:country dbr:South_Carolina .
  
  ?lake a dbo:Lake ;
        dbo:country dbr:South_Carolina .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
116,Who was called Rodzilla?,"```sparql
SELECT ?person
WHERE {
  ?person foaf:nick ""Rodzilla""@en .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
138,Give me the capitals of all countries in Africa.,"```sparql
SELECT ?country ?capital
WHERE {
  ?country a dbo:Country ;
           dbo:capital ?capital ;
           dct:subject dbc:Countries_in_Africa .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
177,Which bridges are of the same type as the Manhattan Bridge?,"```sparql
SELECT ?bridge ?type
WHERE {
  ?bridge a dbo:Bridge ;
          dbo:bridgeType ?type .
  FILTER (?type = ""Manhattan Bridge"")
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
101,How many companies were founded by the founder of Facebook?,"```sparql
SELECT (COUNT(?company) AS ?count)
WHERE {
  ?founder a dbo:Person ;
           foaf:name ""Mark Zuckerberg"" .
  ?company dbo:foundedBy ?founder ;
           a dbo:Company .
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
14,Show me hiking trails in the Grand Canyon where there's no danger of flash floods.,"```sparql
SELECT DISTINCT ?trail
WHERE {
  ?trail a dbo:HikingTrail ;
         dbp:trailheads ?trailheads ;
         dbp:hazards ?hazards .
  FILTER NOT EXISTS { ?hazards dbo:FlashFlood }
  FILTER CONTAINS(?trailheads, ""Grand Canyon"")
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
87,Which book has the most pages?,"```sparql
SELECT ?book ?title ?pages
WHERE {
  ?book a dbo:Book ;
        rdfs:label ?title ;
        dbo:numberOfPages ?pages .
} 
ORDER BY DESC(?pages)
LIMIT 1
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
148,What is the largest state in the United States?,"```sparql
SELECT ?state ?area
WHERE {
  ?state a dbo:State ;
         dbo:areaTotal ?area .
  ?state dbo:country dbr:United_States .
}
ORDER BY DESC(?area)
LIMIT 1
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
43,Give me the websites of companies with more than 500000 employees.,"```sparql
SELECT DISTINCT ?company ?website
WHERE {
  ?company a dbo:Company ;
           dbo:numberOfEmployees ?numEmployees ;
           foaf:homepage ?website .
  FILTER (?numEmployees > 500000)
}
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
179,What were the names of the three ships by Columbus?,"```sparql
SELECT ?shipName
WHERE {
  ?ship a dbpedia-owl:Ship ;
        rdfs:label ?shipName .
  FILTER regex(?shipName, ""Columbus"", ""i"")
}
LIMIT 3
```","Craft SPARQL queries from October 2016 based on user questions in natural language, exclusively dedicated to extracting information from DBpedia. Your responses should consist solely of SPARQL queries."
99,What is the time zone of Salt Lake City?,"```sparql
SELECT ?timeZone
WHERE {
  dbr:Salt_Lake_City dbo:timeZone ?timeZone
}
```
This SPARQL query retrieves the time zone of Salt Lake City from DBpedia.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
98,Who killed Caesar?,"The assassination of Julius Caesar was carried out by a group of Roman senators, including Gaius Cassius Longinus, Marcus Junius Brutus, and other conspirators.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
86,What is the highest mountain in Germany?,The highest mountain in Germany is the Zugspitze.,"Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
84,Which American presidents were in office during the Vietnam War?,"PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT DISTINCT ?presidentName
WHERE {
  ?president a dbo:President ;
             dbo:office/dbo:commander ?presidentName ;
             dbo:office/dbo:officeIn ?office .
  ?office dbo:officeIn <http://dbpedia.org/resource/Vietnam_War> .
  FILTER(langMatches(lang(?presidentName), ""en""))
}
ORDER BY ?presidentName","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
81,Butch Otter is the governor of which U.S. state?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?state
WHERE {
  ?person dbo:governor ?state ;
          foaf:name ""Butch Otter""@en .
}
","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
73,How many gold medals did Michael Phelps win at the 2008 Olympics?,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT (COUNT(?goldMedal) AS ?numGoldMedals)
WHERE {
  ?athlete dbo:goldMedalist ?goldMedal .
  ?goldMedal dbo:competition <http://dbpedia.org/resource/2008_Summer_Olympics> .
  FILTER(?athlete = <http://dbpedia.org/resource/Michael_Phelps>)
}","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
66,Which artists were born on the same date as Rachel Stevens?,"```sparql
SELECT DISTINCT ?artist ?birthDate
WHERE {
  ?artist a dbo:MusicalArtist ;
          dbo:birthDate ?birthDate .
  FILTER (?birthDate = ""1978-04-09""^^xsd:date)
  FILTER (?artist != dbr:Rachel_Stevens)
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
64,What is the profession of Frank Herbert?,"```sparql
SELECT DISTINCT ?professionLabel
WHERE {
  ?person rdf:type dbo:Person ;
          foaf:name ""Frank Herbert""@en ;
          dbo:occupation ?profession .
  ?profession rdfs:label ?professionLabel .
  FILTER(LANG(?professionLabel) = 'en')
}
```
This SPARQL query retrieves the profession of Frank Herbert by searching for a person with the name ""Frank Herbert"" and then retrieving the occupation associated with that person.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
6,Are Taiko some kind of Japanese musical instrument?,"```sparql
SELECT DISTINCT ?instrumentLabel
WHERE {
  ?instrument rdf:type dbo:MusicalInstrument ;
              rdfs:label ?instrumentLabel .
  FILTER(REGEX(?instrumentLabel, ""Taiko"", ""i""))
}
LIMIT 1
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
56,How many seats does the home stadium of FC Porto have?,"Based on the lexical entries provided, we can construct a SPARQL query to find the number of seats in the home stadium of FC Porto:

```sparql
SELECT ?seats
WHERE {
  ?team rdf:type dbo:SportsClub ;
        rdfs:label ""FC Porto""@en ;
        dbo:ground ?stadium .
  ?stadium dbo:capacity ?seats .
}
```

This query retrieves the number of seats in the home stadium of FC Porto by first finding the resource representing FC Porto, then identifying the stadium where they play their home matches, and finally retrieving the capacity (number of seats) of that stadium.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
49,Which frequent flyer program has the most airlines?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?program (COUNT(?airline) AS ?numAirlines)
WHERE {
  ?airline a dbo:Airline ;
           dbp:frequentFlyer ?program .
}
GROUP BY ?program
ORDER BY DESC(?numAirlines)
LIMIT 1
","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
44,Which European countries have a constitutional monarchy?,"```sparql
SELECT DISTINCT ?countryLabel
WHERE {
  ?country rdf:type dbo:Country ;
           dct:subject dbc:Constitutional_monarchies ;
           rdfs:label ?countryLabel .
  FILTER (lang(?countryLabel) = 'en' && regex(?countryLabel, ""European""))
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
42,Which countries have places with more than two caves?,"```sparql
SELECT DISTINCT ?country
WHERE {
  ?place rdf:type dbo:Place .
  ?place dbo:location ?country .
  {
    SELECT ?country (COUNT(?cave) AS ?caveCount)
    WHERE {
      ?cave rdf:type dbo:Cave .
      ?cave dbo:location ?place .
    }
    GROUP BY ?country
    HAVING (COUNT(?cave) > 2)
  }
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
4,"Which airports are located in California, USA?","```sparql
SELECT DISTINCT ?airportName
WHERE {
  ?airport a dbo:Airport ;
          dbo:location/dbo:locatedInArea dbr:California .
  ?airport rdfs:label ?airportName .
  FILTER (lang(?airportName) = 'en')
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
37,What are the nicknames of San Francisco?,"```sparql
SELECT ?nickname
WHERE {
  dbr:San_Francisco dbp:nickname ?nickname
}
```
This SPARQL query retrieves the nicknames of San Francisco from DBpedia.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
32,What is Angela Merkelâ€™s birth name?,"```sparql
SELECT ?birthName
WHERE {
  dbr:Angela_Merkel dbp:birthName ?birthName
}
```
This SPARQL query retrieves Angela Merkel's birth name from DBpedia.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
31,Who is the mayor of Berlin?,"```sparql
SELECT ?mayor
WHERE {
  dbr:Berlin dbp:leader ?mayor .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
29,Which countries in the European Union adopted the Euro?,"```sparql
SELECT DISTINCT ?countryName
WHERE {
  ?country a dbo:Country ;
           dbo:currency dbr:Euro .
  ?country rdfs:label ?countryName .
  FILTER (lang(?countryName) = 'en')
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
23,Which software has been published by Mean Hamster Software?,"```sparql
SELECT DISTINCT ?software
WHERE {
  ?software rdf:type dbo:Software ;
           dbo:publisher dbr:Mean_Hamster_Software .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
68,Which country was Bill Gates born in?,"```sparql
SELECT ?countryOfBirthLabel 
WHERE {
  ?person rdf:type dbo:Person ;
          rdfs:label ""Bill Gates""@en ;
          dbo:birthPlace ?countryOfBirth .
  ?countryOfBirth rdf:type dbo:Country ;
                 rdfs:label ?countryOfBirthLabel .
  FILTER(LANG(?countryOfBirthLabel) = 'en')
}
```
This SPARQL query retrieves the country where Bill Gates was born by searching for the person with the name ""Bill Gates"" and then finding the country of birth associated with that person.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
22,How many grand-children did Jacques Cousteau have?,"PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT (COUNT(?grandchild) AS ?numGrandchildren) 
WHERE {
  <http://dbpedia.org/resource/Jacques_Cousteau> dbo:child/dbo:child ?grandchild .
}","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
214,Give me all professional skateboarders from Sweden.,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?skateboarder
WHERE {
  ?skateboarder dbo:occupation dbr:Professional_skateboarder ;
                 dbo:birthPlace dbr:Sweden .
}
LIMIT 100","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
210,Which monarchs of the United Kingdom were married to a German?,"```sparql
SELECT DISTINCT ?monarch ?monarchName
WHERE {
  ?monarch a dbo:Monarch ;
          dbo:spouse ?spouse .
  ?spouse dbo:birthPlace ?birthPlace .
  FILTER regex(str(?birthPlace), ""Germany"", ""i"") .
  ?monarch rdfs:label ?monarchName .
  FILTER (lang(?monarchName) = 'en')
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
199,Give me all Argentine films.,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?film
WHERE {
  ?film rdf:type dbo:Film ;
        dct:subject dbr:Category:Argentine_films .
}
LIMIT 100","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
203,How did Michael Jackson die?,"```sparql
SELECT ?causeOfDeath
WHERE {
  dbpedia:Michael_Jackson dbo:causeOfDeath ?causeOfDeath .
}
```
This query retrieves the cause of death of Michael Jackson from DBpedia.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
197,Which U.S. state has been admitted latest?,"```sparql
SELECT ?stateLabel ?admittanceDate
WHERE {
  ?state a dbo:PopulatedPlace ;
         dbo:country dbr:United_States ;
         dbp:admittancedate ?admittanceDate .
  FILTER NOT EXISTS { ?state dbo:dissolutionDate ?dissolutionDate }
}
ORDER BY DESC(?admittanceDate)
LIMIT 1
```
This SPARQL query retrieves the U.S. state that has been admitted latest by querying DBpedia for populated places in the United States and their admittance dates, then sorting the results in descending order by admittance date and selecting the top result.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
196,Which classes does the Millepede belong to?,"Based on the lexical entry provided, the query to find the classes that the Millepede belongs to in DBpedia can be formulated as follows:

```sparql
SELECT ?class
WHERE {
  dbr:Millepede dbo:Animal ?class .
}
```

This query will retrieve the classes that the Millepede belongs to in DBpedia.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
188,Give me the homepage of Forbes.,"```sparql
SELECT ?homepage
WHERE {
  dbr:Forbes foaf:homepage ?homepage
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
187,Who is the husband of Amanda Palmer?,"```sparql
SELECT ?husbandName
WHERE {
  ?person dbo:spouse ?husband.
  ?person foaf:name ""Amanda Palmer""@en.
  ?husband foaf:name ?husbandName.
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
176,Who painted The Storm on the Sea of Galilee?,"```sparql
SELECT ?painter
WHERE {
  ?painting dbo:author ?painter ;
           rdfs:label ""The Storm on the Sea of Galilee""@en .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
62,What is the highest place of Karakoram?,"The highest place in the Karakoram mountain range is the peak of K2, also known as Mount Godwin-Austen.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
173,When did Finland join the EU?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?date
WHERE {
  dbo:Finland dbp:accessioneudate ?date
}","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
168,Which actors play in Big Bang Theory?,"The following SPARQL query can be used to find the actors who play in the TV show ""Big Bang Theory"" in DBpedia:

```
SELECT ?actorName
WHERE {
  ?tvShow dbo:starring ?actor .
  ?tvShow foaf:name ""The Big Bang Theory""@en .
  ?actor foaf:name ?actorName .
}
```

This query retrieves the names of the actors who star in the TV show ""The Big Bang Theory"" by looking for the starring relationship between the TV show and the actors.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
166,Which computer scientist won an oscar?,"```sparql
SELECT DISTINCT ?scientist ?scientistName
WHERE {
  ?scientist a dbo:Scientist ;
            dbo:award ?award .
  ?award a dbo:Award ;
         rdfs:label ?awardLabel .
  FILTER(REGEX(?awardLabel, ""Oscar"", ""i""))
  ?scientist foaf:name ?scientistName .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
160,Who wrote Harry Potter?,"```sparql
SELECT ?author
WHERE {
  ?book dbo:author ?author ;
        rdfs:label ""Harry Potter""@en .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
158,Give me all writers that won the Nobel Prize in literature.,"```sparql
SELECT DISTINCT ?writer ?writerName
WHERE {
  ?writer a dbo:Writer ;
          dbo:award dbr:Nobel_Prize_in_Literature ;
          foaf:name ?writerName .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
157,Give me English actors starring in Lovesick.,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT ?actorName
WHERE {
  ?film dbo:starring ?actor .
  ?actor foaf:name ?actorName .
  ?actor dbo:nationality <http://dbpedia.org/resource/England> .
  FILTER regex(str(?film), ""Lovesick"", ""i"")
}
LIMIT 10
","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
155,What is the nick name of Baghdad?,"```sparql
SELECT ?nickname
WHERE {
  dbr:Baghdad foaf:nick ?nickname
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
150,In which city was the president of Montenegro born?,"```sparql
SELECT ?cityOfBirth WHERE {
  ?president a dbo:President ;
             dbo:birthPlace ?city .
  ?city dbo:isPartOf* ?country .
  ?country dbo:country dbr:Montenegro .
  ?city rdfs:label ?cityOfBirth .
  FILTER(LANG(?cityOfBirth) = """" || LANGMATCHES(LANG(?cityOfBirth), ""en""))
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
149,Which U.S. state has the highest population density?,"```sparql
SELECT ?state ?populationDensity
WHERE {
  ?state a dbo:State ;
         dbo:populationDensity ?populationDensity .
}
ORDER BY DESC(?populationDensity)
LIMIT 1
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
25,What is the longest river in China?,"```sparql
SELECT ?river ?length
WHERE {
  ?river rdf:type dbo:River ;
         dbo:country dbr:China ;
         dbo:length ?length .
}
ORDER BY DESC(?length)
LIMIT 1
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
143,What is the area code of Berlin?,"The area code of Berlin can be retrieved using the following SPARQL query:

```
SELECT ?areaCode
WHERE {
  dbr:Berlin dbo:areaCode ?areaCode
}
```

This query will return the area code of Berlin.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
140,How many scientists graduated from an Ivy League university?,"```sparql
SELECT (COUNT(DISTINCT ?scientist) AS ?countScientists)
WHERE {
  ?scientist a dbo:Person ;
             dbo:almaMater ?university .
  ?university dbo:wikiPageWikiLink <https://en.wikipedia.org/wiki/Ivy_League> .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
139,Which professional surfers were born in Australia?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT ?surferName
WHERE {
  ?surfer a dbo:Person ;
          dbo:birthPlace/dbo:country <http://dbpedia.org/resource/Australia> ;
          rdf:type dbo:Surfer ;
          foaf:name ?surferName .
}
LIMIT 10
The query above retrieves the names of professional surfers who were born in Australia from DBpedia. You can adjust the LIMIT value to see more results.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
137,Give me all Dutch parties.,"```sparql
SELECT DISTINCT ?party
WHERE {
  ?party a dbo:PoliticalParty ;
        dbo:country dbr:Netherlands .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
136,How many moons does Mars have?,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?moons
WHERE {
  dbo:Mars dbp:satellites ?moons
}","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
134,What is Batman's real name?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?realName
WHERE {
  dbo:Batman foaf:name ?realName
}","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
132,What is Elon Musk famous for?,"```sparql
SELECT ?description
WHERE {
  dbr:Elon_Musk dbo:abstract ?description .
  FILTER (LANG(?description) = 'en')
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
128,Who is the author of WikiLeaks?,The author of WikiLeaks is Julian Assange.,"Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
126,Sean Parnell was the governor of which U.S. state?,"```sparql
SELECT ?stateName
WHERE {
  ?person dbo:governor dbr:Sean_Parnell .
  ?person dbo:region ?state .
  ?state rdfs:label ?stateName .
  FILTER(LANG(?stateName) = """" || LANGMATCHES(LANG(?stateName), ""en""))
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
125,How many years was the Ford Model T manufactured?,"PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT (xsd:integer(?endYear) - xsd:integer(?startYear) AS ?manufacturingYears)
WHERE {
  dbo:Ford_Model_T dbo:productionStartYear ?startYear ;
                   dbo:productionEndYear ?endYear .
}","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
124,When was Carlo Giuliani shot?,"```sparql
SELECT ?date
WHERE {
  ?person dbo:deathDate ?date .
  ?person foaf:name ""Carlo Giuliani""@en .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
123,Give me all animals that are extinct.,"```sparql
SELECT DISTINCT ?animal
WHERE {
  ?animal rdf:type dbo:Animal ;
          dbo:extinct true .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
122,Who was the wife of President Lincoln?,"The wife of President Lincoln was Mary Todd Lincoln. 

Here is the SPARQL query to retrieve this information from DBpedia:

```
SELECT ?wife
WHERE {
  <http://dbpedia.org/resource/Abraham_Lincoln> dbpedia-owl:spouse ?wife .
  FILTER regex(str(?wife), ""Mary_Todd_Lincoln"", ""i"")
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
111,How many awards has Bertrand Russell?,"```sparql
SELECT (COUNT(?award) AS ?numAwards)
WHERE {
  dbr:Bertrand_Russell dbp:awards ?award .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
117,Is Pamela Anderson a vegan?,"```sparql
SELECT ?person ?personLabel ?dietLabel
WHERE {
  ?person rdf:type dbo:Person ;
          rdfs:label ""Pamela Anderson""@en ;
          dbo:diet ?diet .
  ?diet rdfs:label ?dietLabel .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""en"". }
}
```
This query retrieves the diet of Pamela Anderson from DBpedia. If she is listed as a vegan in DBpedia, the query will return that information.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
59,Which space probes were sent into orbit around the sun?,"```sparql
SELECT DISTINCT ?spaceProbe
WHERE {
  ?spaceProbe rdf:type dbo:SpaceProbe ;
             dbo:orbit dbpedia:Sun .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
113,Which German cities have more than 250000 inhabitants?,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT DISTINCT ?cityName
WHERE {
  ?city rdf:type dbo:City ;
        dbo:country <http://dbpedia.org/resource/Germany> ;
        dbo:populationTotal ?population .
  FILTER (?population > 250000)
  ?city rdfs:label ?cityName .
  FILTER (lang(?cityName) = 'en')
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
104,Who is the daughter of Robert Kennedy married to?,The daughter of Robert Kennedy who is married to is Cheryl Hines.,"Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
10,How many students does the Free University of Amsterdam have?,"```sparql
SELECT ?numberOfStudents
WHERE {
  dbr:Free_University_of_Amsterdam dbo:numberOfStudents ?numberOfStudents
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
1,What is the revenue of IBM?,"```sparql
SELECT ?revenue
WHERE {
  dbpedia:IBM dbo:revenue ?revenue .
}
```
This query retrieves the revenue of IBM from DBpedia.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
178,How many James Bond movies do exist?,"```sparql
SELECT (COUNT(?film) AS ?count)
WHERE {
  ?film rdf:type dbo:Film ;
        foaf:name ?name .
  FILTER regex(?name, ""James Bond"", ""i"")
}
```
This query counts the number of James Bond movies that exist in DBpedia.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
129,Who does the voice of Bart Simpson?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?actorName
WHERE {
  ?actor dbo:voiceactor dbp:Bart_Simpson ;
         dbo:wikiPageRedirects ?redirect .
  ?redirect dbo:wikiPageRedirects ?actor .
  ?actor dbo:birthName ?actorName .
}","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
183,Who was Tom Hanks married to?,"The following SPARQL query can be used to find out who Tom Hanks was married to:

```
SELECT ?spouseName
WHERE {
  ?person dbo:spouse ?spouse.
  ?person foaf:name ""Tom Hanks""@en.
  ?spouse foaf:name ?spouseName.
}
```

This query searches for a person with the name ""Tom Hanks"" in DBpedia, retrieves their spouse using the `dbo:spouse` property, and then retrieves the name of the spouse.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
181,Through which countries does the Yenisei river flow?,"```sparql
SELECT DISTINCT ?countryName
WHERE {
  ?river dbo:riverName ""Yenisei""@en .
  ?river dbo:country ?country .
  ?country rdfs:label ?countryName .
  FILTER(LANG(?countryName) = 'en')
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
7,Give me all cars that are produced in Germany.,"```sparql
SELECT DISTINCT ?car
WHERE {
  ?car a dbo:Automobile ;
       dbo:assembly ?company .
  ?company dbo:country dbr:Germany .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
135,When did Michael Jackson die?,"The SPARQL query to find the date when Michael Jackson died is as follows:

```
SELECT ?deathDate
WHERE {
  dbr:Michael_Jackson dbo:deathDate ?deathDate
}
```

This query retrieves the death date of Michael Jackson from DBpedia.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
50,What is the highest volcano in Africa?,"```sparql
SELECT ?volcano ?elevation
WHERE {
  ?volcano rdf:type dbo:Volcano ;
          dbo:locatedInArea dbr:Africa ;
          dbo:elevation ?elevation .
}
ORDER BY DESC(?elevation)
LIMIT 1
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
39,Which poet wrote the most books?,"```sparql
SELECT ?poet (COUNT(?book) AS ?numBooks)
WHERE {
  ?poet a dbo:Person ;
        dbo:author ?book .
}
GROUP BY ?poet
ORDER BY DESC(?numBooks)
LIMIT 1
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
83,Give me all gangsters from the prohibition era.,"```sparql
SELECT DISTINCT ?gangster
WHERE {
  ?gangster dbo:occupation ""Gangster""@en .
  ?gangster dbo:birthDate ?birthDate .
  FILTER (?birthDate >= ""1920-01-01""^^xsd:date && ?birthDate <= ""1933-12-05""^^xsd:date)
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
71,Give me all spacecrafts that flew to Mars.,"```sparql
SELECT DISTINCT ?spacecraft
WHERE {
  ?spacecraft dbo:wikiPageWikiLink dbr:Mars .
  ?spacecraft dbp:launched ?date .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
213,Show me all Czech movies.,"```sparql
SELECT DISTINCT ?movie
WHERE {
  ?movie a dbo:Film ;
         dbp:country ""Czech Republic""@en .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
209,Give me all taikonauts.,"```sparql
SELECT ?taikonaut ?name
WHERE {
  ?taikonaut a dbo:Person ;
             dbo:occupation dbr:Taikonaut ;
             foaf:name ?name .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
105,Which countries have more than ten volcanoes?,"```sparql
SELECT ?country (COUNT(?volcano) AS ?numVolcanoes)
WHERE {
  ?volcano a dbo:Volcano ;
          dbo:locatedInArea ?country .
}
GROUP BY ?country
HAVING (COUNT(?volcano) > 10)
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
52,Give me all movies with Tom Cruise.,"```sparql
SELECT DISTINCT ?movie ?title
WHERE {
  ?movie a dbo:Film ;
         dbo:starring dbr:Tom_Cruise ;
         foaf:name ?title .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
102,When did Dracula's creator die?,"The SPARQL query to find out when Dracula's creator died is as follows:

```
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?deathDate
WHERE {
  ?creator dbo:birthPlace <http://dbpedia.org/resource/Bram_Stoker> ;
          dbo:deathDate ?deathDate .
}
```

This query retrieves the death date of the creator of Dracula (Bram Stoker) from DBpedia.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
21,Who created English Wikipedia?,"```sparql
SELECT DISTINCT ?creator
WHERE {
  dbr:English_Wikipedia dct:creator ?creator .
}
```
","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
34,Give me all female German chancellors.,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?chancellorName
WHERE {
  ?chancellor a dbo:Chancellor ;
             dbo:birthPlace/dbo:country dbr:Germany ;
             dbo:gender ""female"" ;
             rdfs:label ?chancellorName .
  FILTER (lang(?chancellorName) = 'en')
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
145,Who owns Aldi?,"```sparql
SELECT ?founder
WHERE {
  dbr:Aldi dbo:founders ?founder .
}
```
This SPARQL query retrieves the founder(s) of Aldi.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
154,Which books were written by Danielle Steel?,"```sparql
SELECT DISTINCT ?bookTitle
WHERE {
  ?author dbo:author dbr:Danielle_Steel .
  ?book dbo:author ?author ;
       rdfs:label ?bookTitle .
  FILTER (lang(?bookTitle) = 'en')
}
```
This SPARQL query retrieves the titles of books written by Danielle Steel from DBpedia.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
198,Who was influenced by Socrates?,"```sparql
SELECT DISTINCT ?influencedBy
WHERE {
  ?socrates a dbo:Person ;
           dbo:influenced ?influencedBy .
  FILTER (?influencedBy != dbo:Socrates)
}
```
This query retrieves individuals who were influenced by Socrates by looking for instances where Socrates influenced someone other than himself.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
162,How deep is Lake Chiemsee?,"```sparql
SELECT ?depth
WHERE {
  dbpedia:Lake_Chiemsee dbpedia-owl:maximumDepth ?depth
}
```
This query retrieves the maximum depth of Lake Chiemsee from DBpedia.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
212,Which companies work in the aerospace industry as well as in medicine?,"```sparql
SELECT DISTINCT ?company
WHERE {
  ?company a dbo:Company ;
           dbo:industry ?industry1, ?industry2 .
  FILTER (?industry1 = dbr:Aerospace_industry && ?industry2 = dbr:Medicine)
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
96,Which professional surfers were born on the Philippines?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT ?surferName
WHERE {
  ?surfer a dbo:Person ;
          dbo:birthPlace/dbo:country <http://dbpedia.org/resource/Philippines> ;
          foaf:name ?surferName .
  FILTER regex(?surferName, ""surfer"", ""i"")
}
LIMIT 10
","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
40,Who were the parents of Queen Victoria?,"```sparql
SELECT ?parentName
WHERE {
  ?queen a dbo:Person ;
         foaf:name ""Queen Victoria""@en ;
         dbo:parent ?parent .
  ?parent foaf:name ?parentName .
}
```
This query retrieves the names of the parents of Queen Victoria from DBpedia.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
79,Are there any castles in the United States?,"```sparql
SELECT DISTINCT ?castle
WHERE {
  ?castle rdf:type dbo:Castle ;
          dbo:country dbr:United_States .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
141,Which languages are spoken in Estonia?,"PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT DISTINCT ?language
WHERE {
  dbo:Estonia dbo:spokenIn ?language .
}","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
80,Give me a list of all critically endangered birds.,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?bird ?birdName
WHERE {
  ?bird a dbo:Bird ;
        dbo:conservationStatus dbr:Critically_Endangered ;
        rdfs:label ?birdName .
  FILTER (lang(?birdName) = 'en')
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
159,Which countries are connected by the Rhine?,"```sparql
SELECT DISTINCT ?country1 ?country2
WHERE {
  ?river a dbo:River ;
         rdfs:label ""Rhine""@en ;
         dbo:country ?country1, ?country2 .
  FILTER (?country1 != ?country2)
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
107,Who was the father of Queen Elizabeth II?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?fatherName
WHERE {
  <http://dbpedia.org/resource/Elizabeth_II> dbp:father ?father .
  ?father dbo:birthName ?fatherName .
}","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
163,Give me all chemical elements.,"```sparql
SELECT DISTINCT ?element ?elementLabel
WHERE {
  ?element rdf:type dbo:ChemicalElement .
  ?element rdfs:label ?elementLabel .
  FILTER(LANG(?elementLabel) = 'en')
}
ORDER BY ?elementLabel
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
211,Give me all American presidents of the last 20 years.,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?presidentName
WHERE {
  ?president a dbo:President ;
             dbo:office ?office ;
             dbo:birthDate ?birthDate ;
             dbo:deathDate ?deathDate .
  FILTER (?office >= ""2001-01-01""^^xsd:date && ?office <= ""2021-01-01""^^xsd:date)
  FILTER (langMatches(lang(?presidentName), ""en""))
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
51,When is the movie Worst Case Scenario going to be in cinemas in the Netherlands?,"To find out when the movie ""Worst Case Scenario"" is going to be in cinemas in the Netherlands, we can use the following SPARQL query:

```
PREFIX dbpedia-owl: <http://dbpedia.org/ontology/>
PREFIX dbpedia: <http://dbpedia.org/resource/>

SELECT ?releaseDate
WHERE {
  ?movie dbpedia-owl:country dbpedia:Netherlands ;
         dbpedia-owl:releaseDate ?releaseDate .
  FILTER regex(str(?movie), ""Worst_Case_Scenario"", ""i"")
}
```

This query searches for the release date of a movie with the title ""Worst Case Scenario"" in the Netherlands. The result will provide the release date of the movie in cinemas in the Netherlands.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
144,Whom did Lance Bass marry?,"PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?spouse
WHERE {
  dbr:Lance_Bass dbo:spouse ?spouse
}","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
167,Which subsidiary of TUI Travel serves both Glasgow and Dublin?,"PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?subsidiary
WHERE {
  ?subsidiary dbo:subsidiary <http://dbpedia.org/resource/TUI_Travel> ;
             dbo:targetAirport <http://dbpedia.org/resource/Glasgow_Airport>, <http://dbpedia.org/resource/Dublin_Airport> .
}","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
131,What languages are spoken in Pakistan?,"```sparql
SELECT DISTINCT ?language
WHERE {
  <http://dbpedia.org/resource/Pakistan> dbo:officialLanguage ?languageResource .
  ?languageResource rdfs:label ?language .
  FILTER(LANG(?language) = 'en')
}
```
This SPARQL query retrieves the official languages spoken in Pakistan by querying DBpedia for the officialLanguage property of Pakistan and filtering the results to display the language labels in English.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
120,Who is the daughter of Bill Clinton married to?,"```sparql
SELECT ?daughterName ?spouseName
WHERE {
  ?daughter a dbo:Person ;
            dbo:child ?parent ;
            dbo:spouse ?spouse .
  ?parent foaf:name ""Bill Clinton"" .
  ?spouse foaf:name ?spouseName .
  BIND(?daughter AS ?daughterName)
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
164,Who was on the Apollo 11 mission?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?crewMember
WHERE {
  dbo:Apollo_11 dbp:crewMembers ?crewMember
}","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
88,What is the wavelength of Indigo?,"```sparql
SELECT ?wavelength
WHERE {
  dbr:Indigo dbo:wavelength ?wavelength
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
151,Give me all B-sides of the Ramones.,"```sparql
SELECT ?bSide
WHERE {
  ?album dbo:artist dbr:Ramones ;
         dbo:bSide ?bSide .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
63,Who was called Scarface?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?person ?alias
WHERE {
  ?person dbo:alias ""Scarface""@en .
}","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
27,Which rivers flow into the North Sea?,"```sparql
SELECT DISTINCT ?riverName
WHERE {
  ?river dct:subject dbc:Rivers_of_Europe ;
         dbo:mouthLocation/dbo:locatedInArea dbr:North_Sea ;
         rdfs:label ?riverName .
  FILTER (LANG(?riverName) = 'en')
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
156,Where is Fort Knox located?,"```sparql
SELECT ?location WHERE {
  dbr:Fort_Knox dbo:location ?location .
}
```
This SPARQL query retrieves the location of Fort Knox from DBpedia.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
207,Which daughters of British earls died at the same place they were born at?,"To find daughters of British earls who died at the same place they were born at, we can use the following SPARQL query:

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?daughter ?birthPlace ?deathPlace
WHERE {
  ?daughter a dbo:Person ;
            dbo:birthPlace ?birthPlace ;
            dbo:deathPlace ?deathPlace ;
            dbo:parent dbr:British_earl .
  FILTER (?birthPlace = ?deathPlace)
}
```

This query retrieves the daughters of British earls who have the same birth place and death place.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
24,How many emperors did China have?,"```sparql
SELECT (COUNT(?emperor) AS ?numEmperors)
WHERE {
  ?emperor a dbo:Emperor ;
           dbo:nationality dbr:China .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
133,What are the names of the Teenage Mutant Ninja Turtles?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?name
WHERE {
  ?turtle dbo:wikiPageRedirects <http://dbpedia.org/resource/Teenage_Mutant_Ninja_Turtles> .
  ?turtle foaf:givenName ?name .
}","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
103,Where does Piccadilly start?,"Based on the provided lexical entries for the verb ""start"" in the context of a road, we can formulate a SPARQL query to find where Piccadilly starts. Here is the query:

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?startPoint WHERE {
  ?road dbo:routeStart ?startPoint .
  ?road dbo:routeName ""Piccadilly"" .
}
```

This query searches for the starting point of a road with the route name ""Piccadilly"" in DBpedia. The result will provide the specific location where Piccadilly starts.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
165,What is the name of the university where Obama's wife studied?,"The SPARQL query to find the name of the university where Obama's wife studied is as follows:

```sparql
SELECT ?universityName
WHERE {
  ?person dbo:spouse dbr:Michelle_Obama .
  ?person dbo:almaMater ?university .
  ?university rdfs:label ?universityName .
  FILTER(LANG(?universityName) = """" || LANGMATCHES(LANG(?universityName), ""en""))
}
```

This query retrieves the name of the university where Michelle Obama studied by finding the alma mater of the spouse of Barack Obama (Michelle Obama) and selecting the university's name.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
108,When did Paraguay proclaim its independence?,"```sparql
SELECT ?date
WHERE {
  dbr:Paraguay dbo:foundingDate ?date
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
15,How short is the shortest active NBA player?,"The shortest active NBA player is reportedly Tyrone ""Muggsy"" Bogues, who stands at 5 feet 3 inches (160 cm) tall.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
45,Where did Abraham Lincoln die?,"The following SPARQL query can be used to find where Abraham Lincoln died:

```
SELECT ?placeName
WHERE {
  dbr:Abraham_Lincoln dbo:deathPlace ?place.
  ?place rdfs:label ?placeName.
  FILTER(LANG(?placeName) = """" || LANGMATCHES(LANG(?placeName), ""en""))
}
```

This query retrieves the label of the place where Abraham Lincoln died by searching for the death place of Abraham Lincoln in DBpedia.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
82,When was Jack Wolfskin founded?,"```sparql
SELECT ?foundingYear
WHERE {
  dbr:Jack_Wolfskin dbo:foundingYear ?foundingYear
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
9,In which city is the headquarter of Air China?,"The headquarters of Air China is located in Beijing. 

SPARQL query:
```
SELECT ?city
WHERE {
  dbr:Air_China dbo:headquarter ?hq .
  ?hq dbo:location ?city .
  ?city a dbo:City .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
201,What is the founding year of the brewery that produces Pilsner Urquell?,"```sparql
SELECT ?foundingYear
WHERE {
  ?brewery dbo:product <http://dbpedia.org/resource/Pilsner_Urquell> ;
           dbo:foundingYear ?foundingYear .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
171,When did the Boston Tea Party take place?,"The Boston Tea Party took place on December 16, 1773. 

Here is the corresponding SPARQL query to retrieve this information from DBpedia:

```sparql
SELECT ?date
WHERE {
  dbr:Boston_Tea_Party dbp:date ?date
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
182,Which animals are critically endangered?,"```sparql
SELECT DISTINCT ?animalLabel
WHERE {
  ?animal rdf:type dbo:Animal ;
          dbo:conservationStatus dbr:Critically_Endangered ;
          rdfs:label ?animalLabel .
  FILTER(LANG(?animalLabel) = 'en')
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
13,Which politicians were married to a German?,"```sparql
SELECT DISTINCT ?politician ?spouse
WHERE {
  ?politician a dbo:Person ;
              dbo:spouse ?spouse .
  ?spouse dct:subject dbc:German_people .
  FILTER regex(str(?spouse), ""German"", ""i"")
  FILTER regex(str(?politician), ""politician"", ""i"")
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
114,How big is the earth's diameter?,"To find out the diameter of the Earth, we can use the following SPARQL query:

```
SELECT ?diameter
WHERE {
  dbr:Earth dbo:diameter ?diameter
}
```

This query retrieves the diameter of the Earth from DBpedia.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
92,Is the wife of President Obama called Michelle?,"To answer your question, we can use the following SPARQL query:

```
SELECT ?wifeName
WHERE {
  dbpedia:Barack_Obama dbpedia-owl:spouse ?wife .
  ?wife foaf:name ?wifeName .
  FILTER (?wifeName = ""Michelle Obama"")
}
```

This query retrieves the name of the spouse of Barack Obama and checks if the name is ""Michelle Obama"". If the query returns a result, then it confirms that the wife of President Obama is indeed called Michelle.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
194,Which U.S. state has the abbreviation MN?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?state
WHERE {
  ?state dbo:country <http://dbpedia.org/resource/United_States> ;
         dbp:postalabbreviation ""MN"" .
}","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
175,When did Muhammad die?,"The following SPARQL query can be used to find the date of death for Muhammad in DBpedia:

```
SELECT ?deathDate
WHERE {
  dbr:Muhammad dbo:deathDate ?deathDate
}
```

This query will return the date of death for Muhammad as specified in DBpedia.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
26,What is the atmosphere of the Moon composed of?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?composition
WHERE {
  dbo:Moon dbp:atmosphereComposition ?composition
}","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
60,Who is the governor of Texas?,"The governor of Texas is Greg Abbott. 

SPARQL query:
```
SELECT ?governor
WHERE {
  dbr:Texas dbo:governor ?governor .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
110,Which movies did Kurosawa direct?,"```sparql
SELECT DISTINCT ?movieTitle
WHERE {
  ?movie dbo:director dbr:Akira_Kurosawa .
  ?movie rdfs:label ?movieTitle .
  FILTER (lang(?movieTitle) = 'en')
}
```
This SPARQL query retrieves the titles of movies directed by Akira Kurosawa from DBpedia.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
206,What was the name of the famous battle in 1836 in San Antonio?,"The famous battle that took place in San Antonio in 1836 was the Battle of the Alamo. 

SPARQL query:
```
SELECT ?battleName
WHERE {
  ?battle dbo:place dbr:San_Antonio ;
          dbo:date ""1836""^^xsd:date ;
          rdfs:label ?battleName .
  FILTER regex(?battleName, ""Battle of the Alamo"", ""i"")
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
97,Give me the official websites of actors of the television show Charmed.,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?actor ?actorName ?officialWebsite
WHERE {
  ?charmedShow dbo:starring ?actor .
  ?actor foaf:name ?actorName .
  ?actor foaf:homepage ?officialWebsite .
  FILTER regex(?actorName, ""Charmed"", ""i"")
}
LIMIT 10
The query above retrieves the names and official websites of actors who starred in the television show ""Charmed"" from DBpedia.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
20,How many calories does a baguette have?,"```sparql
SELECT ?calories
WHERE {
  dbr:Baguette dbp:calories ?calories
}
```
This SPARQL query retrieves the number of calories in a baguette from DBpedia.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
169,Give me all libraries established before 1400.,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT DISTINCT ?library ?establishedYear
WHERE {
  ?library a dbo:Library ;
           dbp:established ?establishedYear .
  FILTER (?establishedYear < ""1400""^^xsd:gYear)
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
38,Give me all Frisian islands that belong to the Netherlands.,"```sparql
SELECT ?islandName
WHERE {
  ?island dct:subject dbc:Frisian_Islands ;
          dct:subject dbc:Islands_of_the_Netherlands ;
          rdfs:label ?islandName .
  FILTER (LANG(?islandName) = 'en')
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
192,Which museum exhibits The Scream by Munch?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?museum
WHERE {
  ?artwork dbo:author ""Edvard Munch"" ;
           dbo:museum ?museum ;
           rdfs:label ""The Scream""@en .
}
LIMIT 1","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
78,When was the De Beers company founded?,"The De Beers company was founded in 1888. 

SPARQL query:
```
SELECT ?foundingYear
WHERE {
  dbr:De_Beers dbo:foundingYear ?foundingYear
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
19,Who became president after JFK died?,"To find out who became president after JFK died, we can use the following SPARQL query:

```
SELECT ?successor
WHERE {
  ?jfk dbo:deathDate ?jfkDeathDate.
  ?successor dbo:presidentStart ?startDate.
  FILTER (?startDate > ?jfkDeathDate)
}
```

This query retrieves the successor of JFK by finding a person who started their presidency after JFK's death date.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
190,Who are the parents of the wife of Juan Carlos I?,"```sparql
SELECT ?parentName
WHERE {
  ?juanCarlos rdf:type dbo:Person ;
              foaf:name ""Juan Carlos I""@en ;
              dbo:spouse ?wife .
  ?wife dbo:parent ?parent .
  ?parent foaf:name ?parentName .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
174,Who is the novelist of the work a song of ice and fire?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?novelist
WHERE {
  ?work dbo:author ?novelist ;
        dbp:name ""A Song of Ice and Fire""@en .
}
LIMIT 1
","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
189,In which studio did the Beatles record their first album?,"```sparql
SELECT ?studio
WHERE {
  ?album dbo:artist dbr:The_Beatles ;
         dbo:recordLabel ?studio .
  ?studio a dbo:Studio .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
152,Which beer brewing companies are located in North-Rhine Westphalia?,"```sparql
SELECT DISTINCT ?companyName
WHERE {
  ?company rdf:type dbo:Company ;
           dbo:industry dbr:Beer_brewing ;
           dbo:location dbr:North_Rhine-Westphalia ;
           rdfs:label ?companyName .
  FILTER (lang(?companyName) = 'en')
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
94,When did princess Diana die?,"The following SPARQL query can be used to find the date when Princess Diana died:

```
SELECT ?deathDate
WHERE {
  ?person rdf:type dbo:Person ;
          foaf:name ""Diana, Princess of Wales""@en ;
          dbo:deathDate ?deathDate .
}
```

This query searches for a person with the name ""Diana, Princess of Wales"" in DBpedia and retrieves the death date associated with her.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
8,Who founded Intel?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?founder
WHERE {
  dbr:Intel dbp:founders ?founder .
}","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
95,Who is the youngest player in the Premier League?,"```sparql
SELECT DISTINCT ?player ?name ?birthdate
WHERE {
  ?player a dbo:SoccerPlayer ;
          dbo:birthDate ?birthdate ;
          foaf:name ?name .
  FILTER NOT EXISTS { ?player dbo:birthDate ?otherBirthdate .
                     FILTER (?otherBirthdate < ?birthdate) }
}
ORDER BY ?birthdate
LIMIT 1
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
119,Which instruments does Cat Stevens play?,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?instrument
WHERE {
  dbo:Cat_Stevens dbo:instrument ?instrument
}","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
115,How many rivers and lakes are in South Carolina?,"To find out how many rivers and lakes are in South Carolina, we can use the following SPARQL query:

```
SELECT (COUNT(?river) AS ?numRivers) (COUNT(?lake) AS ?numLakes)
WHERE {
  ?river a dbo:River ;
         dbo:locatedInArea dbr:South_Carolina .
  
  ?lake a dbo:Lake ;
        dbo:locatedInArea dbr:South_Carolina .
}
```

This query counts the number of rivers and lakes in South Carolina by finding instances of rivers and lakes that are located in South Carolina.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
116,Who was called Rodzilla?,"To find out who was called ""Rodzilla,"" we can query DBpedia using the following SPARQL query:

```
SELECT ?person
WHERE {
  ?person foaf:nick ""Rodzilla""@en .
}
```

This query searches for a person who has the nickname ""Rodzilla"" in DBpedia.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
138,Give me the capitals of all countries in Africa.,"```sparql
SELECT ?country ?capital WHERE {
  ?country a dbo:Country ;
           dbo:capital ?capital ;
           dct:subject dbc:Countries_in_Africa .
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
177,Which bridges are of the same type as the Manhattan Bridge?,"```sparql
SELECT DISTINCT ?bridge ?type
WHERE {
  ?bridge a dbo:Bridge ;
          dbo:bridgeType ?type .
  FILTER EXISTS {
    ?manhattanBridge a dbo:Bridge ;
                     dbo:bridgeType ?manhattanType .
    FILTER (?manhattanType = ?type)
  }
  FILTER (?bridge != ?manhattanBridge)
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
101,How many companies were founded by the founder of Facebook?,"To find out how many companies were founded by the founder of Facebook, we can use the following SPARQL query:

```
SELECT (COUNT(?company) AS ?count)
WHERE {
  ?founder a dbo:Person ;
           foaf:name ""Mark Zuckerberg"" .
  
  ?company dbo:foundedBy ?founder ;
           a dbo:Company .
}
```

This query retrieves the count of companies founded by the person with the name ""Mark Zuckerberg"" who is the founder of Facebook.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
14,Show me hiking trails in the Grand Canyon where there's no danger of flash floods.,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?trail
WHERE {
  ?trail a dbo:Place ;
         dbp:trailheads ""Grand Canyon"" ;
         dbp:hazards ?hazard .
  FILTER NOT EXISTS { ?hazard dbp:hazardType ""flash flood"" }
}
LIMIT 10
","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
87,Which book has the most pages?,"```sparql
SELECT ?book ?title ?pages
WHERE {
  ?book a dbo:Book ;
        rdfs:label ?title ;
        dbo:numberOfPages ?pages .
}
ORDER BY DESC(?pages)
LIMIT 1
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
148,What is the largest state in the United States?,"```sparql
SELECT ?stateName ?areaTotal
WHERE {
  ?state a dbo:State ;
         dbo:areaTotal ?areaTotal ;
         rdfs:label ?stateName .
  ?state dbo:country dbr:United_States .
}
ORDER BY DESC(?areaTotal)
LIMIT 1
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
43,Give me the websites of companies with more than 500000 employees.,"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT ?company ?website
WHERE {
  ?company a dbo:Company ;
          dbo:numberOfEmployees ?employees ;
          foaf:homepage ?website
  FILTER (?employees > 500000)
}
```","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
179,What were the names of the three ships by Columbus?,"```sparql
SELECT DISTINCT ?shipName
WHERE {
  ?ship dbpedia-owl:owner dbr:Christopher_Columbus ;
        rdfs:label ?shipName .
  FILTER(REGEX(?shipName, ""ship"", ""i""))
}
LIMIT 3
```
This query retrieves the names of the ships owned by Christopher Columbus by searching for ships with labels containing the word ""ship"". It limits the results to three ships.","Create SPARQL queries to generate responses to user questions by interpreting natural language queries, specifically targeting DBpedia, beginning from October 2016."
